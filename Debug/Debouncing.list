
Debouncing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cb8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08003e40  08003e40  00013e40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ed4  08003ed4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003ed4  08003ed4  00013ed4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003edc  08003edc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003edc  08003edc  00013edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003ee0  08003ee0  00013ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003ee4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003ef0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003ef0  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d508  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a88  00000000  00000000  0002d544  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  0002efd0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  0002fdb0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f18  00000000  00000000  00030ab8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098c5  00000000  00000000  000569d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee66d  00000000  00000000  00060295  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e902  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a70  00000000  00000000  0014e980  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e28 	.word	0x08003e28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003e28 	.word	0x08003e28

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* each 1 mSeg */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	led2.counter++;
 80004d0:	4b20      	ldr	r3, [pc, #128]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004d2:	885b      	ldrh	r3, [r3, #2]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	3301      	adds	r3, #1
 80004d8:	b29a      	uxth	r2, r3
 80004da:	4b1e      	ldr	r3, [pc, #120]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004dc:	805a      	strh	r2, [r3, #2]

	if (fsm_button.start_countdown == TRUE) {
 80004de:	4b1e      	ldr	r3, [pc, #120]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004e0:	78db      	ldrb	r3, [r3, #3]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d005      	beq.n	80004f8 <HAL_TIM_PeriodElapsedCallback+0x30>
		fsm_button.counter++;
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b18      	ldr	r3, [pc, #96]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80004f6:	709a      	strb	r2, [r3, #2]
	}

	if (led2.counter >= led2.period && led2.start == 1) {
 80004f8:	4b16      	ldr	r3, [pc, #88]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80004fa:	885b      	ldrh	r3, [r3, #2]
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	4b15      	ldr	r3, [pc, #84]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	b29b      	uxth	r3, r3
 8000504:	429a      	cmp	r2, r3
 8000506:	d30c      	bcc.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x5a>
 8000508:	4b12      	ldr	r3, [pc, #72]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b01      	cmp	r3, #1
 8000510:	d107      	bne.n	8000522 <HAL_TIM_PeriodElapsedCallback+0x5a>
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000512:	2120      	movs	r1, #32
 8000514:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000518:	f000 ff44 	bl	80013a4 <HAL_GPIO_TogglePin>
		led2.counter = 0;
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 800051e:	2200      	movs	r2, #0
 8000520:	805a      	strh	r2, [r3, #2]
	}
	/* 10 mSeg elapsed*/
	if (fsm_button.counter >= TICK_PERIOD) {
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000524:	789b      	ldrb	r3, [r3, #2]
 8000526:	2b09      	cmp	r3, #9
 8000528:	d90f      	bls.n	800054a <HAL_TIM_PeriodElapsedCallback+0x82>
		fsm_button.counter = 0;
 800052a:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800052c:	2200      	movs	r2, #0
 800052e:	709a      	strb	r2, [r3, #2]
		fsm_button.start_countdown = FALSE;
 8000530:	4a09      	ldr	r2, [pc, #36]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000532:	78d3      	ldrb	r3, [r2, #3]
 8000534:	f36f 0341 	bfc	r3, #1, #1
 8000538:	70d3      	strb	r3, [r2, #3]
		fsm_button.new_event = TRUE;
 800053a:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800053c:	78d3      	ldrb	r3, [r2, #3]
 800053e:	f043 0301 	orr.w	r3, r3, #1
 8000542:	70d3      	strb	r3, [r2, #3]
		fsm_button.event = TICK_TIMEOUT;
 8000544:	4b04      	ldr	r3, [pc, #16]	; (8000558 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000546:	2202      	movs	r2, #2
 8000548:	705a      	strb	r2, [r3, #1]
	}
}
 800054a:	bf00      	nop
 800054c:	3708      	adds	r7, #8
 800054e:	46bd      	mov	sp, r7
 8000550:	bd80      	pop	{r7, pc}
 8000552:	bf00      	nop
 8000554:	200000ec 	.word	0x200000ec
 8000558:	20000028 	.word	0x20000028

0800055c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 800055c:	b480      	push	{r7}
 800055e:	b083      	sub	sp, #12
 8000560:	af00      	add	r7, sp, #0
 8000562:	4603      	mov	r3, r0
 8000564:	80fb      	strh	r3, [r7, #6]
	if ( fsm_button.state == WAITING ) {
 8000566:	4b09      	ldr	r3, [pc, #36]	; (800058c <HAL_GPIO_EXTI_Callback+0x30>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	2b00      	cmp	r3, #0
 800056c:	d107      	bne.n	800057e <HAL_GPIO_EXTI_Callback+0x22>
		fsm_button.event = BUTTON_ON;
 800056e:	4b07      	ldr	r3, [pc, #28]	; (800058c <HAL_GPIO_EXTI_Callback+0x30>)
 8000570:	2201      	movs	r2, #1
 8000572:	705a      	strb	r2, [r3, #1]
		fsm_button.new_event = TRUE;
 8000574:	4a05      	ldr	r2, [pc, #20]	; (800058c <HAL_GPIO_EXTI_Callback+0x30>)
 8000576:	78d3      	ldrb	r3, [r2, #3]
 8000578:	f043 0301 	orr.w	r3, r3, #1
 800057c:	70d3      	strb	r3, [r2, #3]
	}
}
 800057e:	bf00      	nop
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000028 	.word	0x20000028

08000590 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	init_led_struct(&led2);
 8000594:	4850      	ldr	r0, [pc, #320]	; (80006d8 <main+0x148>)
 8000596:	f000 f9e7 	bl	8000968 <init_led_struct>
	init_fsm(&fsm_button);
 800059a:	4850      	ldr	r0, [pc, #320]	; (80006dc <main+0x14c>)
 800059c:	f000 f9f8 	bl	8000990 <init_fsm>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005a0:	f000 fba5 	bl	8000cee <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005a4:	f000 f8a4 	bl	80006f0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a8:	f000 f986 	bl	80008b8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005ac:	f000 f954 	bl	8000858 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80005b0:	f000 f904 	bl	80007bc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80005b4:	484a      	ldr	r0, [pc, #296]	; (80006e0 <main+0x150>)
 80005b6:	f002 fa51 	bl	8002a5c <HAL_TIM_Base_Start_IT>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (fsm_button.new_event == TRUE) {
 80005ba:	4b48      	ldr	r3, [pc, #288]	; (80006dc <main+0x14c>)
 80005bc:	78db      	ldrb	r3, [r3, #3]
 80005be:	f003 0301 	and.w	r3, r3, #1
 80005c2:	b2db      	uxtb	r3, r3
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d07d      	beq.n	80006c4 <main+0x134>
			fsm_button.new_event = FALSE;
 80005c8:	4a44      	ldr	r2, [pc, #272]	; (80006dc <main+0x14c>)
 80005ca:	78d3      	ldrb	r3, [r2, #3]
 80005cc:	f36f 0300 	bfc	r3, #0, #1
 80005d0:	70d3      	strb	r3, [r2, #3]
			switch (fsm_button.state) {
 80005d2:	4b42      	ldr	r3, [pc, #264]	; (80006dc <main+0x14c>)
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	2b03      	cmp	r3, #3
 80005d8:	d86a      	bhi.n	80006b0 <main+0x120>
 80005da:	a201      	add	r2, pc, #4	; (adr r2, 80005e0 <main+0x50>)
 80005dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005e0:	080005f1 	.word	0x080005f1
 80005e4:	08000611 	.word	0x08000611
 80005e8:	08000649 	.word	0x08000649
 80005ec:	0800068b 	.word	0x0800068b
			case WAITING:
				print_current_state(&fsm_button);
 80005f0:	483a      	ldr	r0, [pc, #232]	; (80006dc <main+0x14c>)
 80005f2:	f000 fa03 	bl	80009fc <print_current_state>
				if ( fsm_button.event == BUTTON_ON ) {
 80005f6:	4b39      	ldr	r3, [pc, #228]	; (80006dc <main+0x14c>)
 80005f8:	785b      	ldrb	r3, [r3, #1]
 80005fa:	2b01      	cmp	r3, #1
 80005fc:	d164      	bne.n	80006c8 <main+0x138>
					fsm_button.start_countdown = TRUE;
 80005fe:	4a37      	ldr	r2, [pc, #220]	; (80006dc <main+0x14c>)
 8000600:	78d3      	ldrb	r3, [r2, #3]
 8000602:	f043 0302 	orr.w	r3, r3, #2
 8000606:	70d3      	strb	r3, [r2, #3]
					fsm_button.state = DETECTED;
 8000608:	4b34      	ldr	r3, [pc, #208]	; (80006dc <main+0x14c>)
 800060a:	2201      	movs	r2, #1
 800060c:	701a      	strb	r2, [r3, #0]
				}
				break;
 800060e:	e05b      	b.n	80006c8 <main+0x138>
			case DETECTED:
				print_current_state(&fsm_button);
 8000610:	4832      	ldr	r0, [pc, #200]	; (80006dc <main+0x14c>)
 8000612:	f000 f9f3 	bl	80009fc <print_current_state>
				if ( fsm_button.event == TICK_TIMEOUT ) {
 8000616:	4b31      	ldr	r3, [pc, #196]	; (80006dc <main+0x14c>)
 8000618:	785b      	ldrb	r3, [r3, #1]
 800061a:	2b02      	cmp	r3, #2
 800061c:	d156      	bne.n	80006cc <main+0x13c>
					if (button_pressed(B1_GPIO_Port, B1_Pin)) {
 800061e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000622:	4830      	ldr	r0, [pc, #192]	; (80006e4 <main+0x154>)
 8000624:	f000 f9d2 	bl	80009cc <button_pressed>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d008      	beq.n	8000640 <main+0xb0>
						fsm_button.state = WAIT_RELEASE;
 800062e:	4b2b      	ldr	r3, [pc, #172]	; (80006dc <main+0x14c>)
 8000630:	2202      	movs	r2, #2
 8000632:	701a      	strb	r2, [r3, #0]
						fsm_button.start_countdown = TRUE;
 8000634:	4a29      	ldr	r2, [pc, #164]	; (80006dc <main+0x14c>)
 8000636:	78d3      	ldrb	r3, [r2, #3]
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	70d3      	strb	r3, [r2, #3]
					} else {
						fsm_button.state = WAITING;
					}
				}
				break;
 800063e:	e045      	b.n	80006cc <main+0x13c>
						fsm_button.state = WAITING;
 8000640:	4b26      	ldr	r3, [pc, #152]	; (80006dc <main+0x14c>)
 8000642:	2200      	movs	r2, #0
 8000644:	701a      	strb	r2, [r3, #0]
				break;
 8000646:	e041      	b.n	80006cc <main+0x13c>
			case WAIT_RELEASE:
				print_current_state(&fsm_button);
 8000648:	4824      	ldr	r0, [pc, #144]	; (80006dc <main+0x14c>)
 800064a:	f000 f9d7 	bl	80009fc <print_current_state>
				if ( fsm_button.event == TICK_TIMEOUT ) {
 800064e:	4b23      	ldr	r3, [pc, #140]	; (80006dc <main+0x14c>)
 8000650:	785b      	ldrb	r3, [r3, #1]
 8000652:	2b02      	cmp	r3, #2
 8000654:	d13c      	bne.n	80006d0 <main+0x140>
					if (!button_pressed(B1_GPIO_Port, B1_Pin)) {
 8000656:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800065a:	4822      	ldr	r0, [pc, #136]	; (80006e4 <main+0x154>)
 800065c:	f000 f9b6 	bl	80009cc <button_pressed>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d108      	bne.n	8000678 <main+0xe8>
						fsm_button.state = UPDATE;
 8000666:	4b1d      	ldr	r3, [pc, #116]	; (80006dc <main+0x14c>)
 8000668:	2203      	movs	r2, #3
 800066a:	701a      	strb	r2, [r3, #0]
						fsm_button.start_countdown = TRUE;
 800066c:	4a1b      	ldr	r2, [pc, #108]	; (80006dc <main+0x14c>)
 800066e:	78d3      	ldrb	r3, [r2, #3]
 8000670:	f043 0302 	orr.w	r3, r3, #2
 8000674:	70d3      	strb	r3, [r2, #3]
					} else {
						fsm_button.state = WAIT_RELEASE;
						fsm_button.start_countdown = TRUE;
					}
				}
				break;
 8000676:	e02b      	b.n	80006d0 <main+0x140>
						fsm_button.state = WAIT_RELEASE;
 8000678:	4b18      	ldr	r3, [pc, #96]	; (80006dc <main+0x14c>)
 800067a:	2202      	movs	r2, #2
 800067c:	701a      	strb	r2, [r3, #0]
						fsm_button.start_countdown = TRUE;
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <main+0x14c>)
 8000680:	78d3      	ldrb	r3, [r2, #3]
 8000682:	f043 0302 	orr.w	r3, r3, #2
 8000686:	70d3      	strb	r3, [r2, #3]
				break;
 8000688:	e022      	b.n	80006d0 <main+0x140>
			case UPDATE:
				print_current_state(&fsm_button);
 800068a:	4814      	ldr	r0, [pc, #80]	; (80006dc <main+0x14c>)
 800068c:	f000 f9b6 	bl	80009fc <print_current_state>
				if ( fsm_button.event == TICK_TIMEOUT ) {
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <main+0x14c>)
 8000692:	785b      	ldrb	r3, [r3, #1]
 8000694:	2b02      	cmp	r3, #2
 8000696:	d11d      	bne.n	80006d4 <main+0x144>
					fsm_button.state = WAITING;
 8000698:	4b10      	ldr	r3, [pc, #64]	; (80006dc <main+0x14c>)
 800069a:	2200      	movs	r2, #0
 800069c:	701a      	strb	r2, [r3, #0]
					fsm_button.event = NON_EVENT;
 800069e:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <main+0x14c>)
 80006a0:	2200      	movs	r2, #0
 80006a2:	705a      	strb	r2, [r3, #1]
					fsm_button.new_event = TRUE;
 80006a4:	4a0d      	ldr	r2, [pc, #52]	; (80006dc <main+0x14c>)
 80006a6:	78d3      	ldrb	r3, [r2, #3]
 80006a8:	f043 0301 	orr.w	r3, r3, #1
 80006ac:	70d3      	strb	r3, [r2, #3]
				}
				break;
 80006ae:	e011      	b.n	80006d4 <main+0x144>
			default:
				print_current_state(&fsm_button);
 80006b0:	480a      	ldr	r0, [pc, #40]	; (80006dc <main+0x14c>)
 80006b2:	f000 f9a3 	bl	80009fc <print_current_state>
				HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown State", sizeof("Unknown State"), 100);
 80006b6:	2364      	movs	r3, #100	; 0x64
 80006b8:	220e      	movs	r2, #14
 80006ba:	490b      	ldr	r1, [pc, #44]	; (80006e8 <main+0x158>)
 80006bc:	480b      	ldr	r0, [pc, #44]	; (80006ec <main+0x15c>)
 80006be:	f002 fe1f 	bl	8003300 <HAL_UART_Transmit>
				break;
 80006c2:	e008      	b.n	80006d6 <main+0x146>
			}
		}
 80006c4:	bf00      	nop
 80006c6:	e778      	b.n	80005ba <main+0x2a>
				break;
 80006c8:	bf00      	nop
 80006ca:	e776      	b.n	80005ba <main+0x2a>
				break;
 80006cc:	bf00      	nop
 80006ce:	e774      	b.n	80005ba <main+0x2a>
				break;
 80006d0:	bf00      	nop
 80006d2:	e772      	b.n	80005ba <main+0x2a>
				break;
 80006d4:	bf00      	nop
		if (fsm_button.new_event == TRUE) {
 80006d6:	e770      	b.n	80005ba <main+0x2a>
 80006d8:	200000ec 	.word	0x200000ec
 80006dc:	20000028 	.word	0x20000028
 80006e0:	2000002c 	.word	0x2000002c
 80006e4:	48000800 	.word	0x48000800
 80006e8:	08003e40 	.word	0x08003e40
 80006ec:	2000006c 	.word	0x2000006c

080006f0 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b0b8      	sub	sp, #224	; 0xe0
 80006f4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006f6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006fa:	2244      	movs	r2, #68	; 0x44
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f003 fb8a 	bl	8003e18 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000704:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
 800070c:	605a      	str	r2, [r3, #4]
 800070e:	609a      	str	r2, [r3, #8]
 8000710:	60da      	str	r2, [r3, #12]
 8000712:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000714:	463b      	mov	r3, r7
 8000716:	2288      	movs	r2, #136	; 0x88
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f003 fb7c 	bl	8003e18 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000720:	2310      	movs	r3, #16
 8000722:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000726:	2301      	movs	r3, #1
 8000728:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000732:	2380      	movs	r3, #128	; 0x80
 8000734:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000738:	2300      	movs	r3, #0
 800073a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000742:	4618      	mov	r0, r3
 8000744:	f000 fec4 	bl	80014d0 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x62>
	{
		Error_Handler();
 800074e:	f000 f99d 	bl	8000a8c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076a:	2300      	movs	r3, #0
 800076c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000770:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fa90 	bl	8001c9c <HAL_RCC_ClockConfig>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <SystemClock_Config+0x96>
	{
		Error_Handler();
 8000782:	f000 f983 	bl	8000a8c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000786:	2302      	movs	r3, #2
 8000788:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800078a:	2300      	movs	r3, #0
 800078c:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800078e:	463b      	mov	r3, r7
 8000790:	4618      	mov	r0, r3
 8000792:	f001 fc87 	bl	80020a4 <HAL_RCCEx_PeriphCLKConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 800079c:	f000 f976 	bl	8000a8c <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007a4:	f000 fe3e 	bl	8001424 <HAL_PWREx_ControlVoltageScaling>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80007ae:	f000 f96d 	bl	8000a8c <Error_Handler>
	}
}
 80007b2:	bf00      	nop
 80007b4:	37e0      	adds	r7, #224	; 0xe0
 80007b6:	46bd      	mov	sp, r7
 80007b8:	bd80      	pop	{r7, pc}
	...

080007bc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b088      	sub	sp, #32
 80007c0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0310 	add.w	r3, r7, #16
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	1d3b      	adds	r3, r7, #4
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007da:	4b1e      	ldr	r3, [pc, #120]	; (8000854 <MX_TIM2_Init+0x98>)
 80007dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007e0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 80007e2:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <MX_TIM2_Init+0x98>)
 80007e4:	2210      	movs	r2, #16
 80007e6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e8:	4b1a      	ldr	r3, [pc, #104]	; (8000854 <MX_TIM2_Init+0x98>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80007f4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007f6:	4b17      	ldr	r3, [pc, #92]	; (8000854 <MX_TIM2_Init+0x98>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007fc:	4b15      	ldr	r3, [pc, #84]	; (8000854 <MX_TIM2_Init+0x98>)
 80007fe:	2200      	movs	r2, #0
 8000800:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000802:	4814      	ldr	r0, [pc, #80]	; (8000854 <MX_TIM2_Init+0x98>)
 8000804:	f002 f8fe 	bl	8002a04 <HAL_TIM_Base_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 800080e:	f000 f93d 	bl	8000a8c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000812:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000816:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000818:	f107 0310 	add.w	r3, r7, #16
 800081c:	4619      	mov	r1, r3
 800081e:	480d      	ldr	r0, [pc, #52]	; (8000854 <MX_TIM2_Init+0x98>)
 8000820:	f002 fa65 	bl	8002cee <HAL_TIM_ConfigClockSource>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 800082a:	f000 f92f 	bl	8000a8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800082e:	2300      	movs	r3, #0
 8000830:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000832:	2300      	movs	r3, #0
 8000834:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000836:	1d3b      	adds	r3, r7, #4
 8000838:	4619      	mov	r1, r3
 800083a:	4806      	ldr	r0, [pc, #24]	; (8000854 <MX_TIM2_Init+0x98>)
 800083c:	f002 fc6c 	bl	8003118 <HAL_TIMEx_MasterConfigSynchronization>
 8000840:	4603      	mov	r3, r0
 8000842:	2b00      	cmp	r3, #0
 8000844:	d001      	beq.n	800084a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000846:	f000 f921 	bl	8000a8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800084a:	bf00      	nop
 800084c:	3720      	adds	r7, #32
 800084e:	46bd      	mov	sp, r7
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	2000002c 	.word	0x2000002c

08000858 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800085c:	4b14      	ldr	r3, [pc, #80]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800085e:	4a15      	ldr	r2, [pc, #84]	; (80008b4 <MX_USART2_UART_Init+0x5c>)
 8000860:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000862:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000864:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000868:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000870:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000876:	4b0e      	ldr	r3, [pc, #56]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800087c:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800087e:	220c      	movs	r2, #12
 8000880:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000882:	4b0b      	ldr	r3, [pc, #44]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800088a:	2200      	movs	r2, #0
 800088c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800088e:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000894:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800089a:	4805      	ldr	r0, [pc, #20]	; (80008b0 <MX_USART2_UART_Init+0x58>)
 800089c:	f002 fce2 	bl	8003264 <HAL_UART_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80008a6:	f000 f8f1 	bl	8000a8c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000006c 	.word	0x2000006c
 80008b4:	40004400 	.word	0x40004400

080008b8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b088      	sub	sp, #32
 80008bc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 030c 	add.w	r3, r7, #12
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	4b23      	ldr	r3, [pc, #140]	; (800095c <MX_GPIO_Init+0xa4>)
 80008d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d2:	4a22      	ldr	r2, [pc, #136]	; (800095c <MX_GPIO_Init+0xa4>)
 80008d4:	f043 0304 	orr.w	r3, r3, #4
 80008d8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008da:	4b20      	ldr	r3, [pc, #128]	; (800095c <MX_GPIO_Init+0xa4>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008de:	f003 0304 	and.w	r3, r3, #4
 80008e2:	60bb      	str	r3, [r7, #8]
 80008e4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b1d      	ldr	r3, [pc, #116]	; (800095c <MX_GPIO_Init+0xa4>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ea:	4a1c      	ldr	r2, [pc, #112]	; (800095c <MX_GPIO_Init+0xa4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_GPIO_Init+0xa4>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
 80008fc:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2120      	movs	r1, #32
 8000902:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000906:	f000 fd35 	bl	8001374 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800090a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000910:	4b13      	ldr	r3, [pc, #76]	; (8000960 <MX_GPIO_Init+0xa8>)
 8000912:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 030c 	add.w	r3, r7, #12
 800091c:	4619      	mov	r1, r3
 800091e:	4811      	ldr	r0, [pc, #68]	; (8000964 <MX_GPIO_Init+0xac>)
 8000920:	f000 fb68 	bl	8000ff4 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000924:	2320      	movs	r3, #32
 8000926:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 030c 	add.w	r3, r7, #12
 8000938:	4619      	mov	r1, r3
 800093a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800093e:	f000 fb59 	bl	8000ff4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000942:	2200      	movs	r2, #0
 8000944:	2100      	movs	r1, #0
 8000946:	2028      	movs	r0, #40	; 0x28
 8000948:	f000 fb1d 	bl	8000f86 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800094c:	2028      	movs	r0, #40	; 0x28
 800094e:	f000 fb36 	bl	8000fbe <HAL_NVIC_EnableIRQ>

}
 8000952:	bf00      	nop
 8000954:	3720      	adds	r7, #32
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000
 8000960:	10110000 	.word	0x10110000
 8000964:	48000800 	.word	0x48000800

08000968 <init_led_struct>:

/* USER CODE BEGIN 4 */
void init_led_struct ( led_t *led ) {
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
	led->counter = 0;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	2200      	movs	r2, #0
 8000974:	805a      	strh	r2, [r3, #2]
	led->period = PERIOD;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800097c:	801a      	strh	r2, [r3, #0]
	led->start = 1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2201      	movs	r2, #1
 8000982:	711a      	strb	r2, [r3, #4]
}
 8000984:	bf00      	nop
 8000986:	370c      	adds	r7, #12
 8000988:	46bd      	mov	sp, r7
 800098a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098e:	4770      	bx	lr

08000990 <init_fsm>:

void init_fsm ( fsm_t *sm ) {
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
	sm->state = WAITING;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	2200      	movs	r2, #0
 800099c:	701a      	strb	r2, [r3, #0]
	sm->event = NON_EVENT;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2200      	movs	r2, #0
 80009a2:	705a      	strb	r2, [r3, #1]
	sm->new_event = FALSE;
 80009a4:	687a      	ldr	r2, [r7, #4]
 80009a6:	78d3      	ldrb	r3, [r2, #3]
 80009a8:	f36f 0300 	bfc	r3, #0, #1
 80009ac:	70d3      	strb	r3, [r2, #3]
	sm->counter = 0;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	709a      	strb	r2, [r3, #2]
	sm->start_countdown = 0;
 80009b4:	687a      	ldr	r2, [r7, #4]
 80009b6:	78d3      	ldrb	r3, [r2, #3]
 80009b8:	f36f 0341 	bfc	r3, #1, #1
 80009bc:	70d3      	strb	r3, [r2, #3]
}
 80009be:	bf00      	nop
 80009c0:	370c      	adds	r7, #12
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <button_pressed>:

GPIO_PinState button_pressed ( GPIO_TypeDef *port, uint16_t pin ) {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	460b      	mov	r3, r1
 80009d6:	807b      	strh	r3, [r7, #2]
	return !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80009d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009dc:	4806      	ldr	r0, [pc, #24]	; (80009f8 <button_pressed+0x2c>)
 80009de:	f000 fcb1 	bl	8001344 <HAL_GPIO_ReadPin>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	bf0c      	ite	eq
 80009e8:	2301      	moveq	r3, #1
 80009ea:	2300      	movne	r3, #0
 80009ec:	b2db      	uxtb	r3, r3
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	3708      	adds	r7, #8
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	48000800 	.word	0x48000800

080009fc <print_current_state>:

void print_current_state ( fsm_t *fsm ) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b082      	sub	sp, #8
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	switch (fsm->state) {
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	2b03      	cmp	r3, #3
 8000a0a:	d827      	bhi.n	8000a5c <print_current_state+0x60>
 8000a0c:	a201      	add	r2, pc, #4	; (adr r2, 8000a14 <print_current_state+0x18>)
 8000a0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a12:	bf00      	nop
 8000a14:	08000a25 	.word	0x08000a25
 8000a18:	08000a33 	.word	0x08000a33
 8000a1c:	08000a41 	.word	0x08000a41
 8000a20:	08000a4f 	.word	0x08000a4f
	case WAITING:
		HAL_UART_Transmit(&huart2, (uint8_t*)"WAITING\n", sizeof("WAITING\n")-1, 100);
 8000a24:	2364      	movs	r3, #100	; 0x64
 8000a26:	2208      	movs	r2, #8
 8000a28:	4912      	ldr	r1, [pc, #72]	; (8000a74 <print_current_state+0x78>)
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <print_current_state+0x7c>)
 8000a2c:	f002 fc68 	bl	8003300 <HAL_UART_Transmit>
		break;
 8000a30:	e01b      	b.n	8000a6a <print_current_state+0x6e>
	case DETECTED:
		HAL_UART_Transmit(&huart2, (uint8_t*)"DETECTED\n", sizeof("DETECTED\n")-1, 100);
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	2209      	movs	r2, #9
 8000a36:	4911      	ldr	r1, [pc, #68]	; (8000a7c <print_current_state+0x80>)
 8000a38:	480f      	ldr	r0, [pc, #60]	; (8000a78 <print_current_state+0x7c>)
 8000a3a:	f002 fc61 	bl	8003300 <HAL_UART_Transmit>
		break;
 8000a3e:	e014      	b.n	8000a6a <print_current_state+0x6e>
	case WAIT_RELEASE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"WAIT FOR RELEASE\n", sizeof("WAIT FOR RELEASE\n")-1, 100);
 8000a40:	2364      	movs	r3, #100	; 0x64
 8000a42:	2211      	movs	r2, #17
 8000a44:	490e      	ldr	r1, [pc, #56]	; (8000a80 <print_current_state+0x84>)
 8000a46:	480c      	ldr	r0, [pc, #48]	; (8000a78 <print_current_state+0x7c>)
 8000a48:	f002 fc5a 	bl	8003300 <HAL_UART_Transmit>
		break;
 8000a4c:	e00d      	b.n	8000a6a <print_current_state+0x6e>
	case UPDATE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"UPDATE\n", sizeof("UPDATE\n")-1, 100);
 8000a4e:	2364      	movs	r3, #100	; 0x64
 8000a50:	2207      	movs	r2, #7
 8000a52:	490c      	ldr	r1, [pc, #48]	; (8000a84 <print_current_state+0x88>)
 8000a54:	4808      	ldr	r0, [pc, #32]	; (8000a78 <print_current_state+0x7c>)
 8000a56:	f002 fc53 	bl	8003300 <HAL_UART_Transmit>
		break;
 8000a5a:	e006      	b.n	8000a6a <print_current_state+0x6e>
	default:
		HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR\n", sizeof("ERROR\n")-1, 100);
 8000a5c:	2364      	movs	r3, #100	; 0x64
 8000a5e:	2206      	movs	r2, #6
 8000a60:	4909      	ldr	r1, [pc, #36]	; (8000a88 <print_current_state+0x8c>)
 8000a62:	4805      	ldr	r0, [pc, #20]	; (8000a78 <print_current_state+0x7c>)
 8000a64:	f002 fc4c 	bl	8003300 <HAL_UART_Transmit>
		break;
 8000a68:	bf00      	nop
	}
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	08003e50 	.word	0x08003e50
 8000a78:	2000006c 	.word	0x2000006c
 8000a7c:	08003e5c 	.word	0x08003e5c
 8000a80:	08003e68 	.word	0x08003e68
 8000a84:	08003e7c 	.word	0x08003e7c
 8000a88:	08003e84 	.word	0x08003e84

08000a8c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000a90:	bf00      	nop
 8000a92:	46bd      	mov	sp, r7
 8000a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a98:	4770      	bx	lr
	...

08000a9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aa2:	4b0f      	ldr	r3, [pc, #60]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000aa6:	4a0e      	ldr	r2, [pc, #56]	; (8000ae0 <HAL_MspInit+0x44>)
 8000aa8:	f043 0301 	orr.w	r3, r3, #1
 8000aac:	6613      	str	r3, [r2, #96]	; 0x60
 8000aae:	4b0c      	ldr	r3, [pc, #48]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ab0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ab2:	f003 0301 	and.w	r3, r3, #1
 8000ab6:	607b      	str	r3, [r7, #4]
 8000ab8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <HAL_MspInit+0x44>)
 8000abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000abe:	4a08      	ldr	r2, [pc, #32]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac6:	4b06      	ldr	r3, [pc, #24]	; (8000ae0 <HAL_MspInit+0x44>)
 8000ac8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ace:	603b      	str	r3, [r7, #0]
 8000ad0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr
 8000ade:	bf00      	nop
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b084      	sub	sp, #16
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000aec:	687b      	ldr	r3, [r7, #4]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000af4:	d113      	bne.n	8000b1e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_TIM_Base_MspInit+0x44>)
 8000af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000afa:	4a0b      	ldr	r2, [pc, #44]	; (8000b28 <HAL_TIM_Base_MspInit+0x44>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	6593      	str	r3, [r2, #88]	; 0x58
 8000b02:	4b09      	ldr	r3, [pc, #36]	; (8000b28 <HAL_TIM_Base_MspInit+0x44>)
 8000b04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b0e:	2200      	movs	r2, #0
 8000b10:	2100      	movs	r1, #0
 8000b12:	201c      	movs	r0, #28
 8000b14:	f000 fa37 	bl	8000f86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b18:	201c      	movs	r0, #28
 8000b1a:	f000 fa50 	bl	8000fbe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b1e:	bf00      	nop
 8000b20:	3710      	adds	r7, #16
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40021000 	.word	0x40021000

08000b2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b34:	f107 0314 	add.w	r3, r7, #20
 8000b38:	2200      	movs	r2, #0
 8000b3a:	601a      	str	r2, [r3, #0]
 8000b3c:	605a      	str	r2, [r3, #4]
 8000b3e:	609a      	str	r2, [r3, #8]
 8000b40:	60da      	str	r2, [r3, #12]
 8000b42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	4a17      	ldr	r2, [pc, #92]	; (8000ba8 <HAL_UART_MspInit+0x7c>)
 8000b4a:	4293      	cmp	r3, r2
 8000b4c:	d128      	bne.n	8000ba0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b4e:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b52:	4a16      	ldr	r2, [pc, #88]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b58:	6593      	str	r3, [r2, #88]	; 0x58
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b62:	613b      	str	r3, [r7, #16]
 8000b64:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	4a10      	ldr	r2, [pc, #64]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b6c:	f043 0301 	orr.w	r3, r3, #1
 8000b70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <HAL_UART_MspInit+0x80>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	f003 0301 	and.w	r3, r3, #1
 8000b7a:	60fb      	str	r3, [r7, #12]
 8000b7c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b7e:	230c      	movs	r3, #12
 8000b80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b82:	2302      	movs	r3, #2
 8000b84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b86:	2300      	movs	r3, #0
 8000b88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b8a:	2303      	movs	r3, #3
 8000b8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b8e:	2307      	movs	r3, #7
 8000b90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b92:	f107 0314 	add.w	r3, r7, #20
 8000b96:	4619      	mov	r1, r3
 8000b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9c:	f000 fa2a 	bl	8000ff4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ba0:	bf00      	nop
 8000ba2:	3728      	adds	r7, #40	; 0x28
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40004400 	.word	0x40004400
 8000bac:	40021000 	.word	0x40021000

08000bb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bc2:	e7fe      	b.n	8000bc2 <HardFault_Handler+0x4>

08000bc4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <MemManage_Handler+0x4>

08000bca <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bca:	b480      	push	{r7}
 8000bcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bce:	e7fe      	b.n	8000bce <BusFault_Handler+0x4>

08000bd0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bd4:	e7fe      	b.n	8000bd4 <UsageFault_Handler+0x4>

08000bd6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bd6:	b480      	push	{r7}
 8000bd8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bda:	bf00      	nop
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr

08000be4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000be8:	bf00      	nop
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr

08000bf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bf2:	b480      	push	{r7}
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bf6:	bf00      	nop
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c04:	f000 f8c6 	bl	8000d94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c10:	4802      	ldr	r0, [pc, #8]	; (8000c1c <TIM2_IRQHandler+0x10>)
 8000c12:	f001 ff4d 	bl	8002ab0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	2000002c 	.word	0x2000002c

08000c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c24:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c28:	f000 fbd6 	bl	80013d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c2c:	bf00      	nop
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c34:	4b17      	ldr	r3, [pc, #92]	; (8000c94 <SystemInit+0x64>)
 8000c36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c3a:	4a16      	ldr	r2, [pc, #88]	; (8000c94 <SystemInit+0x64>)
 8000c3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c44:	4b14      	ldr	r3, [pc, #80]	; (8000c98 <SystemInit+0x68>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a13      	ldr	r2, [pc, #76]	; (8000c98 <SystemInit+0x68>)
 8000c4a:	f043 0301 	orr.w	r3, r3, #1
 8000c4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c50:	4b11      	ldr	r3, [pc, #68]	; (8000c98 <SystemInit+0x68>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <SystemInit+0x68>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a0f      	ldr	r2, [pc, #60]	; (8000c98 <SystemInit+0x68>)
 8000c5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	; (8000c98 <SystemInit+0x68>)
 8000c68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c6e:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <SystemInit+0x68>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4a09      	ldr	r2, [pc, #36]	; (8000c98 <SystemInit+0x68>)
 8000c74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c7a:	4b07      	ldr	r3, [pc, #28]	; (8000c98 <SystemInit+0x68>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SystemInit+0x64>)
 8000c82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c86:	609a      	str	r2, [r3, #8]
#endif
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	e000ed00 	.word	0xe000ed00
 8000c98:	40021000 	.word	0x40021000

08000c9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ca0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ca2:	e003      	b.n	8000cac <LoopCopyDataInit>

08000ca4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ca6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ca8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000caa:	3104      	adds	r1, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000cac:	480b      	ldr	r0, [pc, #44]	; (8000cdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cb4:	d3f6      	bcc.n	8000ca4 <CopyDataInit>
	ldr	r2, =_sbss
 8000cb6:	4a0b      	ldr	r2, [pc, #44]	; (8000ce4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cb8:	e002      	b.n	8000cc0 <LoopFillZerobss>

08000cba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cbc:	f842 3b04 	str.w	r3, [r2], #4

08000cc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000cc0:	4b09      	ldr	r3, [pc, #36]	; (8000ce8 <LoopForever+0x16>)
	cmp	r2, r3
 8000cc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000cc4:	d3f9      	bcc.n	8000cba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000cc6:	f7ff ffb3 	bl	8000c30 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cca:	f003 f881 	bl	8003dd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cce:	f7ff fc5f 	bl	8000590 <main>

08000cd2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd2:	e7fe      	b.n	8000cd2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cd8:	08003ee4 	.word	0x08003ee4
	ldr	r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000ce0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000ce4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000ce8:	200000f8 	.word	0x200000f8

08000cec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cec:	e7fe      	b.n	8000cec <ADC1_2_IRQHandler>

08000cee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf8:	2003      	movs	r0, #3
 8000cfa:	f000 f939 	bl	8000f70 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000cfe:	2000      	movs	r0, #0
 8000d00:	f000 f80e 	bl	8000d20 <HAL_InitTick>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d002      	beq.n	8000d10 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	e001      	b.n	8000d14 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d10:	f7ff fec4 	bl	8000a9c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d14:	79fb      	ldrb	r3, [r7, #7]
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
	...

08000d20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d2c:	4b16      	ldr	r3, [pc, #88]	; (8000d88 <HAL_InitTick+0x68>)
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d022      	beq.n	8000d7a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d34:	4b15      	ldr	r3, [pc, #84]	; (8000d8c <HAL_InitTick+0x6c>)
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	4b13      	ldr	r3, [pc, #76]	; (8000d88 <HAL_InitTick+0x68>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d40:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f000 f946 	bl	8000fda <HAL_SYSTICK_Config>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d10f      	bne.n	8000d74 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2b0f      	cmp	r3, #15
 8000d58:	d809      	bhi.n	8000d6e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d62:	f000 f910 	bl	8000f86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d66:	4a0a      	ldr	r2, [pc, #40]	; (8000d90 <HAL_InitTick+0x70>)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	6013      	str	r3, [r2, #0]
 8000d6c:	e007      	b.n	8000d7e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	73fb      	strb	r3, [r7, #15]
 8000d72:	e004      	b.n	8000d7e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d74:	2301      	movs	r3, #1
 8000d76:	73fb      	strb	r3, [r7, #15]
 8000d78:	e001      	b.n	8000d7e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d80:	4618      	mov	r0, r3
 8000d82:	3710      	adds	r7, #16
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000008 	.word	0x20000008
 8000d8c:	20000000 	.word	0x20000000
 8000d90:	20000004 	.word	0x20000004

08000d94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_IncTick+0x1c>)
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_IncTick+0x20>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4413      	add	r3, r2
 8000da2:	4a03      	ldr	r2, [pc, #12]	; (8000db0 <HAL_IncTick+0x1c>)
 8000da4:	6013      	str	r3, [r2, #0]
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr
 8000db0:	200000f4 	.word	0x200000f4
 8000db4:	20000008 	.word	0x20000008

08000db8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db8:	b480      	push	{r7}
 8000dba:	af00      	add	r7, sp, #0
  return uwTick;
 8000dbc:	4b03      	ldr	r3, [pc, #12]	; (8000dcc <HAL_GetTick+0x14>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
}
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr
 8000dca:	bf00      	nop
 8000dcc:	200000f4 	.word	0x200000f4

08000dd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b085      	sub	sp, #20
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	f003 0307 	and.w	r3, r3, #7
 8000dde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000de0:	4b0c      	ldr	r3, [pc, #48]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000de2:	68db      	ldr	r3, [r3, #12]
 8000de4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de6:	68ba      	ldr	r2, [r7, #8]
 8000de8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000df8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e02:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <__NVIC_SetPriorityGrouping+0x44>)
 8000e04:	68bb      	ldr	r3, [r7, #8]
 8000e06:	60d3      	str	r3, [r2, #12]
}
 8000e08:	bf00      	nop
 8000e0a:	3714      	adds	r7, #20
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr
 8000e14:	e000ed00 	.word	0xe000ed00

08000e18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e1c:	4b04      	ldr	r3, [pc, #16]	; (8000e30 <__NVIC_GetPriorityGrouping+0x18>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	0a1b      	lsrs	r3, r3, #8
 8000e22:	f003 0307 	and.w	r3, r3, #7
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	e000ed00 	.word	0xe000ed00

08000e34 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e34:	b480      	push	{r7}
 8000e36:	b083      	sub	sp, #12
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	db0b      	blt.n	8000e5e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	f003 021f 	and.w	r2, r3, #31
 8000e4c:	4907      	ldr	r1, [pc, #28]	; (8000e6c <__NVIC_EnableIRQ+0x38>)
 8000e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e52:	095b      	lsrs	r3, r3, #5
 8000e54:	2001      	movs	r0, #1
 8000e56:	fa00 f202 	lsl.w	r2, r0, r2
 8000e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5e:	bf00      	nop
 8000e60:	370c      	adds	r7, #12
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	e000e100 	.word	0xe000e100

08000e70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	4603      	mov	r3, r0
 8000e78:	6039      	str	r1, [r7, #0]
 8000e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	db0a      	blt.n	8000e9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	b2da      	uxtb	r2, r3
 8000e88:	490c      	ldr	r1, [pc, #48]	; (8000ebc <__NVIC_SetPriority+0x4c>)
 8000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8e:	0112      	lsls	r2, r2, #4
 8000e90:	b2d2      	uxtb	r2, r2
 8000e92:	440b      	add	r3, r1
 8000e94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e98:	e00a      	b.n	8000eb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b2da      	uxtb	r2, r3
 8000e9e:	4908      	ldr	r1, [pc, #32]	; (8000ec0 <__NVIC_SetPriority+0x50>)
 8000ea0:	79fb      	ldrb	r3, [r7, #7]
 8000ea2:	f003 030f 	and.w	r3, r3, #15
 8000ea6:	3b04      	subs	r3, #4
 8000ea8:	0112      	lsls	r2, r2, #4
 8000eaa:	b2d2      	uxtb	r2, r2
 8000eac:	440b      	add	r3, r1
 8000eae:	761a      	strb	r2, [r3, #24]
}
 8000eb0:	bf00      	nop
 8000eb2:	370c      	adds	r7, #12
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000e100 	.word	0xe000e100
 8000ec0:	e000ed00 	.word	0xe000ed00

08000ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	b089      	sub	sp, #36	; 0x24
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	60f8      	str	r0, [r7, #12]
 8000ecc:	60b9      	str	r1, [r7, #8]
 8000ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	f003 0307 	and.w	r3, r3, #7
 8000ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed8:	69fb      	ldr	r3, [r7, #28]
 8000eda:	f1c3 0307 	rsb	r3, r3, #7
 8000ede:	2b04      	cmp	r3, #4
 8000ee0:	bf28      	it	cs
 8000ee2:	2304      	movcs	r3, #4
 8000ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	3304      	adds	r3, #4
 8000eea:	2b06      	cmp	r3, #6
 8000eec:	d902      	bls.n	8000ef4 <NVIC_EncodePriority+0x30>
 8000eee:	69fb      	ldr	r3, [r7, #28]
 8000ef0:	3b03      	subs	r3, #3
 8000ef2:	e000      	b.n	8000ef6 <NVIC_EncodePriority+0x32>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000efc:	69bb      	ldr	r3, [r7, #24]
 8000efe:	fa02 f303 	lsl.w	r3, r2, r3
 8000f02:	43da      	mvns	r2, r3
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	401a      	ands	r2, r3
 8000f08:	697b      	ldr	r3, [r7, #20]
 8000f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	fa01 f303 	lsl.w	r3, r1, r3
 8000f16:	43d9      	mvns	r1, r3
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	4313      	orrs	r3, r2
         );
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3724      	adds	r7, #36	; 0x24
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
	...

08000f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	3b01      	subs	r3, #1
 8000f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f3c:	d301      	bcc.n	8000f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e00f      	b.n	8000f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <SysTick_Config+0x40>)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3b01      	subs	r3, #1
 8000f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4a:	210f      	movs	r1, #15
 8000f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f50:	f7ff ff8e 	bl	8000e70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f54:	4b05      	ldr	r3, [pc, #20]	; (8000f6c <SysTick_Config+0x40>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <SysTick_Config+0x40>)
 8000f5c:	2207      	movs	r2, #7
 8000f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f60:	2300      	movs	r3, #0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	e000e010 	.word	0xe000e010

08000f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f78:	6878      	ldr	r0, [r7, #4]
 8000f7a:	f7ff ff29 	bl	8000dd0 <__NVIC_SetPriorityGrouping>
}
 8000f7e:	bf00      	nop
 8000f80:	3708      	adds	r7, #8
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}

08000f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b086      	sub	sp, #24
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	60b9      	str	r1, [r7, #8]
 8000f90:	607a      	str	r2, [r7, #4]
 8000f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f98:	f7ff ff3e 	bl	8000e18 <__NVIC_GetPriorityGrouping>
 8000f9c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f9e:	687a      	ldr	r2, [r7, #4]
 8000fa0:	68b9      	ldr	r1, [r7, #8]
 8000fa2:	6978      	ldr	r0, [r7, #20]
 8000fa4:	f7ff ff8e 	bl	8000ec4 <NVIC_EncodePriority>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fae:	4611      	mov	r1, r2
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff5d 	bl	8000e70 <__NVIC_SetPriority>
}
 8000fb6:	bf00      	nop
 8000fb8:	3718      	adds	r7, #24
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}

08000fbe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fbe:	b580      	push	{r7, lr}
 8000fc0:	b082      	sub	sp, #8
 8000fc2:	af00      	add	r7, sp, #0
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff ff31 	bl	8000e34 <__NVIC_EnableIRQ>
}
 8000fd2:	bf00      	nop
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b082      	sub	sp, #8
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fe2:	6878      	ldr	r0, [r7, #4]
 8000fe4:	f7ff ffa2 	bl	8000f2c <SysTick_Config>
 8000fe8:	4603      	mov	r3, r0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b087      	sub	sp, #28
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
 8000ffc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001002:	e17f      	b.n	8001304 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	2101      	movs	r1, #1
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	fa01 f303 	lsl.w	r3, r1, r3
 8001010:	4013      	ands	r3, r2
 8001012:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8171 	beq.w	80012fe <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	2b01      	cmp	r3, #1
 8001022:	d00b      	beq.n	800103c <HAL_GPIO_Init+0x48>
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	2b02      	cmp	r3, #2
 800102a:	d007      	beq.n	800103c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001030:	2b11      	cmp	r3, #17
 8001032:	d003      	beq.n	800103c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	2b12      	cmp	r3, #18
 800103a:	d130      	bne.n	800109e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	2203      	movs	r2, #3
 8001048:	fa02 f303 	lsl.w	r3, r2, r3
 800104c:	43db      	mvns	r3, r3
 800104e:	693a      	ldr	r2, [r7, #16]
 8001050:	4013      	ands	r3, r2
 8001052:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	68da      	ldr	r2, [r3, #12]
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	005b      	lsls	r3, r3, #1
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4313      	orrs	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001072:	2201      	movs	r2, #1
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa02 f303 	lsl.w	r3, r2, r3
 800107a:	43db      	mvns	r3, r3
 800107c:	693a      	ldr	r2, [r7, #16]
 800107e:	4013      	ands	r3, r2
 8001080:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	091b      	lsrs	r3, r3, #4
 8001088:	f003 0201 	and.w	r2, r3, #1
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	693a      	ldr	r2, [r7, #16]
 8001094:	4313      	orrs	r3, r2
 8001096:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	693a      	ldr	r2, [r7, #16]
 800109c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	f003 0303 	and.w	r3, r3, #3
 80010a6:	2b03      	cmp	r3, #3
 80010a8:	d118      	bne.n	80010dc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010b0:	2201      	movs	r2, #1
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	4013      	ands	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	f003 0201 	and.w	r2, r3, #1
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	693a      	ldr	r2, [r7, #16]
 8001102:	4313      	orrs	r3, r2
 8001104:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b02      	cmp	r3, #2
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x128>
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	2b12      	cmp	r3, #18
 800111a:	d123      	bne.n	8001164 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	08da      	lsrs	r2, r3, #3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	3208      	adds	r2, #8
 8001124:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001128:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	f003 0307 	and.w	r3, r3, #7
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	220f      	movs	r2, #15
 8001134:	fa02 f303 	lsl.w	r3, r2, r3
 8001138:	43db      	mvns	r3, r3
 800113a:	693a      	ldr	r2, [r7, #16]
 800113c:	4013      	ands	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	691a      	ldr	r2, [r3, #16]
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	fa02 f303 	lsl.w	r3, r2, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001156:	697b      	ldr	r3, [r7, #20]
 8001158:	08da      	lsrs	r2, r3, #3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	3208      	adds	r2, #8
 800115e:	6939      	ldr	r1, [r7, #16]
 8001160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800116a:	697b      	ldr	r3, [r7, #20]
 800116c:	005b      	lsls	r3, r3, #1
 800116e:	2203      	movs	r2, #3
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0203 	and.w	r2, r3, #3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	4313      	orrs	r3, r2
 8001190:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80ac 	beq.w	80012fe <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a6:	4b5e      	ldr	r3, [pc, #376]	; (8001320 <HAL_GPIO_Init+0x32c>)
 80011a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011aa:	4a5d      	ldr	r2, [pc, #372]	; (8001320 <HAL_GPIO_Init+0x32c>)
 80011ac:	f043 0301 	orr.w	r3, r3, #1
 80011b0:	6613      	str	r3, [r2, #96]	; 0x60
 80011b2:	4b5b      	ldr	r3, [pc, #364]	; (8001320 <HAL_GPIO_Init+0x32c>)
 80011b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011be:	4a59      	ldr	r2, [pc, #356]	; (8001324 <HAL_GPIO_Init+0x330>)
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011cc:	697b      	ldr	r3, [r7, #20]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4013      	ands	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80011e8:	d025      	beq.n	8001236 <HAL_GPIO_Init+0x242>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4e      	ldr	r2, [pc, #312]	; (8001328 <HAL_GPIO_Init+0x334>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d01f      	beq.n	8001232 <HAL_GPIO_Init+0x23e>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a4d      	ldr	r2, [pc, #308]	; (800132c <HAL_GPIO_Init+0x338>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d019      	beq.n	800122e <HAL_GPIO_Init+0x23a>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a4c      	ldr	r2, [pc, #304]	; (8001330 <HAL_GPIO_Init+0x33c>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d013      	beq.n	800122a <HAL_GPIO_Init+0x236>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a4b      	ldr	r2, [pc, #300]	; (8001334 <HAL_GPIO_Init+0x340>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d00d      	beq.n	8001226 <HAL_GPIO_Init+0x232>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4a      	ldr	r2, [pc, #296]	; (8001338 <HAL_GPIO_Init+0x344>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d007      	beq.n	8001222 <HAL_GPIO_Init+0x22e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a49      	ldr	r2, [pc, #292]	; (800133c <HAL_GPIO_Init+0x348>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d101      	bne.n	800121e <HAL_GPIO_Init+0x22a>
 800121a:	2306      	movs	r3, #6
 800121c:	e00c      	b.n	8001238 <HAL_GPIO_Init+0x244>
 800121e:	2307      	movs	r3, #7
 8001220:	e00a      	b.n	8001238 <HAL_GPIO_Init+0x244>
 8001222:	2305      	movs	r3, #5
 8001224:	e008      	b.n	8001238 <HAL_GPIO_Init+0x244>
 8001226:	2304      	movs	r3, #4
 8001228:	e006      	b.n	8001238 <HAL_GPIO_Init+0x244>
 800122a:	2303      	movs	r3, #3
 800122c:	e004      	b.n	8001238 <HAL_GPIO_Init+0x244>
 800122e:	2302      	movs	r3, #2
 8001230:	e002      	b.n	8001238 <HAL_GPIO_Init+0x244>
 8001232:	2301      	movs	r3, #1
 8001234:	e000      	b.n	8001238 <HAL_GPIO_Init+0x244>
 8001236:	2300      	movs	r3, #0
 8001238:	697a      	ldr	r2, [r7, #20]
 800123a:	f002 0203 	and.w	r2, r2, #3
 800123e:	0092      	lsls	r2, r2, #2
 8001240:	4093      	lsls	r3, r2
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001248:	4936      	ldr	r1, [pc, #216]	; (8001324 <HAL_GPIO_Init+0x330>)
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	089b      	lsrs	r3, r3, #2
 800124e:	3302      	adds	r3, #2
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001256:	4b3a      	ldr	r3, [pc, #232]	; (8001340 <HAL_GPIO_Init+0x34c>)
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	43db      	mvns	r3, r3
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4013      	ands	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800126e:	2b00      	cmp	r3, #0
 8001270:	d003      	beq.n	800127a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800127a:	4a31      	ldr	r2, [pc, #196]	; (8001340 <HAL_GPIO_Init+0x34c>)
 800127c:	693b      	ldr	r3, [r7, #16]
 800127e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001280:	4b2f      	ldr	r3, [pc, #188]	; (8001340 <HAL_GPIO_Init+0x34c>)
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	43db      	mvns	r3, r3
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	4013      	ands	r3, r2
 800128e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d003      	beq.n	80012a4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 800129c:	693a      	ldr	r2, [r7, #16]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012a4:	4a26      	ldr	r2, [pc, #152]	; (8001340 <HAL_GPIO_Init+0x34c>)
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012aa:	4b25      	ldr	r3, [pc, #148]	; (8001340 <HAL_GPIO_Init+0x34c>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d003      	beq.n	80012ce <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012c6:	693a      	ldr	r2, [r7, #16]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ce:	4a1c      	ldr	r2, [pc, #112]	; (8001340 <HAL_GPIO_Init+0x34c>)
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <HAL_GPIO_Init+0x34c>)
 80012d6:	68db      	ldr	r3, [r3, #12]
 80012d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d003      	beq.n	80012f8 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	4313      	orrs	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80012f8:	4a11      	ldr	r2, [pc, #68]	; (8001340 <HAL_GPIO_Init+0x34c>)
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	3301      	adds	r3, #1
 8001302:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	697b      	ldr	r3, [r7, #20]
 800130a:	fa22 f303 	lsr.w	r3, r2, r3
 800130e:	2b00      	cmp	r3, #0
 8001310:	f47f ae78 	bne.w	8001004 <HAL_GPIO_Init+0x10>
  }
}
 8001314:	bf00      	nop
 8001316:	371c      	adds	r7, #28
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40021000 	.word	0x40021000
 8001324:	40010000 	.word	0x40010000
 8001328:	48000400 	.word	0x48000400
 800132c:	48000800 	.word	0x48000800
 8001330:	48000c00 	.word	0x48000c00
 8001334:	48001000 	.word	0x48001000
 8001338:	48001400 	.word	0x48001400
 800133c:	48001800 	.word	0x48001800
 8001340:	40010400 	.word	0x40010400

08001344 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	460b      	mov	r3, r1
 800134e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	691a      	ldr	r2, [r3, #16]
 8001354:	887b      	ldrh	r3, [r7, #2]
 8001356:	4013      	ands	r3, r2
 8001358:	2b00      	cmp	r3, #0
 800135a:	d002      	beq.n	8001362 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800135c:	2301      	movs	r3, #1
 800135e:	73fb      	strb	r3, [r7, #15]
 8001360:	e001      	b.n	8001366 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001362:	2300      	movs	r3, #0
 8001364:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001366:	7bfb      	ldrb	r3, [r7, #15]
}
 8001368:	4618      	mov	r0, r3
 800136a:	3714      	adds	r7, #20
 800136c:	46bd      	mov	sp, r7
 800136e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001372:	4770      	bx	lr

08001374 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	460b      	mov	r3, r1
 800137e:	807b      	strh	r3, [r7, #2]
 8001380:	4613      	mov	r3, r2
 8001382:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001384:	787b      	ldrb	r3, [r7, #1]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d003      	beq.n	8001392 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800138a:	887a      	ldrh	r2, [r7, #2]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001390:	e002      	b.n	8001398 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001392:	887a      	ldrh	r2, [r7, #2]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001398:	bf00      	nop
 800139a:	370c      	adds	r7, #12
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
 80013ac:	460b      	mov	r3, r1
 80013ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695a      	ldr	r2, [r3, #20]
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	4013      	ands	r3, r2
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013bc:	887a      	ldrh	r2, [r7, #2]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80013c2:	e002      	b.n	80013ca <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013c4:	887a      	ldrh	r2, [r7, #2]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	619a      	str	r2, [r3, #24]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80013e2:	4b08      	ldr	r3, [pc, #32]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013e4:	695a      	ldr	r2, [r3, #20]
 80013e6:	88fb      	ldrh	r3, [r7, #6]
 80013e8:	4013      	ands	r3, r2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d006      	beq.n	80013fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80013ee:	4a05      	ldr	r2, [pc, #20]	; (8001404 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80013f0:	88fb      	ldrh	r3, [r7, #6]
 80013f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80013f4:	88fb      	ldrh	r3, [r7, #6]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8b0 	bl	800055c <HAL_GPIO_EXTI_Callback>
  }
}
 80013fc:	bf00      	nop
 80013fe:	3708      	adds	r7, #8
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40010400 	.word	0x40010400

08001408 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800140c:	4b04      	ldr	r3, [pc, #16]	; (8001420 <HAL_PWREx_GetVoltageRange+0x18>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001414:	4618      	mov	r0, r3
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40007000 	.word	0x40007000

08001424 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001424:	b480      	push	{r7}
 8001426:	b085      	sub	sp, #20
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001432:	d130      	bne.n	8001496 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001434:	4b23      	ldr	r3, [pc, #140]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800143c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001440:	d038      	beq.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001442:	4b20      	ldr	r3, [pc, #128]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800144a:	4a1e      	ldr	r2, [pc, #120]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800144c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001450:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001452:	4b1d      	ldr	r3, [pc, #116]	; (80014c8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2232      	movs	r2, #50	; 0x32
 8001458:	fb02 f303 	mul.w	r3, r2, r3
 800145c:	4a1b      	ldr	r2, [pc, #108]	; (80014cc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800145e:	fba2 2303 	umull	r2, r3, r2, r3
 8001462:	0c9b      	lsrs	r3, r3, #18
 8001464:	3301      	adds	r3, #1
 8001466:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001468:	e002      	b.n	8001470 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3b01      	subs	r3, #1
 800146e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001472:	695b      	ldr	r3, [r3, #20]
 8001474:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800147c:	d102      	bne.n	8001484 <HAL_PWREx_ControlVoltageScaling+0x60>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f2      	bne.n	800146a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001486:	695b      	ldr	r3, [r3, #20]
 8001488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800148c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001490:	d110      	bne.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001492:	2303      	movs	r3, #3
 8001494:	e00f      	b.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800149e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014a2:	d007      	beq.n	80014b4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014a4:	4b07      	ldr	r3, [pc, #28]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ac:	4a05      	ldr	r2, [pc, #20]	; (80014c4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014b2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014b4:	2300      	movs	r3, #0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3714      	adds	r7, #20
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr
 80014c2:	bf00      	nop
 80014c4:	40007000 	.word	0x40007000
 80014c8:	20000000 	.word	0x20000000
 80014cc:	431bde83 	.word	0x431bde83

080014d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d101      	bne.n	80014e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014de:	2301      	movs	r3, #1
 80014e0:	e3d4      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e2:	4ba1      	ldr	r3, [pc, #644]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	f003 030c 	and.w	r3, r3, #12
 80014ea:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014ec:	4b9e      	ldr	r3, [pc, #632]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80014ee:	68db      	ldr	r3, [r3, #12]
 80014f0:	f003 0303 	and.w	r3, r3, #3
 80014f4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0310 	and.w	r3, r3, #16
 80014fe:	2b00      	cmp	r3, #0
 8001500:	f000 80e4 	beq.w	80016cc <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <HAL_RCC_OscConfig+0x4a>
 800150a:	69bb      	ldr	r3, [r7, #24]
 800150c:	2b0c      	cmp	r3, #12
 800150e:	f040 808b 	bne.w	8001628 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	2b01      	cmp	r3, #1
 8001516:	f040 8087 	bne.w	8001628 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800151a:	4b93      	ldr	r3, [pc, #588]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0302 	and.w	r3, r3, #2
 8001522:	2b00      	cmp	r3, #0
 8001524:	d005      	beq.n	8001532 <HAL_RCC_OscConfig+0x62>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	699b      	ldr	r3, [r3, #24]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e3ac      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a1a      	ldr	r2, [r3, #32]
 8001536:	4b8c      	ldr	r3, [pc, #560]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d004      	beq.n	800154c <HAL_RCC_OscConfig+0x7c>
 8001542:	4b89      	ldr	r3, [pc, #548]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800154a:	e005      	b.n	8001558 <HAL_RCC_OscConfig+0x88>
 800154c:	4b86      	ldr	r3, [pc, #536]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800154e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001552:	091b      	lsrs	r3, r3, #4
 8001554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001558:	4293      	cmp	r3, r2
 800155a:	d223      	bcs.n	80015a4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a1b      	ldr	r3, [r3, #32]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fd3f 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 8001566:	4603      	mov	r3, r0
 8001568:	2b00      	cmp	r3, #0
 800156a:	d001      	beq.n	8001570 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e38d      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001570:	4b7d      	ldr	r3, [pc, #500]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a7c      	ldr	r2, [pc, #496]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001576:	f043 0308 	orr.w	r3, r3, #8
 800157a:	6013      	str	r3, [r2, #0]
 800157c:	4b7a      	ldr	r3, [pc, #488]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	6a1b      	ldr	r3, [r3, #32]
 8001588:	4977      	ldr	r1, [pc, #476]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800158e:	4b76      	ldr	r3, [pc, #472]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	021b      	lsls	r3, r3, #8
 800159c:	4972      	ldr	r1, [pc, #456]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800159e:	4313      	orrs	r3, r2
 80015a0:	604b      	str	r3, [r1, #4]
 80015a2:	e025      	b.n	80015f0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015a4:	4b70      	ldr	r3, [pc, #448]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a6f      	ldr	r2, [pc, #444]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80015aa:	f043 0308 	orr.w	r3, r3, #8
 80015ae:	6013      	str	r3, [r2, #0]
 80015b0:	4b6d      	ldr	r3, [pc, #436]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a1b      	ldr	r3, [r3, #32]
 80015bc:	496a      	ldr	r1, [pc, #424]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c2:	4b69      	ldr	r3, [pc, #420]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	69db      	ldr	r3, [r3, #28]
 80015ce:	021b      	lsls	r3, r3, #8
 80015d0:	4965      	ldr	r1, [pc, #404]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015d6:	69bb      	ldr	r3, [r7, #24]
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d109      	bne.n	80015f0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6a1b      	ldr	r3, [r3, #32]
 80015e0:	4618      	mov	r0, r3
 80015e2:	f000 fcff 	bl	8001fe4 <RCC_SetFlashLatencyFromMSIRange>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80015ec:	2301      	movs	r3, #1
 80015ee:	e34d      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80015f0:	f000 fc36 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 80015f4:	4601      	mov	r1, r0
 80015f6:	4b5c      	ldr	r3, [pc, #368]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	091b      	lsrs	r3, r3, #4
 80015fc:	f003 030f 	and.w	r3, r3, #15
 8001600:	4a5a      	ldr	r2, [pc, #360]	; (800176c <HAL_RCC_OscConfig+0x29c>)
 8001602:	5cd3      	ldrb	r3, [r2, r3]
 8001604:	f003 031f 	and.w	r3, r3, #31
 8001608:	fa21 f303 	lsr.w	r3, r1, r3
 800160c:	4a58      	ldr	r2, [pc, #352]	; (8001770 <HAL_RCC_OscConfig+0x2a0>)
 800160e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001610:	4b58      	ldr	r3, [pc, #352]	; (8001774 <HAL_RCC_OscConfig+0x2a4>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff fb83 	bl	8000d20 <HAL_InitTick>
 800161a:	4603      	mov	r3, r0
 800161c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800161e:	7bfb      	ldrb	r3, [r7, #15]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d052      	beq.n	80016ca <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001624:	7bfb      	ldrb	r3, [r7, #15]
 8001626:	e331      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	699b      	ldr	r3, [r3, #24]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d032      	beq.n	8001696 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001630:	4b4d      	ldr	r3, [pc, #308]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a4c      	ldr	r2, [pc, #304]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001636:	f043 0301 	orr.w	r3, r3, #1
 800163a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800163c:	f7ff fbbc 	bl	8000db8 <HAL_GetTick>
 8001640:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001642:	e008      	b.n	8001656 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001644:	f7ff fbb8 	bl	8000db8 <HAL_GetTick>
 8001648:	4602      	mov	r2, r0
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	1ad3      	subs	r3, r2, r3
 800164e:	2b02      	cmp	r3, #2
 8001650:	d901      	bls.n	8001656 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001652:	2303      	movs	r3, #3
 8001654:	e31a      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001656:	4b44      	ldr	r3, [pc, #272]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f003 0302 	and.w	r3, r3, #2
 800165e:	2b00      	cmp	r3, #0
 8001660:	d0f0      	beq.n	8001644 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001662:	4b41      	ldr	r3, [pc, #260]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	4a40      	ldr	r2, [pc, #256]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001668:	f043 0308 	orr.w	r3, r3, #8
 800166c:	6013      	str	r3, [r2, #0]
 800166e:	4b3e      	ldr	r3, [pc, #248]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6a1b      	ldr	r3, [r3, #32]
 800167a:	493b      	ldr	r1, [pc, #236]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800167c:	4313      	orrs	r3, r2
 800167e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001680:	4b39      	ldr	r3, [pc, #228]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	69db      	ldr	r3, [r3, #28]
 800168c:	021b      	lsls	r3, r3, #8
 800168e:	4936      	ldr	r1, [pc, #216]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001690:	4313      	orrs	r3, r2
 8001692:	604b      	str	r3, [r1, #4]
 8001694:	e01a      	b.n	80016cc <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001696:	4b34      	ldr	r3, [pc, #208]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	4a33      	ldr	r2, [pc, #204]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800169c:	f023 0301 	bic.w	r3, r3, #1
 80016a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016a2:	f7ff fb89 	bl	8000db8 <HAL_GetTick>
 80016a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016a8:	e008      	b.n	80016bc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016aa:	f7ff fb85 	bl	8000db8 <HAL_GetTick>
 80016ae:	4602      	mov	r2, r0
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	1ad3      	subs	r3, r2, r3
 80016b4:	2b02      	cmp	r3, #2
 80016b6:	d901      	bls.n	80016bc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016b8:	2303      	movs	r3, #3
 80016ba:	e2e7      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016bc:	4b2a      	ldr	r3, [pc, #168]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f003 0302 	and.w	r3, r3, #2
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d1f0      	bne.n	80016aa <HAL_RCC_OscConfig+0x1da>
 80016c8:	e000      	b.n	80016cc <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ca:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d074      	beq.n	80017c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016d8:	69bb      	ldr	r3, [r7, #24]
 80016da:	2b08      	cmp	r3, #8
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x21a>
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	2b0c      	cmp	r3, #12
 80016e2:	d10e      	bne.n	8001702 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	2b03      	cmp	r3, #3
 80016e8:	d10b      	bne.n	8001702 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ea:	4b1f      	ldr	r3, [pc, #124]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d064      	beq.n	80017c0 <HAL_RCC_OscConfig+0x2f0>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d160      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80016fe:	2301      	movs	r3, #1
 8001700:	e2c4      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800170a:	d106      	bne.n	800171a <HAL_RCC_OscConfig+0x24a>
 800170c:	4b16      	ldr	r3, [pc, #88]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a15      	ldr	r2, [pc, #84]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001712:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001716:	6013      	str	r3, [r2, #0]
 8001718:	e01d      	b.n	8001756 <HAL_RCC_OscConfig+0x286>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x26e>
 8001724:	4b10      	ldr	r3, [pc, #64]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a0f      	ldr	r2, [pc, #60]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800172a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800172e:	6013      	str	r3, [r2, #0]
 8001730:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a0c      	ldr	r2, [pc, #48]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001736:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173a:	6013      	str	r3, [r2, #0]
 800173c:	e00b      	b.n	8001756 <HAL_RCC_OscConfig+0x286>
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a09      	ldr	r2, [pc, #36]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001744:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	4b07      	ldr	r3, [pc, #28]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a06      	ldr	r2, [pc, #24]	; (8001768 <HAL_RCC_OscConfig+0x298>)
 8001750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001754:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d01c      	beq.n	8001798 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800175e:	f7ff fb2b 	bl	8000db8 <HAL_GetTick>
 8001762:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001764:	e011      	b.n	800178a <HAL_RCC_OscConfig+0x2ba>
 8001766:	bf00      	nop
 8001768:	40021000 	.word	0x40021000
 800176c:	08003e8c 	.word	0x08003e8c
 8001770:	20000000 	.word	0x20000000
 8001774:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001778:	f7ff fb1e 	bl	8000db8 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	693b      	ldr	r3, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	2b64      	cmp	r3, #100	; 0x64
 8001784:	d901      	bls.n	800178a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001786:	2303      	movs	r3, #3
 8001788:	e280      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800178a:	4baf      	ldr	r3, [pc, #700]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f0      	beq.n	8001778 <HAL_RCC_OscConfig+0x2a8>
 8001796:	e014      	b.n	80017c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001798:	f7ff fb0e 	bl	8000db8 <HAL_GetTick>
 800179c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800179e:	e008      	b.n	80017b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017a0:	f7ff fb0a 	bl	8000db8 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	2b64      	cmp	r3, #100	; 0x64
 80017ac:	d901      	bls.n	80017b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017ae:	2303      	movs	r3, #3
 80017b0:	e26c      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017b2:	4ba5      	ldr	r3, [pc, #660]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d1f0      	bne.n	80017a0 <HAL_RCC_OscConfig+0x2d0>
 80017be:	e000      	b.n	80017c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d060      	beq.n	8001890 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ce:	69bb      	ldr	r3, [r7, #24]
 80017d0:	2b04      	cmp	r3, #4
 80017d2:	d005      	beq.n	80017e0 <HAL_RCC_OscConfig+0x310>
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	2b0c      	cmp	r3, #12
 80017d8:	d119      	bne.n	800180e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d116      	bne.n	800180e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e0:	4b99      	ldr	r3, [pc, #612]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d005      	beq.n	80017f8 <HAL_RCC_OscConfig+0x328>
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d101      	bne.n	80017f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80017f4:	2301      	movs	r3, #1
 80017f6:	e249      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	4b93      	ldr	r3, [pc, #588]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	691b      	ldr	r3, [r3, #16]
 8001804:	061b      	lsls	r3, r3, #24
 8001806:	4990      	ldr	r1, [pc, #576]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001808:	4313      	orrs	r3, r2
 800180a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800180c:	e040      	b.n	8001890 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	68db      	ldr	r3, [r3, #12]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d023      	beq.n	800185e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001816:	4b8c      	ldr	r3, [pc, #560]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a8b      	ldr	r2, [pc, #556]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 800181c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001820:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001822:	f7ff fac9 	bl	8000db8 <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800182a:	f7ff fac5 	bl	8000db8 <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e227      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800183c:	4b82      	ldr	r3, [pc, #520]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001844:	2b00      	cmp	r3, #0
 8001846:	d0f0      	beq.n	800182a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001848:	4b7f      	ldr	r3, [pc, #508]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
 8001854:	061b      	lsls	r3, r3, #24
 8001856:	497c      	ldr	r1, [pc, #496]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001858:	4313      	orrs	r3, r2
 800185a:	604b      	str	r3, [r1, #4]
 800185c:	e018      	b.n	8001890 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800185e:	4b7a      	ldr	r3, [pc, #488]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a79      	ldr	r2, [pc, #484]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001864:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800186a:	f7ff faa5 	bl	8000db8 <HAL_GetTick>
 800186e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001872:	f7ff faa1 	bl	8000db8 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e203      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001884:	4b70      	ldr	r3, [pc, #448]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1f0      	bne.n	8001872 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0308 	and.w	r3, r3, #8
 8001898:	2b00      	cmp	r3, #0
 800189a:	d03c      	beq.n	8001916 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	695b      	ldr	r3, [r3, #20]
 80018a0:	2b00      	cmp	r3, #0
 80018a2:	d01c      	beq.n	80018de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018a4:	4b68      	ldr	r3, [pc, #416]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018aa:	4a67      	ldr	r2, [pc, #412]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b4:	f7ff fa80 	bl	8000db8 <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018bc:	f7ff fa7c 	bl	8000db8 <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b02      	cmp	r3, #2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e1de      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ce:	4b5e      	ldr	r3, [pc, #376]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80018d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018d4:	f003 0302 	and.w	r3, r3, #2
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d0ef      	beq.n	80018bc <HAL_RCC_OscConfig+0x3ec>
 80018dc:	e01b      	b.n	8001916 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018de:	4b5a      	ldr	r3, [pc, #360]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80018e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e4:	4a58      	ldr	r2, [pc, #352]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80018e6:	f023 0301 	bic.w	r3, r3, #1
 80018ea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018ee:	f7ff fa63 	bl	8000db8 <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f6:	f7ff fa5f 	bl	8000db8 <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e1c1      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001908:	4b4f      	ldr	r3, [pc, #316]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190e:	f003 0302 	and.w	r3, r3, #2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ef      	bne.n	80018f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80a6 	beq.w	8001a70 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001924:	2300      	movs	r3, #0
 8001926:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001928:	4b47      	ldr	r3, [pc, #284]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 800192a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10d      	bne.n	8001950 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	4b44      	ldr	r3, [pc, #272]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001938:	4a43      	ldr	r2, [pc, #268]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 800193a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193e:	6593      	str	r3, [r2, #88]	; 0x58
 8001940:	4b41      	ldr	r3, [pc, #260]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001942:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001944:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001948:	60bb      	str	r3, [r7, #8]
 800194a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800194c:	2301      	movs	r3, #1
 800194e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001950:	4b3e      	ldr	r3, [pc, #248]	; (8001a4c <HAL_RCC_OscConfig+0x57c>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001958:	2b00      	cmp	r3, #0
 800195a:	d118      	bne.n	800198e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800195c:	4b3b      	ldr	r3, [pc, #236]	; (8001a4c <HAL_RCC_OscConfig+0x57c>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a3a      	ldr	r2, [pc, #232]	; (8001a4c <HAL_RCC_OscConfig+0x57c>)
 8001962:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001966:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001968:	f7ff fa26 	bl	8000db8 <HAL_GetTick>
 800196c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196e:	e008      	b.n	8001982 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001970:	f7ff fa22 	bl	8000db8 <HAL_GetTick>
 8001974:	4602      	mov	r2, r0
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	1ad3      	subs	r3, r2, r3
 800197a:	2b02      	cmp	r3, #2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e184      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001982:	4b32      	ldr	r3, [pc, #200]	; (8001a4c <HAL_RCC_OscConfig+0x57c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800198a:	2b00      	cmp	r3, #0
 800198c:	d0f0      	beq.n	8001970 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d108      	bne.n	80019a8 <HAL_RCC_OscConfig+0x4d8>
 8001996:	4b2c      	ldr	r3, [pc, #176]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	4a2a      	ldr	r2, [pc, #168]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 800199e:	f043 0301 	orr.w	r3, r3, #1
 80019a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019a6:	e024      	b.n	80019f2 <HAL_RCC_OscConfig+0x522>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d110      	bne.n	80019d2 <HAL_RCC_OscConfig+0x502>
 80019b0:	4b25      	ldr	r3, [pc, #148]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80019b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b6:	4a24      	ldr	r2, [pc, #144]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80019b8:	f043 0304 	orr.w	r3, r3, #4
 80019bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c0:	4b21      	ldr	r3, [pc, #132]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	4a20      	ldr	r2, [pc, #128]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d0:	e00f      	b.n	80019f2 <HAL_RCC_OscConfig+0x522>
 80019d2:	4b1d      	ldr	r3, [pc, #116]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d8:	4a1b      	ldr	r2, [pc, #108]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e2:	4b19      	ldr	r3, [pc, #100]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80019e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e8:	4a17      	ldr	r2, [pc, #92]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d016      	beq.n	8001a28 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f9dd 	bl	8000db8 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a00:	e00a      	b.n	8001a18 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff f9d9 	bl	8000db8 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d901      	bls.n	8001a18 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e139      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a18:	4b0b      	ldr	r3, [pc, #44]	; (8001a48 <HAL_RCC_OscConfig+0x578>)
 8001a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d0ed      	beq.n	8001a02 <HAL_RCC_OscConfig+0x532>
 8001a26:	e01a      	b.n	8001a5e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a28:	f7ff f9c6 	bl	8000db8 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a2e:	e00f      	b.n	8001a50 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a30:	f7ff f9c2 	bl	8000db8 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d906      	bls.n	8001a50 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a42:	2303      	movs	r3, #3
 8001a44:	e122      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
 8001a46:	bf00      	nop
 8001a48:	40021000 	.word	0x40021000
 8001a4c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a50:	4b90      	ldr	r3, [pc, #576]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	f003 0302 	and.w	r3, r3, #2
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1e8      	bne.n	8001a30 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a5e:	7ffb      	ldrb	r3, [r7, #31]
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d105      	bne.n	8001a70 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a64:	4b8b      	ldr	r3, [pc, #556]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	4a8a      	ldr	r2, [pc, #552]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	f000 8108 	beq.w	8001c8a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	f040 80d0 	bne.w	8001c24 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001a84:	4b83      	ldr	r3, [pc, #524]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001a86:	68db      	ldr	r3, [r3, #12]
 8001a88:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	f003 0203 	and.w	r2, r3, #3
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a94:	429a      	cmp	r2, r3
 8001a96:	d130      	bne.n	8001afa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	3b01      	subs	r3, #1
 8001aa4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aa6:	429a      	cmp	r2, r3
 8001aa8:	d127      	bne.n	8001afa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ab4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d11f      	bne.n	8001afa <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ac0:	687a      	ldr	r2, [r7, #4]
 8001ac2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ac4:	2a07      	cmp	r2, #7
 8001ac6:	bf14      	ite	ne
 8001ac8:	2201      	movne	r2, #1
 8001aca:	2200      	moveq	r2, #0
 8001acc:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d113      	bne.n	8001afa <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ad2:	697b      	ldr	r3, [r7, #20]
 8001ad4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001adc:	085b      	lsrs	r3, r3, #1
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d109      	bne.n	8001afa <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af0:	085b      	lsrs	r3, r3, #1
 8001af2:	3b01      	subs	r3, #1
 8001af4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d06e      	beq.n	8001bd8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	2b0c      	cmp	r3, #12
 8001afe:	d069      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b00:	4b64      	ldr	r3, [pc, #400]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d105      	bne.n	8001b18 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b0c:	4b61      	ldr	r3, [pc, #388]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b7      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b1c:	4b5d      	ldr	r3, [pc, #372]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a5c      	ldr	r2, [pc, #368]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b26:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b28:	f7ff f946 	bl	8000db8 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2e:	e008      	b.n	8001b42 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b30:	f7ff f942 	bl	8000db8 <HAL_GetTick>
 8001b34:	4602      	mov	r2, r0
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	2b02      	cmp	r3, #2
 8001b3c:	d901      	bls.n	8001b42 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e0a4      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b42:	4b54      	ldr	r3, [pc, #336]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d1f0      	bne.n	8001b30 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b4e:	4b51      	ldr	r3, [pc, #324]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	4b51      	ldr	r3, [pc, #324]	; (8001c98 <HAL_RCC_OscConfig+0x7c8>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	687a      	ldr	r2, [r7, #4]
 8001b58:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b5e:	3a01      	subs	r2, #1
 8001b60:	0112      	lsls	r2, r2, #4
 8001b62:	4311      	orrs	r1, r2
 8001b64:	687a      	ldr	r2, [r7, #4]
 8001b66:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b68:	0212      	lsls	r2, r2, #8
 8001b6a:	4311      	orrs	r1, r2
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b70:	0852      	lsrs	r2, r2, #1
 8001b72:	3a01      	subs	r2, #1
 8001b74:	0552      	lsls	r2, r2, #21
 8001b76:	4311      	orrs	r1, r2
 8001b78:	687a      	ldr	r2, [r7, #4]
 8001b7a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b7c:	0852      	lsrs	r2, r2, #1
 8001b7e:	3a01      	subs	r2, #1
 8001b80:	0652      	lsls	r2, r2, #25
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b88:	0912      	lsrs	r2, r2, #4
 8001b8a:	0452      	lsls	r2, r2, #17
 8001b8c:	430a      	orrs	r2, r1
 8001b8e:	4941      	ldr	r1, [pc, #260]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b90:	4313      	orrs	r3, r2
 8001b92:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001b94:	4b3f      	ldr	r3, [pc, #252]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a3e      	ldr	r2, [pc, #248]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001b9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b9e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ba0:	4b3c      	ldr	r3, [pc, #240]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	4a3b      	ldr	r2, [pc, #236]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001ba6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001baa:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bac:	f7ff f904 	bl	8000db8 <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f900 	bl	8000db8 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e062      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bc6:	4b33      	ldr	r3, [pc, #204]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bd2:	e05a      	b.n	8001c8a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e059      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd8:	4b2e      	ldr	r3, [pc, #184]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d152      	bne.n	8001c8a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001be4:	4b2b      	ldr	r3, [pc, #172]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a2a      	ldr	r2, [pc, #168]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bee:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bf0:	4b28      	ldr	r3, [pc, #160]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	4a27      	ldr	r2, [pc, #156]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001bf6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bfa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001bfc:	f7ff f8dc 	bl	8000db8 <HAL_GetTick>
 8001c00:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c02:	e008      	b.n	8001c16 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c04:	f7ff f8d8 	bl	8000db8 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d901      	bls.n	8001c16 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	e03a      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d0f0      	beq.n	8001c04 <HAL_RCC_OscConfig+0x734>
 8001c22:	e032      	b.n	8001c8a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c24:	69bb      	ldr	r3, [r7, #24]
 8001c26:	2b0c      	cmp	r3, #12
 8001c28:	d02d      	beq.n	8001c86 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b1a      	ldr	r3, [pc, #104]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a19      	ldr	r2, [pc, #100]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c30:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c34:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c36:	4b17      	ldr	r3, [pc, #92]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d105      	bne.n	8001c4e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c42:	4b14      	ldr	r3, [pc, #80]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	4a13      	ldr	r2, [pc, #76]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c48:	f023 0303 	bic.w	r3, r3, #3
 8001c4c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	4a10      	ldr	r2, [pc, #64]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c54:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c5c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c5e:	f7ff f8ab 	bl	8000db8 <HAL_GetTick>
 8001c62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c64:	e008      	b.n	8001c78 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c66:	f7ff f8a7 	bl	8000db8 <HAL_GetTick>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	693b      	ldr	r3, [r7, #16]
 8001c6e:	1ad3      	subs	r3, r2, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d901      	bls.n	8001c78 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001c74:	2303      	movs	r3, #3
 8001c76:	e009      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c78:	4b06      	ldr	r3, [pc, #24]	; (8001c94 <HAL_RCC_OscConfig+0x7c4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1f0      	bne.n	8001c66 <HAL_RCC_OscConfig+0x796>
 8001c84:	e001      	b.n	8001c8a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3720      	adds	r7, #32
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	40021000 	.word	0x40021000
 8001c98:	f99d808c 	.word	0xf99d808c

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0c8      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b66      	ldr	r3, [pc, #408]	; (8001e4c <HAL_RCC_ClockConfig+0x1b0>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d910      	bls.n	8001ce0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b63      	ldr	r3, [pc, #396]	; (8001e4c <HAL_RCC_ClockConfig+0x1b0>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f023 0207 	bic.w	r2, r3, #7
 8001cc6:	4961      	ldr	r1, [pc, #388]	; (8001e4c <HAL_RCC_ClockConfig+0x1b0>)
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cce:	4b5f      	ldr	r3, [pc, #380]	; (8001e4c <HAL_RCC_ClockConfig+0x1b0>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	683a      	ldr	r2, [r7, #0]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d001      	beq.n	8001ce0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cdc:	2301      	movs	r3, #1
 8001cde:	e0b0      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f003 0301 	and.w	r3, r3, #1
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d04c      	beq.n	8001d86 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d107      	bne.n	8001d04 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf4:	4b56      	ldr	r3, [pc, #344]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d121      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e09e      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	2b02      	cmp	r3, #2
 8001d0a:	d107      	bne.n	8001d1c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d0c:	4b50      	ldr	r3, [pc, #320]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d115      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e092      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d107      	bne.n	8001d34 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d24:	4b4a      	ldr	r3, [pc, #296]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f003 0302 	and.w	r3, r3, #2
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d109      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e086      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d34:	4b46      	ldr	r3, [pc, #280]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e07e      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d44:	4b42      	ldr	r3, [pc, #264]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f023 0203 	bic.w	r2, r3, #3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	493f      	ldr	r1, [pc, #252]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d56:	f7ff f82f 	bl	8000db8 <HAL_GetTick>
 8001d5a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5c:	e00a      	b.n	8001d74 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d5e:	f7ff f82b 	bl	8000db8 <HAL_GetTick>
 8001d62:	4602      	mov	r2, r0
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	1ad3      	subs	r3, r2, r3
 8001d68:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d6c:	4293      	cmp	r3, r2
 8001d6e:	d901      	bls.n	8001d74 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d70:	2303      	movs	r3, #3
 8001d72:	e066      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d74:	4b36      	ldr	r3, [pc, #216]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 020c 	and.w	r2, r3, #12
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d1eb      	bne.n	8001d5e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0302 	and.w	r3, r3, #2
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d008      	beq.n	8001da4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d92:	4b2f      	ldr	r3, [pc, #188]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	492c      	ldr	r1, [pc, #176]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001da0:	4313      	orrs	r3, r2
 8001da2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <HAL_RCC_ClockConfig+0x1b0>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0307 	and.w	r3, r3, #7
 8001dac:	683a      	ldr	r2, [r7, #0]
 8001dae:	429a      	cmp	r2, r3
 8001db0:	d210      	bcs.n	8001dd4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db2:	4b26      	ldr	r3, [pc, #152]	; (8001e4c <HAL_RCC_ClockConfig+0x1b0>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f023 0207 	bic.w	r2, r3, #7
 8001dba:	4924      	ldr	r1, [pc, #144]	; (8001e4c <HAL_RCC_ClockConfig+0x1b0>)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_RCC_ClockConfig+0x1b0>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	683a      	ldr	r2, [r7, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d001      	beq.n	8001dd4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e036      	b.n	8001e42 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0304 	and.w	r3, r3, #4
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d008      	beq.n	8001df2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001de0:	4b1b      	ldr	r3, [pc, #108]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001de2:	689b      	ldr	r3, [r3, #8]
 8001de4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	4918      	ldr	r1, [pc, #96]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001dee:	4313      	orrs	r3, r2
 8001df0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d009      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dfe:	4b14      	ldr	r3, [pc, #80]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	00db      	lsls	r3, r3, #3
 8001e0c:	4910      	ldr	r1, [pc, #64]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e12:	f000 f825 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8001e16:	4601      	mov	r1, r0
 8001e18:	4b0d      	ldr	r3, [pc, #52]	; (8001e50 <HAL_RCC_ClockConfig+0x1b4>)
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	4a0c      	ldr	r2, [pc, #48]	; (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001e24:	5cd3      	ldrb	r3, [r2, r3]
 8001e26:	f003 031f 	and.w	r3, r3, #31
 8001e2a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e2e:	4a0a      	ldr	r2, [pc, #40]	; (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e32:	4b0a      	ldr	r3, [pc, #40]	; (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7fe ff72 	bl	8000d20 <HAL_InitTick>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e40:	7afb      	ldrb	r3, [r7, #11]
}
 8001e42:	4618      	mov	r0, r3
 8001e44:	3710      	adds	r7, #16
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	40022000 	.word	0x40022000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	08003e8c 	.word	0x08003e8c
 8001e58:	20000000 	.word	0x20000000
 8001e5c:	20000004 	.word	0x20000004

08001e60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	; 0x24
 8001e64:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e66:	2300      	movs	r3, #0
 8001e68:	61fb      	str	r3, [r7, #28]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e6e:	4b3d      	ldr	r3, [pc, #244]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e70:	689b      	ldr	r3, [r3, #8]
 8001e72:	f003 030c 	and.w	r3, r3, #12
 8001e76:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e78:	4b3a      	ldr	r3, [pc, #232]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	f003 0303 	and.w	r3, r3, #3
 8001e80:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e82:	693b      	ldr	r3, [r7, #16]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <HAL_RCC_GetSysClockFreq+0x34>
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d121      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d11e      	bne.n	8001ed2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e94:	4b33      	ldr	r3, [pc, #204]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f003 0308 	and.w	r3, r3, #8
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d107      	bne.n	8001eb0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ea0:	4b30      	ldr	r3, [pc, #192]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ea2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea6:	0a1b      	lsrs	r3, r3, #8
 8001ea8:	f003 030f 	and.w	r3, r3, #15
 8001eac:	61fb      	str	r3, [r7, #28]
 8001eae:	e005      	b.n	8001ebc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	091b      	lsrs	r3, r3, #4
 8001eb6:	f003 030f 	and.w	r3, r3, #15
 8001eba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ebc:	4a2a      	ldr	r2, [pc, #168]	; (8001f68 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ec4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d10d      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ed0:	e00a      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	2b04      	cmp	r3, #4
 8001ed6:	d102      	bne.n	8001ede <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ed8:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	e004      	b.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	2b08      	cmp	r3, #8
 8001ee2:	d101      	bne.n	8001ee8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ee4:	4b22      	ldr	r3, [pc, #136]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	2b0c      	cmp	r3, #12
 8001eec:	d133      	bne.n	8001f56 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eee:	4b1d      	ldr	r3, [pc, #116]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	2b02      	cmp	r3, #2
 8001efc:	d002      	beq.n	8001f04 <HAL_RCC_GetSysClockFreq+0xa4>
 8001efe:	2b03      	cmp	r3, #3
 8001f00:	d003      	beq.n	8001f0a <HAL_RCC_GetSysClockFreq+0xaa>
 8001f02:	e005      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f06:	617b      	str	r3, [r7, #20]
      break;
 8001f08:	e005      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f0a:	4b19      	ldr	r3, [pc, #100]	; (8001f70 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f0c:	617b      	str	r3, [r7, #20]
      break;
 8001f0e:	e002      	b.n	8001f16 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	617b      	str	r3, [r7, #20]
      break;
 8001f14:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 0307 	and.w	r3, r3, #7
 8001f20:	3301      	adds	r3, #1
 8001f22:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	fb02 f203 	mul.w	r2, r2, r3
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0e5b      	lsrs	r3, r3, #25
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	3301      	adds	r3, #1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f4c:	697a      	ldr	r2, [r7, #20]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f56:	69bb      	ldr	r3, [r7, #24]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3724      	adds	r7, #36	; 0x24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000
 8001f68:	08003ea4 	.word	0x08003ea4
 8001f6c:	00f42400 	.word	0x00f42400
 8001f70:	007a1200 	.word	0x007a1200

08001f74 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f74:	b480      	push	{r7}
 8001f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f78:	4b03      	ldr	r3, [pc, #12]	; (8001f88 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
 8001f86:	bf00      	nop
 8001f88:	20000000 	.word	0x20000000

08001f8c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001f90:	f7ff fff0 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001f94:	4601      	mov	r1, r0
 8001f96:	4b06      	ldr	r3, [pc, #24]	; (8001fb0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	0a1b      	lsrs	r3, r3, #8
 8001f9c:	f003 0307 	and.w	r3, r3, #7
 8001fa0:	4a04      	ldr	r2, [pc, #16]	; (8001fb4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fa2:	5cd3      	ldrb	r3, [r2, r3]
 8001fa4:	f003 031f 	and.w	r3, r3, #31
 8001fa8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	08003e9c 	.word	0x08003e9c

08001fb8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fbc:	f7ff ffda 	bl	8001f74 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4601      	mov	r1, r0
 8001fc2:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fc4:	689b      	ldr	r3, [r3, #8]
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fce:	5cd3      	ldrb	r3, [r2, r3]
 8001fd0:	f003 031f 	and.w	r3, r3, #31
 8001fd4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40021000 	.word	0x40021000
 8001fe0:	08003e9c 	.word	0x08003e9c

08001fe4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001fec:	2300      	movs	r3, #0
 8001fee:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ff0:	4b2a      	ldr	r3, [pc, #168]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ff2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ff4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d003      	beq.n	8002004 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ffc:	f7ff fa04 	bl	8001408 <HAL_PWREx_GetVoltageRange>
 8002000:	6178      	str	r0, [r7, #20]
 8002002:	e014      	b.n	800202e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002004:	4b25      	ldr	r3, [pc, #148]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002008:	4a24      	ldr	r2, [pc, #144]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800200a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200e:	6593      	str	r3, [r2, #88]	; 0x58
 8002010:	4b22      	ldr	r3, [pc, #136]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	60fb      	str	r3, [r7, #12]
 800201a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7ff f9f4 	bl	8001408 <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002022:	4b1e      	ldr	r3, [pc, #120]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002024:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002026:	4a1d      	ldr	r2, [pc, #116]	; (800209c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002028:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800202c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002034:	d10b      	bne.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	2b80      	cmp	r3, #128	; 0x80
 800203a:	d919      	bls.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2ba0      	cmp	r3, #160	; 0xa0
 8002040:	d902      	bls.n	8002048 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002042:	2302      	movs	r3, #2
 8002044:	613b      	str	r3, [r7, #16]
 8002046:	e013      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002048:	2301      	movs	r3, #1
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	e010      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b80      	cmp	r3, #128	; 0x80
 8002052:	d902      	bls.n	800205a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002054:	2303      	movs	r3, #3
 8002056:	613b      	str	r3, [r7, #16]
 8002058:	e00a      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	2b80      	cmp	r3, #128	; 0x80
 800205e:	d102      	bne.n	8002066 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002060:	2302      	movs	r3, #2
 8002062:	613b      	str	r3, [r7, #16]
 8002064:	e004      	b.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2b70      	cmp	r3, #112	; 0x70
 800206a:	d101      	bne.n	8002070 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002070:	4b0b      	ldr	r3, [pc, #44]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 0207 	bic.w	r2, r3, #7
 8002078:	4909      	ldr	r1, [pc, #36]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	4313      	orrs	r3, r2
 800207e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002080:	4b07      	ldr	r3, [pc, #28]	; (80020a0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f003 0307 	and.w	r3, r3, #7
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	429a      	cmp	r2, r3
 800208c:	d001      	beq.n	8002092 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e000      	b.n	8002094 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002092:	2300      	movs	r3, #0
}
 8002094:	4618      	mov	r0, r3
 8002096:	3718      	adds	r7, #24
 8002098:	46bd      	mov	sp, r7
 800209a:	bd80      	pop	{r7, pc}
 800209c:	40021000 	.word	0x40021000
 80020a0:	40022000 	.word	0x40022000

080020a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b086      	sub	sp, #24
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020ac:	2300      	movs	r3, #0
 80020ae:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020b0:	2300      	movs	r3, #0
 80020b2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d03f      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020c8:	d01c      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80020ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ce:	d802      	bhi.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d00e      	beq.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80020d4:	e01f      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80020d6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020da:	d003      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80020dc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80020e0:	d01c      	beq.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80020e2:	e018      	b.n	8002116 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80020e4:	4b85      	ldr	r3, [pc, #532]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4a84      	ldr	r2, [pc, #528]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80020ea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ee:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80020f0:	e015      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	3304      	adds	r3, #4
 80020f6:	2100      	movs	r1, #0
 80020f8:	4618      	mov	r0, r3
 80020fa:	f000 fab9 	bl	8002670 <RCCEx_PLLSAI1_Config>
 80020fe:	4603      	mov	r3, r0
 8002100:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002102:	e00c      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3320      	adds	r3, #32
 8002108:	2100      	movs	r1, #0
 800210a:	4618      	mov	r0, r3
 800210c:	f000 fba0 	bl	8002850 <RCCEx_PLLSAI2_Config>
 8002110:	4603      	mov	r3, r0
 8002112:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002114:	e003      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	74fb      	strb	r3, [r7, #19]
      break;
 800211a:	e000      	b.n	800211e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800211c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800211e:	7cfb      	ldrb	r3, [r7, #19]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d10b      	bne.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002124:	4b75      	ldr	r3, [pc, #468]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800212a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002132:	4972      	ldr	r1, [pc, #456]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002134:	4313      	orrs	r3, r2
 8002136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800213a:	e001      	b.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800213c:	7cfb      	ldrb	r3, [r7, #19]
 800213e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d03f      	beq.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002150:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002154:	d01c      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002156:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800215a:	d802      	bhi.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002160:	e01f      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002162:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002166:	d003      	beq.n	8002170 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002168:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800216c:	d01c      	beq.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800216e:	e018      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002170:	4b62      	ldr	r3, [pc, #392]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002172:	68db      	ldr	r3, [r3, #12]
 8002174:	4a61      	ldr	r2, [pc, #388]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002176:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800217a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800217c:	e015      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	3304      	adds	r3, #4
 8002182:	2100      	movs	r1, #0
 8002184:	4618      	mov	r0, r3
 8002186:	f000 fa73 	bl	8002670 <RCCEx_PLLSAI1_Config>
 800218a:	4603      	mov	r3, r0
 800218c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800218e:	e00c      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	3320      	adds	r3, #32
 8002194:	2100      	movs	r1, #0
 8002196:	4618      	mov	r0, r3
 8002198:	f000 fb5a 	bl	8002850 <RCCEx_PLLSAI2_Config>
 800219c:	4603      	mov	r3, r0
 800219e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021a0:	e003      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021a2:	2301      	movs	r3, #1
 80021a4:	74fb      	strb	r3, [r7, #19]
      break;
 80021a6:	e000      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80021a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021aa:	7cfb      	ldrb	r3, [r7, #19]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10b      	bne.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021b0:	4b52      	ldr	r3, [pc, #328]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021be:	494f      	ldr	r1, [pc, #316]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021c0:	4313      	orrs	r3, r2
 80021c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021c6:	e001      	b.n	80021cc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021c8:	7cfb      	ldrb	r3, [r7, #19]
 80021ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80a0 	beq.w	800231a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021da:	2300      	movs	r3, #0
 80021dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021de:	4b47      	ldr	r3, [pc, #284]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d101      	bne.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80021ea:	2301      	movs	r3, #1
 80021ec:	e000      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80021ee:	2300      	movs	r3, #0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d00d      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4b41      	ldr	r3, [pc, #260]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	4a40      	ldr	r2, [pc, #256]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002200:	4b3e      	ldr	r3, [pc, #248]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	60bb      	str	r3, [r7, #8]
 800220a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800220c:	2301      	movs	r3, #1
 800220e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002210:	4b3b      	ldr	r3, [pc, #236]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a3a      	ldr	r2, [pc, #232]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002216:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800221a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800221c:	f7fe fdcc 	bl	8000db8 <HAL_GetTick>
 8002220:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002222:	e009      	b.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002224:	f7fe fdc8 	bl	8000db8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d902      	bls.n	8002238 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	74fb      	strb	r3, [r7, #19]
        break;
 8002236:	e005      	b.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002238:	4b31      	ldr	r3, [pc, #196]	; (8002300 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0ef      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002244:	7cfb      	ldrb	r3, [r7, #19]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d15c      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800224a:	4b2c      	ldr	r3, [pc, #176]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800224c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002250:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002254:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d01f      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	429a      	cmp	r2, r3
 8002266:	d019      	beq.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002268:	4b24      	ldr	r3, [pc, #144]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800226a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800226e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002272:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002274:	4b21      	ldr	r3, [pc, #132]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	4a20      	ldr	r2, [pc, #128]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800227c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002280:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228a:	4a1c      	ldr	r2, [pc, #112]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800228c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002290:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002294:	4a19      	ldr	r2, [pc, #100]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	f003 0301 	and.w	r3, r3, #1
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d016      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a6:	f7fe fd87 	bl	8000db8 <HAL_GetTick>
 80022aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022ac:	e00b      	b.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ae:	f7fe fd83 	bl	8000db8 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022bc:	4293      	cmp	r3, r2
 80022be:	d902      	bls.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	74fb      	strb	r3, [r7, #19]
            break;
 80022c4:	e006      	b.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022c6:	4b0d      	ldr	r3, [pc, #52]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d0ec      	beq.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80022d4:	7cfb      	ldrb	r3, [r7, #19]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10c      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022da:	4b08      	ldr	r3, [pc, #32]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80022ea:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80022f2:	e009      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	74bb      	strb	r3, [r7, #18]
 80022f8:	e006      	b.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80022fa:	bf00      	nop
 80022fc:	40021000 	.word	0x40021000
 8002300:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002304:	7cfb      	ldrb	r3, [r7, #19]
 8002306:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002308:	7c7b      	ldrb	r3, [r7, #17]
 800230a:	2b01      	cmp	r3, #1
 800230c:	d105      	bne.n	800231a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800230e:	4b9e      	ldr	r3, [pc, #632]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002312:	4a9d      	ldr	r2, [pc, #628]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002314:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002318:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 0301 	and.w	r3, r3, #1
 8002322:	2b00      	cmp	r3, #0
 8002324:	d00a      	beq.n	800233c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002326:	4b98      	ldr	r3, [pc, #608]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002328:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800232c:	f023 0203 	bic.w	r2, r3, #3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002334:	4994      	ldr	r1, [pc, #592]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002336:	4313      	orrs	r3, r2
 8002338:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f003 0302 	and.w	r3, r3, #2
 8002344:	2b00      	cmp	r3, #0
 8002346:	d00a      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002348:	4b8f      	ldr	r3, [pc, #572]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800234a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234e:	f023 020c 	bic.w	r2, r3, #12
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002356:	498c      	ldr	r1, [pc, #560]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002358:	4313      	orrs	r3, r2
 800235a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d00a      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800236a:	4b87      	ldr	r3, [pc, #540]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800236c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002370:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002378:	4983      	ldr	r1, [pc, #524]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0308 	and.w	r3, r3, #8
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00a      	beq.n	80023a2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800238c:	4b7e      	ldr	r3, [pc, #504]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002392:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800239a:	497b      	ldr	r1, [pc, #492]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800239c:	4313      	orrs	r3, r2
 800239e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0310 	and.w	r3, r3, #16
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d00a      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ae:	4b76      	ldr	r3, [pc, #472]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023bc:	4972      	ldr	r1, [pc, #456]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0320 	and.w	r3, r3, #32
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d00a      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023d0:	4b6d      	ldr	r3, [pc, #436]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023de:	496a      	ldr	r1, [pc, #424]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023e0:	4313      	orrs	r3, r2
 80023e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00a      	beq.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023f2:	4b65      	ldr	r3, [pc, #404]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002400:	4961      	ldr	r1, [pc, #388]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002410:	2b00      	cmp	r3, #0
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002414:	4b5c      	ldr	r3, [pc, #368]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002422:	4959      	ldr	r1, [pc, #356]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002432:	2b00      	cmp	r3, #0
 8002434:	d00a      	beq.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002436:	4b54      	ldr	r3, [pc, #336]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002444:	4950      	ldr	r1, [pc, #320]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002446:	4313      	orrs	r3, r2
 8002448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002454:	2b00      	cmp	r3, #0
 8002456:	d00a      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002458:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800245a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002466:	4948      	ldr	r1, [pc, #288]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002468:	4313      	orrs	r3, r2
 800246a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800247a:	4b43      	ldr	r3, [pc, #268]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800247c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002480:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002488:	493f      	ldr	r1, [pc, #252]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800248a:	4313      	orrs	r3, r2
 800248c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002498:	2b00      	cmp	r3, #0
 800249a:	d028      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800249c:	4b3a      	ldr	r3, [pc, #232]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800249e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024aa:	4937      	ldr	r1, [pc, #220]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024ba:	d106      	bne.n	80024ca <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024bc:	4b32      	ldr	r3, [pc, #200]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024be:	68db      	ldr	r3, [r3, #12]
 80024c0:	4a31      	ldr	r2, [pc, #196]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024c6:	60d3      	str	r3, [r2, #12]
 80024c8:	e011      	b.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024d2:	d10c      	bne.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	2101      	movs	r1, #1
 80024da:	4618      	mov	r0, r3
 80024dc:	f000 f8c8 	bl	8002670 <RCCEx_PLLSAI1_Config>
 80024e0:	4603      	mov	r3, r0
 80024e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d001      	beq.n	80024ee <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80024ea:	7cfb      	ldrb	r3, [r7, #19]
 80024ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d028      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80024fa:	4b23      	ldr	r3, [pc, #140]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002500:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	491f      	ldr	r1, [pc, #124]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800250a:	4313      	orrs	r3, r2
 800250c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002518:	d106      	bne.n	8002528 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800251a:	4b1b      	ldr	r3, [pc, #108]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	4a1a      	ldr	r2, [pc, #104]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002520:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002524:	60d3      	str	r3, [r2, #12]
 8002526:	e011      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002530:	d10c      	bne.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	3304      	adds	r3, #4
 8002536:	2101      	movs	r1, #1
 8002538:	4618      	mov	r0, r3
 800253a:	f000 f899 	bl	8002670 <RCCEx_PLLSAI1_Config>
 800253e:	4603      	mov	r3, r0
 8002540:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002542:	7cfb      	ldrb	r3, [r7, #19]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d001      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002548:	7cfb      	ldrb	r3, [r7, #19]
 800254a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d02b      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002558:	4b0b      	ldr	r3, [pc, #44]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002566:	4908      	ldr	r1, [pc, #32]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002568:	4313      	orrs	r3, r2
 800256a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002572:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002576:	d109      	bne.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002578:	4b03      	ldr	r3, [pc, #12]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	4a02      	ldr	r2, [pc, #8]	; (8002588 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002582:	60d3      	str	r3, [r2, #12]
 8002584:	e014      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002586:	bf00      	nop
 8002588:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002590:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002594:	d10c      	bne.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	3304      	adds	r3, #4
 800259a:	2101      	movs	r1, #1
 800259c:	4618      	mov	r0, r3
 800259e:	f000 f867 	bl	8002670 <RCCEx_PLLSAI1_Config>
 80025a2:	4603      	mov	r3, r0
 80025a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025a6:	7cfb      	ldrb	r3, [r7, #19]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d001      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80025ac:	7cfb      	ldrb	r3, [r7, #19]
 80025ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d02f      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025bc:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ca:	4928      	ldr	r1, [pc, #160]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025da:	d10d      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	3304      	adds	r3, #4
 80025e0:	2102      	movs	r1, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f000 f844 	bl	8002670 <RCCEx_PLLSAI1_Config>
 80025e8:	4603      	mov	r3, r0
 80025ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ec:	7cfb      	ldrb	r3, [r7, #19]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d014      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80025f2:	7cfb      	ldrb	r3, [r7, #19]
 80025f4:	74bb      	strb	r3, [r7, #18]
 80025f6:	e011      	b.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002600:	d10c      	bne.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	3320      	adds	r3, #32
 8002606:	2102      	movs	r1, #2
 8002608:	4618      	mov	r0, r3
 800260a:	f000 f921 	bl	8002850 <RCCEx_PLLSAI2_Config>
 800260e:	4603      	mov	r3, r0
 8002610:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d001      	beq.n	800261c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002618:	7cfb      	ldrb	r3, [r7, #19]
 800261a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002624:	2b00      	cmp	r3, #0
 8002626:	d00a      	beq.n	800263e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002628:	4b10      	ldr	r3, [pc, #64]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800262a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002636:	490d      	ldr	r1, [pc, #52]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002638:	4313      	orrs	r3, r2
 800263a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d00b      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800264a:	4b08      	ldr	r3, [pc, #32]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800264c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002650:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800265a:	4904      	ldr	r1, [pc, #16]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800265c:	4313      	orrs	r3, r2
 800265e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002662:	7cbb      	ldrb	r3, [r7, #18]
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000

08002670 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b084      	sub	sp, #16
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
 8002678:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800267e:	4b73      	ldr	r3, [pc, #460]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002680:	68db      	ldr	r3, [r3, #12]
 8002682:	f003 0303 	and.w	r3, r3, #3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d018      	beq.n	80026bc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800268a:	4b70      	ldr	r3, [pc, #448]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	f003 0203 	and.w	r2, r3, #3
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	429a      	cmp	r2, r3
 8002698:	d10d      	bne.n	80026b6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
       ||
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026a2:	4b6a      	ldr	r3, [pc, #424]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a4:	68db      	ldr	r3, [r3, #12]
 80026a6:	091b      	lsrs	r3, r3, #4
 80026a8:	f003 0307 	and.w	r3, r3, #7
 80026ac:	1c5a      	adds	r2, r3, #1
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
       ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d044      	beq.n	8002740 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	73fb      	strb	r3, [r7, #15]
 80026ba:	e041      	b.n	8002740 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d00c      	beq.n	80026de <RCCEx_PLLSAI1_Config+0x6e>
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d013      	beq.n	80026f0 <RCCEx_PLLSAI1_Config+0x80>
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d120      	bne.n	800270e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026cc:	4b5f      	ldr	r3, [pc, #380]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d11d      	bne.n	8002714 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026dc:	e01a      	b.n	8002714 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026de:	4b5b      	ldr	r3, [pc, #364]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ee:	e013      	b.n	8002718 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026f0:	4b56      	ldr	r3, [pc, #344]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d10f      	bne.n	800271c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80026fc:	4b53      	ldr	r3, [pc, #332]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002704:	2b00      	cmp	r3, #0
 8002706:	d109      	bne.n	800271c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800270c:	e006      	b.n	800271c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	73fb      	strb	r3, [r7, #15]
      break;
 8002712:	e004      	b.n	800271e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002714:	bf00      	nop
 8002716:	e002      	b.n	800271e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002718:	bf00      	nop
 800271a:	e000      	b.n	800271e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800271c:	bf00      	nop
    }

    if(status == HAL_OK)
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d10d      	bne.n	8002740 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002724:	4b49      	ldr	r3, [pc, #292]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002726:	68db      	ldr	r3, [r3, #12]
 8002728:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6819      	ldr	r1, [r3, #0]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	3b01      	subs	r3, #1
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	430b      	orrs	r3, r1
 800273a:	4944      	ldr	r1, [pc, #272]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 800273c:	4313      	orrs	r3, r2
 800273e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002740:	7bfb      	ldrb	r3, [r7, #15]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d17d      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a40      	ldr	r2, [pc, #256]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 800274c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002752:	f7fe fb31 	bl	8000db8 <HAL_GetTick>
 8002756:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002758:	e009      	b.n	800276e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800275a:	f7fe fb2d 	bl	8000db8 <HAL_GetTick>
 800275e:	4602      	mov	r2, r0
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	1ad3      	subs	r3, r2, r3
 8002764:	2b02      	cmp	r3, #2
 8002766:	d902      	bls.n	800276e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002768:	2303      	movs	r3, #3
 800276a:	73fb      	strb	r3, [r7, #15]
        break;
 800276c:	e005      	b.n	800277a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800276e:	4b37      	ldr	r3, [pc, #220]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ef      	bne.n	800275a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800277a:	7bfb      	ldrb	r3, [r7, #15]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d160      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d111      	bne.n	80027aa <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002786:	4b31      	ldr	r3, [pc, #196]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002788:	691b      	ldr	r3, [r3, #16]
 800278a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800278e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	6892      	ldr	r2, [r2, #8]
 8002796:	0211      	lsls	r1, r2, #8
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	68d2      	ldr	r2, [r2, #12]
 800279c:	0912      	lsrs	r2, r2, #4
 800279e:	0452      	lsls	r2, r2, #17
 80027a0:	430a      	orrs	r2, r1
 80027a2:	492a      	ldr	r1, [pc, #168]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027a4:	4313      	orrs	r3, r2
 80027a6:	610b      	str	r3, [r1, #16]
 80027a8:	e027      	b.n	80027fa <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d112      	bne.n	80027d6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027b0:	4b26      	ldr	r3, [pc, #152]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027b2:	691b      	ldr	r3, [r3, #16]
 80027b4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027b8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	6892      	ldr	r2, [r2, #8]
 80027c0:	0211      	lsls	r1, r2, #8
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6912      	ldr	r2, [r2, #16]
 80027c6:	0852      	lsrs	r2, r2, #1
 80027c8:	3a01      	subs	r2, #1
 80027ca:	0552      	lsls	r2, r2, #21
 80027cc:	430a      	orrs	r2, r1
 80027ce:	491f      	ldr	r1, [pc, #124]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027d0:	4313      	orrs	r3, r2
 80027d2:	610b      	str	r3, [r1, #16]
 80027d4:	e011      	b.n	80027fa <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d6:	4b1d      	ldr	r3, [pc, #116]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027de:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6892      	ldr	r2, [r2, #8]
 80027e6:	0211      	lsls	r1, r2, #8
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6952      	ldr	r2, [r2, #20]
 80027ec:	0852      	lsrs	r2, r2, #1
 80027ee:	3a01      	subs	r2, #1
 80027f0:	0652      	lsls	r2, r2, #25
 80027f2:	430a      	orrs	r2, r1
 80027f4:	4915      	ldr	r1, [pc, #84]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f6:	4313      	orrs	r3, r2
 80027f8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80027fa:	4b14      	ldr	r3, [pc, #80]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a13      	ldr	r2, [pc, #76]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002800:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002804:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002806:	f7fe fad7 	bl	8000db8 <HAL_GetTick>
 800280a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800280c:	e009      	b.n	8002822 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800280e:	f7fe fad3 	bl	8000db8 <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	68bb      	ldr	r3, [r7, #8]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d902      	bls.n	8002822 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	73fb      	strb	r3, [r7, #15]
          break;
 8002820:	e005      	b.n	800282e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002822:	4b0a      	ldr	r3, [pc, #40]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ef      	beq.n	800280e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800282e:	7bfb      	ldrb	r3, [r7, #15]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d106      	bne.n	8002842 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002834:	4b05      	ldr	r3, [pc, #20]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002836:	691a      	ldr	r2, [r3, #16]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	4903      	ldr	r1, [pc, #12]	; (800284c <RCCEx_PLLSAI1_Config+0x1dc>)
 800283e:	4313      	orrs	r3, r2
 8002840:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3710      	adds	r7, #16
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}
 800284c:	40021000 	.word	0x40021000

08002850 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b084      	sub	sp, #16
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
 8002858:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800285a:	2300      	movs	r3, #0
 800285c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800285e:	4b68      	ldr	r3, [pc, #416]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002860:	68db      	ldr	r3, [r3, #12]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d018      	beq.n	800289c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800286a:	4b65      	ldr	r3, [pc, #404]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	f003 0203 	and.w	r2, r3, #3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	429a      	cmp	r2, r3
 8002878:	d10d      	bne.n	8002896 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
       ||
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002882:	4b5f      	ldr	r3, [pc, #380]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002884:	68db      	ldr	r3, [r3, #12]
 8002886:	091b      	lsrs	r3, r3, #4
 8002888:	f003 0307 	and.w	r3, r3, #7
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
       ||
 8002892:	429a      	cmp	r2, r3
 8002894:	d044      	beq.n	8002920 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002896:	2301      	movs	r3, #1
 8002898:	73fb      	strb	r3, [r7, #15]
 800289a:	e041      	b.n	8002920 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d00c      	beq.n	80028be <RCCEx_PLLSAI2_Config+0x6e>
 80028a4:	2b03      	cmp	r3, #3
 80028a6:	d013      	beq.n	80028d0 <RCCEx_PLLSAI2_Config+0x80>
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d120      	bne.n	80028ee <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028ac:	4b54      	ldr	r3, [pc, #336]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d11d      	bne.n	80028f4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028bc:	e01a      	b.n	80028f4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028be:	4b50      	ldr	r3, [pc, #320]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d116      	bne.n	80028f8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ce:	e013      	b.n	80028f8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028d0:	4b4b      	ldr	r3, [pc, #300]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d10f      	bne.n	80028fc <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028dc:	4b48      	ldr	r3, [pc, #288]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d109      	bne.n	80028fc <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028ec:	e006      	b.n	80028fc <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	73fb      	strb	r3, [r7, #15]
      break;
 80028f2:	e004      	b.n	80028fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80028f4:	bf00      	nop
 80028f6:	e002      	b.n	80028fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80028f8:	bf00      	nop
 80028fa:	e000      	b.n	80028fe <RCCEx_PLLSAI2_Config+0xae>
      break;
 80028fc:	bf00      	nop
    }

    if(status == HAL_OK)
 80028fe:	7bfb      	ldrb	r3, [r7, #15]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10d      	bne.n	8002920 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002904:	4b3e      	ldr	r3, [pc, #248]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6819      	ldr	r1, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	3b01      	subs	r3, #1
 8002916:	011b      	lsls	r3, r3, #4
 8002918:	430b      	orrs	r3, r1
 800291a:	4939      	ldr	r1, [pc, #228]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800291c:	4313      	orrs	r3, r2
 800291e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d167      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002926:	4b36      	ldr	r3, [pc, #216]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a35      	ldr	r2, [pc, #212]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800292c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002930:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002932:	f7fe fa41 	bl	8000db8 <HAL_GetTick>
 8002936:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002938:	e009      	b.n	800294e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800293a:	f7fe fa3d 	bl	8000db8 <HAL_GetTick>
 800293e:	4602      	mov	r2, r0
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d902      	bls.n	800294e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	73fb      	strb	r3, [r7, #15]
        break;
 800294c:	e005      	b.n	800295a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800294e:	4b2c      	ldr	r3, [pc, #176]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d1ef      	bne.n	800293a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800295a:	7bfb      	ldrb	r3, [r7, #15]
 800295c:	2b00      	cmp	r3, #0
 800295e:	d14a      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d111      	bne.n	800298a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002966:	4b26      	ldr	r3, [pc, #152]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002968:	695b      	ldr	r3, [r3, #20]
 800296a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800296e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6892      	ldr	r2, [r2, #8]
 8002976:	0211      	lsls	r1, r2, #8
 8002978:	687a      	ldr	r2, [r7, #4]
 800297a:	68d2      	ldr	r2, [r2, #12]
 800297c:	0912      	lsrs	r2, r2, #4
 800297e:	0452      	lsls	r2, r2, #17
 8002980:	430a      	orrs	r2, r1
 8002982:	491f      	ldr	r1, [pc, #124]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002984:	4313      	orrs	r3, r2
 8002986:	614b      	str	r3, [r1, #20]
 8002988:	e011      	b.n	80029ae <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800298a:	4b1d      	ldr	r3, [pc, #116]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002992:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	6892      	ldr	r2, [r2, #8]
 800299a:	0211      	lsls	r1, r2, #8
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	6912      	ldr	r2, [r2, #16]
 80029a0:	0852      	lsrs	r2, r2, #1
 80029a2:	3a01      	subs	r2, #1
 80029a4:	0652      	lsls	r2, r2, #25
 80029a6:	430a      	orrs	r2, r1
 80029a8:	4915      	ldr	r1, [pc, #84]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029aa:	4313      	orrs	r3, r2
 80029ac:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029ae:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a13      	ldr	r2, [pc, #76]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029b8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029ba:	f7fe f9fd 	bl	8000db8 <HAL_GetTick>
 80029be:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029c0:	e009      	b.n	80029d6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029c2:	f7fe f9f9 	bl	8000db8 <HAL_GetTick>
 80029c6:	4602      	mov	r2, r0
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	1ad3      	subs	r3, r2, r3
 80029cc:	2b02      	cmp	r3, #2
 80029ce:	d902      	bls.n	80029d6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80029d0:	2303      	movs	r3, #3
 80029d2:	73fb      	strb	r3, [r7, #15]
          break;
 80029d4:	e005      	b.n	80029e2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029d6:	4b0a      	ldr	r3, [pc, #40]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d0ef      	beq.n	80029c2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d106      	bne.n	80029f6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80029e8:	4b05      	ldr	r3, [pc, #20]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029ea:	695a      	ldr	r2, [r3, #20]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	695b      	ldr	r3, [r3, #20]
 80029f0:	4903      	ldr	r1, [pc, #12]	; (8002a00 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029f2:	4313      	orrs	r3, r2
 80029f4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80029f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3710      	adds	r7, #16
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bd80      	pop	{r7, pc}
 8002a00:	40021000 	.word	0x40021000

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01d      	b.n	8002a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f7fe f85a 	bl	8000ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 fa34 	bl	8002eb0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}
	...

08002a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b085      	sub	sp, #20
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	68da      	ldr	r2, [r3, #12]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	4b0c      	ldr	r3, [pc, #48]	; (8002aac <HAL_TIM_Base_Start_IT+0x50>)
 8002a7c:	4013      	ands	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	2b06      	cmp	r3, #6
 8002a84:	d00b      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x42>
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a8c:	d007      	beq.n	8002a9e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f042 0201 	orr.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a9e:	2300      	movs	r3, #0
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3714      	adds	r7, #20
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aaa:	4770      	bx	lr
 8002aac:	00010007 	.word	0x00010007

08002ab0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d122      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	f003 0302 	and.w	r3, r3, #2
 8002ad0:	2b02      	cmp	r3, #2
 8002ad2:	d11b      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f06f 0202 	mvn.w	r2, #2
 8002adc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	699b      	ldr	r3, [r3, #24]
 8002aea:	f003 0303 	and.w	r3, r3, #3
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d003      	beq.n	8002afa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af2:	6878      	ldr	r0, [r7, #4]
 8002af4:	f000 f9be 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002af8:	e005      	b.n	8002b06 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f9b0 	bl	8002e60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f9c1 	bl	8002e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0304 	and.w	r3, r3, #4
 8002b16:	2b04      	cmp	r3, #4
 8002b18:	d122      	bne.n	8002b60 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0304 	and.w	r3, r3, #4
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d11b      	bne.n	8002b60 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0204 	mvn.w	r2, #4
 8002b30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2202      	movs	r2, #2
 8002b36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	699b      	ldr	r3, [r3, #24]
 8002b3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 f994 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002b4c:	e005      	b.n	8002b5a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f986 	bl	8002e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f997 	bl	8002e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f003 0308 	and.w	r3, r3, #8
 8002b6a:	2b08      	cmp	r3, #8
 8002b6c:	d122      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	68db      	ldr	r3, [r3, #12]
 8002b74:	f003 0308 	and.w	r3, r3, #8
 8002b78:	2b08      	cmp	r3, #8
 8002b7a:	d11b      	bne.n	8002bb4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0208 	mvn.w	r2, #8
 8002b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2204      	movs	r2, #4
 8002b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f96a 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f95c 	bl	8002e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f96d 	bl	8002e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	f003 0310 	and.w	r3, r3, #16
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d122      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	68db      	ldr	r3, [r3, #12]
 8002bc8:	f003 0310 	and.w	r3, r3, #16
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d11b      	bne.n	8002c08 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f06f 0210 	mvn.w	r2, #16
 8002bd8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2208      	movs	r2, #8
 8002bde:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	69db      	ldr	r3, [r3, #28]
 8002be6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d003      	beq.n	8002bf6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f940 	bl	8002e74 <HAL_TIM_IC_CaptureCallback>
 8002bf4:	e005      	b.n	8002c02 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f932 	bl	8002e60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f943 	bl	8002e88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	691b      	ldr	r3, [r3, #16]
 8002c0e:	f003 0301 	and.w	r3, r3, #1
 8002c12:	2b01      	cmp	r3, #1
 8002c14:	d10e      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	f003 0301 	and.w	r3, r3, #1
 8002c20:	2b01      	cmp	r3, #1
 8002c22:	d107      	bne.n	8002c34 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f06f 0201 	mvn.w	r2, #1
 8002c2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7fd fc4a 	bl	80004c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	691b      	ldr	r3, [r3, #16]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b80      	cmp	r3, #128	; 0x80
 8002c40:	d10e      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c4c:	2b80      	cmp	r3, #128	; 0x80
 8002c4e:	d107      	bne.n	8002c60 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 faee 	bl	800323c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	691b      	ldr	r3, [r3, #16]
 8002c66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c6e:	d10e      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c7a:	2b80      	cmp	r3, #128	; 0x80
 8002c7c:	d107      	bne.n	8002c8e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fae1 	bl	8003250 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b40      	cmp	r3, #64	; 0x40
 8002c9a:	d10e      	bne.n	8002cba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	68db      	ldr	r3, [r3, #12]
 8002ca2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ca6:	2b40      	cmp	r3, #64	; 0x40
 8002ca8:	d107      	bne.n	8002cba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cb2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	f000 f8f1 	bl	8002e9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	691b      	ldr	r3, [r3, #16]
 8002cc0:	f003 0320 	and.w	r3, r3, #32
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d10e      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	f003 0320 	and.w	r3, r3, #32
 8002cd2:	2b20      	cmp	r3, #32
 8002cd4:	d107      	bne.n	8002ce6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	f06f 0220 	mvn.w	r2, #32
 8002cde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002ce0:	6878      	ldr	r0, [r7, #4]
 8002ce2:	f000 faa1 	bl	8003228 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b084      	sub	sp, #16
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d101      	bne.n	8002d06 <HAL_TIM_ConfigClockSource+0x18>
 8002d02:	2302      	movs	r3, #2
 8002d04:	e0a8      	b.n	8002e58 <HAL_TIM_ConfigClockSource+0x16a>
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2201      	movs	r2, #1
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2202      	movs	r2, #2
 8002d12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d24:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d28:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d30:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	68fa      	ldr	r2, [r7, #12]
 8002d38:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	2b40      	cmp	r3, #64	; 0x40
 8002d40:	d067      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x124>
 8002d42:	2b40      	cmp	r3, #64	; 0x40
 8002d44:	d80b      	bhi.n	8002d5e <HAL_TIM_ConfigClockSource+0x70>
 8002d46:	2b10      	cmp	r3, #16
 8002d48:	d073      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x144>
 8002d4a:	2b10      	cmp	r3, #16
 8002d4c:	d802      	bhi.n	8002d54 <HAL_TIM_ConfigClockSource+0x66>
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d06f      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d52:	e078      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d54:	2b20      	cmp	r3, #32
 8002d56:	d06c      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x144>
 8002d58:	2b30      	cmp	r3, #48	; 0x30
 8002d5a:	d06a      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002d5c:	e073      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d5e:	2b70      	cmp	r3, #112	; 0x70
 8002d60:	d00d      	beq.n	8002d7e <HAL_TIM_ConfigClockSource+0x90>
 8002d62:	2b70      	cmp	r3, #112	; 0x70
 8002d64:	d804      	bhi.n	8002d70 <HAL_TIM_ConfigClockSource+0x82>
 8002d66:	2b50      	cmp	r3, #80	; 0x50
 8002d68:	d033      	beq.n	8002dd2 <HAL_TIM_ConfigClockSource+0xe4>
 8002d6a:	2b60      	cmp	r3, #96	; 0x60
 8002d6c:	d041      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002d6e:	e06a      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d74:	d066      	beq.n	8002e44 <HAL_TIM_ConfigClockSource+0x156>
 8002d76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d7a:	d017      	beq.n	8002dac <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002d7c:	e063      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	6899      	ldr	r1, [r3, #8]
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	68db      	ldr	r3, [r3, #12]
 8002d8e:	f000 f9a3 	bl	80030d8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002da0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	609a      	str	r2, [r3, #8]
      break;
 8002daa:	e04c      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6818      	ldr	r0, [r3, #0]
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	6899      	ldr	r1, [r3, #8]
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685a      	ldr	r2, [r3, #4]
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	68db      	ldr	r3, [r3, #12]
 8002dbc:	f000 f98c 	bl	80030d8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	689a      	ldr	r2, [r3, #8]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dce:	609a      	str	r2, [r3, #8]
      break;
 8002dd0:	e039      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6818      	ldr	r0, [r3, #0]
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	6859      	ldr	r1, [r3, #4]
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68db      	ldr	r3, [r3, #12]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f000 f900 	bl	8002fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	2150      	movs	r1, #80	; 0x50
 8002dea:	4618      	mov	r0, r3
 8002dec:	f000 f959 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002df0:	e029      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 f91f 	bl	8003042 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2160      	movs	r1, #96	; 0x60
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f949 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002e10:	e019      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 f8e0 	bl	8002fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2140      	movs	r1, #64	; 0x40
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f939 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002e30:	e009      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681a      	ldr	r2, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4610      	mov	r0, r2
 8002e3e:	f000 f930 	bl	80030a2 <TIM_ITRx_SetConfig>
      break;
 8002e42:	e000      	b.n	8002e46 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002e44:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3710      	adds	r7, #16
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}

08002e60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b083      	sub	sp, #12
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e68:	bf00      	nop
 8002e6a:	370c      	adds	r7, #12
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e72:	4770      	bx	lr

08002e74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e7c:	bf00      	nop
 8002e7e:	370c      	adds	r7, #12
 8002e80:	46bd      	mov	sp, r7
 8002e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e86:	4770      	bx	lr

08002e88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b083      	sub	sp, #12
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002e90:	bf00      	nop
 8002e92:	370c      	adds	r7, #12
 8002e94:	46bd      	mov	sp, r7
 8002e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9a:	4770      	bx	lr

08002e9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b083      	sub	sp, #12
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr

08002eb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b085      	sub	sp, #20
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	4a40      	ldr	r2, [pc, #256]	; (8002fc4 <TIM_Base_SetConfig+0x114>)
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d013      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ece:	d00f      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	4a3d      	ldr	r2, [pc, #244]	; (8002fc8 <TIM_Base_SetConfig+0x118>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d00b      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	4a3c      	ldr	r2, [pc, #240]	; (8002fcc <TIM_Base_SetConfig+0x11c>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d007      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a3b      	ldr	r2, [pc, #236]	; (8002fd0 <TIM_Base_SetConfig+0x120>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d003      	beq.n	8002ef0 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	4a3a      	ldr	r2, [pc, #232]	; (8002fd4 <TIM_Base_SetConfig+0x124>)
 8002eec:	4293      	cmp	r3, r2
 8002eee:	d108      	bne.n	8002f02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	4a2f      	ldr	r2, [pc, #188]	; (8002fc4 <TIM_Base_SetConfig+0x114>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d01f      	beq.n	8002f4a <TIM_Base_SetConfig+0x9a>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f10:	d01b      	beq.n	8002f4a <TIM_Base_SetConfig+0x9a>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	4a2c      	ldr	r2, [pc, #176]	; (8002fc8 <TIM_Base_SetConfig+0x118>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d017      	beq.n	8002f4a <TIM_Base_SetConfig+0x9a>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	4a2b      	ldr	r2, [pc, #172]	; (8002fcc <TIM_Base_SetConfig+0x11c>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d013      	beq.n	8002f4a <TIM_Base_SetConfig+0x9a>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2a      	ldr	r2, [pc, #168]	; (8002fd0 <TIM_Base_SetConfig+0x120>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d00f      	beq.n	8002f4a <TIM_Base_SetConfig+0x9a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a29      	ldr	r2, [pc, #164]	; (8002fd4 <TIM_Base_SetConfig+0x124>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_Base_SetConfig+0x9a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a28      	ldr	r2, [pc, #160]	; (8002fd8 <TIM_Base_SetConfig+0x128>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0x9a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a27      	ldr	r2, [pc, #156]	; (8002fdc <TIM_Base_SetConfig+0x12c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0x9a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a26      	ldr	r2, [pc, #152]	; (8002fe0 <TIM_Base_SetConfig+0x130>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a10      	ldr	r2, [pc, #64]	; (8002fc4 <TIM_Base_SetConfig+0x114>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d00f      	beq.n	8002fa8 <TIM_Base_SetConfig+0xf8>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a12      	ldr	r2, [pc, #72]	; (8002fd4 <TIM_Base_SetConfig+0x124>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d00b      	beq.n	8002fa8 <TIM_Base_SetConfig+0xf8>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a11      	ldr	r2, [pc, #68]	; (8002fd8 <TIM_Base_SetConfig+0x128>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d007      	beq.n	8002fa8 <TIM_Base_SetConfig+0xf8>
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4a10      	ldr	r2, [pc, #64]	; (8002fdc <TIM_Base_SetConfig+0x12c>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d003      	beq.n	8002fa8 <TIM_Base_SetConfig+0xf8>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0f      	ldr	r2, [pc, #60]	; (8002fe0 <TIM_Base_SetConfig+0x130>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d103      	bne.n	8002fb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]
}
 8002fb6:	bf00      	nop
 8002fb8:	3714      	adds	r7, #20
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40012c00 	.word	0x40012c00
 8002fc8:	40000400 	.word	0x40000400
 8002fcc:	40000800 	.word	0x40000800
 8002fd0:	40000c00 	.word	0x40000c00
 8002fd4:	40013400 	.word	0x40013400
 8002fd8:	40014000 	.word	0x40014000
 8002fdc:	40014400 	.word	0x40014400
 8002fe0:	40014800 	.word	0x40014800

08002fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f023 0201 	bic.w	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800300e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 030a 	bic.w	r3, r3, #10
 8003020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003042:	b480      	push	{r7}
 8003044:	b087      	sub	sp, #28
 8003046:	af00      	add	r7, sp, #0
 8003048:	60f8      	str	r0, [r7, #12]
 800304a:	60b9      	str	r1, [r7, #8]
 800304c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6a1b      	ldr	r3, [r3, #32]
 8003052:	f023 0210 	bic.w	r2, r3, #16
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	6a1b      	ldr	r3, [r3, #32]
 8003064:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003066:	697b      	ldr	r3, [r7, #20]
 8003068:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800306c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	031b      	lsls	r3, r3, #12
 8003072:	697a      	ldr	r2, [r7, #20]
 8003074:	4313      	orrs	r3, r2
 8003076:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003078:	693b      	ldr	r3, [r7, #16]
 800307a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800307e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	693a      	ldr	r2, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	697a      	ldr	r2, [r7, #20]
 800308e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	693a      	ldr	r2, [r7, #16]
 8003094:	621a      	str	r2, [r3, #32]
}
 8003096:	bf00      	nop
 8003098:	371c      	adds	r7, #28
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b085      	sub	sp, #20
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
 80030aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	f043 0307 	orr.w	r3, r3, #7
 80030c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68fa      	ldr	r2, [r7, #12]
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030d8:	b480      	push	{r7}
 80030da:	b087      	sub	sp, #28
 80030dc:	af00      	add	r7, sp, #0
 80030de:	60f8      	str	r0, [r7, #12]
 80030e0:	60b9      	str	r1, [r7, #8]
 80030e2:	607a      	str	r2, [r7, #4]
 80030e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80030f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	021a      	lsls	r2, r3, #8
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	431a      	orrs	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	4313      	orrs	r3, r2
 8003100:	697a      	ldr	r2, [r7, #20]
 8003102:	4313      	orrs	r3, r2
 8003104:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	697a      	ldr	r2, [r7, #20]
 800310a:	609a      	str	r2, [r3, #8]
}
 800310c:	bf00      	nop
 800310e:	371c      	adds	r7, #28
 8003110:	46bd      	mov	sp, r7
 8003112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003116:	4770      	bx	lr

08003118 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003118:	b480      	push	{r7}
 800311a:	b085      	sub	sp, #20
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
 8003120:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003128:	2b01      	cmp	r3, #1
 800312a:	d101      	bne.n	8003130 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800312c:	2302      	movs	r3, #2
 800312e:	e068      	b.n	8003202 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2201      	movs	r2, #1
 8003134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2202      	movs	r2, #2
 800313c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a2e      	ldr	r2, [pc, #184]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d004      	beq.n	8003164 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a2d      	ldr	r2, [pc, #180]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d108      	bne.n	8003176 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800316a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	68fa      	ldr	r2, [r7, #12]
 8003172:	4313      	orrs	r3, r2
 8003174:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800317c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68fa      	ldr	r2, [r7, #12]
 8003184:	4313      	orrs	r3, r2
 8003186:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	68fa      	ldr	r2, [r7, #12]
 800318e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a1e      	ldr	r2, [pc, #120]	; (8003210 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d01d      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a2:	d018      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a1b      	ldr	r2, [pc, #108]	; (8003218 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d013      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a1a      	ldr	r2, [pc, #104]	; (800321c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00e      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4a18      	ldr	r2, [pc, #96]	; (8003220 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d009      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a13      	ldr	r2, [pc, #76]	; (8003214 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d004      	beq.n	80031d6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d10c      	bne.n	80031f0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031dc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	68ba      	ldr	r2, [r7, #8]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68ba      	ldr	r2, [r7, #8]
 80031ee:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2201      	movs	r2, #1
 80031f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3714      	adds	r7, #20
 8003206:	46bd      	mov	sp, r7
 8003208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320c:	4770      	bx	lr
 800320e:	bf00      	nop
 8003210:	40012c00 	.word	0x40012c00
 8003214:	40013400 	.word	0x40013400
 8003218:	40000400 	.word	0x40000400
 800321c:	40000800 	.word	0x40000800
 8003220:	40000c00 	.word	0x40000c00
 8003224:	40014000 	.word	0x40014000

08003228 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003230:	bf00      	nop
 8003232:	370c      	adds	r7, #12
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800323c:	b480      	push	{r7}
 800323e:	b083      	sub	sp, #12
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003244:	bf00      	nop
 8003246:	370c      	adds	r7, #12
 8003248:	46bd      	mov	sp, r7
 800324a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324e:	4770      	bx	lr

08003250 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003258:	bf00      	nop
 800325a:	370c      	adds	r7, #12
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d101      	bne.n	8003276 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003272:	2301      	movs	r3, #1
 8003274:	e040      	b.n	80032f8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327a:	2b00      	cmp	r3, #0
 800327c:	d106      	bne.n	800328c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f7fd fc50 	bl	8000b2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2224      	movs	r2, #36	; 0x24
 8003290:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f022 0201 	bic.w	r2, r2, #1
 80032a0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f8c0 	bl	8003428 <UART_SetConfig>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d101      	bne.n	80032b2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e022      	b.n	80032f8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d002      	beq.n	80032c0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 fc26 	bl	8003b0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ce:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	689a      	ldr	r2, [r3, #8]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032de:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	681a      	ldr	r2, [r3, #0]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0201 	orr.w	r2, r2, #1
 80032ee:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 fcad 	bl	8003c50 <UART_CheckIdleState>
 80032f6:	4603      	mov	r3, r0
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3708      	adds	r7, #8
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b08a      	sub	sp, #40	; 0x28
 8003304:	af02      	add	r7, sp, #8
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	603b      	str	r3, [r7, #0]
 800330c:	4613      	mov	r3, r2
 800330e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003314:	2b20      	cmp	r3, #32
 8003316:	f040 8081 	bne.w	800341c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d002      	beq.n	8003326 <HAL_UART_Transmit+0x26>
 8003320:	88fb      	ldrh	r3, [r7, #6]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e079      	b.n	800341e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_UART_Transmit+0x38>
 8003334:	2302      	movs	r3, #2
 8003336:	e072      	b.n	800341e <HAL_UART_Transmit+0x11e>
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2221      	movs	r2, #33	; 0x21
 800334a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800334c:	f7fd fd34 	bl	8000db8 <HAL_GetTick>
 8003350:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	88fa      	ldrh	r2, [r7, #6]
 8003356:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	88fa      	ldrh	r2, [r7, #6]
 800335e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800336a:	d108      	bne.n	800337e <HAL_UART_Transmit+0x7e>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	691b      	ldr	r3, [r3, #16]
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003374:	2300      	movs	r3, #0
 8003376:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	61bb      	str	r3, [r7, #24]
 800337c:	e003      	b.n	8003386 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003382:	2300      	movs	r3, #0
 8003384:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 800338e:	e02d      	b.n	80033ec <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	9300      	str	r3, [sp, #0]
 8003394:	697b      	ldr	r3, [r7, #20]
 8003396:	2200      	movs	r2, #0
 8003398:	2180      	movs	r1, #128	; 0x80
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fc9d 	bl	8003cda <UART_WaitOnFlagUntilTimeout>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d001      	beq.n	80033aa <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80033a6:	2303      	movs	r3, #3
 80033a8:	e039      	b.n	800341e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d10b      	bne.n	80033c8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	881a      	ldrh	r2, [r3, #0]
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033bc:	b292      	uxth	r2, r2
 80033be:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	3302      	adds	r3, #2
 80033c4:	61bb      	str	r3, [r7, #24]
 80033c6:	e008      	b.n	80033da <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	781a      	ldrb	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	b292      	uxth	r2, r2
 80033d2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	3301      	adds	r3, #1
 80033d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033f2:	b29b      	uxth	r3, r3
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d1cb      	bne.n	8003390 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	9300      	str	r3, [sp, #0]
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	2200      	movs	r2, #0
 8003400:	2140      	movs	r1, #64	; 0x40
 8003402:	68f8      	ldr	r0, [r7, #12]
 8003404:	f000 fc69 	bl	8003cda <UART_WaitOnFlagUntilTimeout>
 8003408:	4603      	mov	r3, r0
 800340a:	2b00      	cmp	r3, #0
 800340c:	d001      	beq.n	8003412 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800340e:	2303      	movs	r3, #3
 8003410:	e005      	b.n	800341e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2220      	movs	r2, #32
 8003416:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003418:	2300      	movs	r3, #0
 800341a:	e000      	b.n	800341e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800341c:	2302      	movs	r3, #2
  }
}
 800341e:	4618      	mov	r0, r3
 8003420:	3720      	adds	r7, #32
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003428:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800342c:	b08a      	sub	sp, #40	; 0x28
 800342e:	af00      	add	r7, sp, #0
 8003430:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003432:	2300      	movs	r3, #0
 8003434:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689a      	ldr	r2, [r3, #8]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	691b      	ldr	r3, [r3, #16]
 8003446:	431a      	orrs	r2, r3
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	695b      	ldr	r3, [r3, #20]
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4313      	orrs	r3, r2
 8003454:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681a      	ldr	r2, [r3, #0]
 800345c:	4bb8      	ldr	r3, [pc, #736]	; (8003740 <UART_SetConfig+0x318>)
 800345e:	4013      	ands	r3, r2
 8003460:	687a      	ldr	r2, [r7, #4]
 8003462:	6812      	ldr	r2, [r2, #0]
 8003464:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003466:	430b      	orrs	r3, r1
 8003468:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	68da      	ldr	r2, [r3, #12]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	430a      	orrs	r2, r1
 800347e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	699b      	ldr	r3, [r3, #24]
 8003484:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4aae      	ldr	r2, [pc, #696]	; (8003744 <UART_SetConfig+0x31c>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d004      	beq.n	800349a <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003496:	4313      	orrs	r3, r2
 8003498:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034aa:	430a      	orrs	r2, r1
 80034ac:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4aa5      	ldr	r2, [pc, #660]	; (8003748 <UART_SetConfig+0x320>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d126      	bne.n	8003506 <UART_SetConfig+0xde>
 80034b8:	4ba4      	ldr	r3, [pc, #656]	; (800374c <UART_SetConfig+0x324>)
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034be:	f003 0303 	and.w	r3, r3, #3
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d81a      	bhi.n	80034fc <UART_SetConfig+0xd4>
 80034c6:	a201      	add	r2, pc, #4	; (adr r2, 80034cc <UART_SetConfig+0xa4>)
 80034c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034cc:	080034dd 	.word	0x080034dd
 80034d0:	080034ed 	.word	0x080034ed
 80034d4:	080034e5 	.word	0x080034e5
 80034d8:	080034f5 	.word	0x080034f5
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034e2:	e105      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80034e4:	2302      	movs	r3, #2
 80034e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034ea:	e101      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80034ec:	2304      	movs	r3, #4
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034f2:	e0fd      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80034f4:	2308      	movs	r3, #8
 80034f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80034fa:	e0f9      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80034fc:	2310      	movs	r3, #16
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003502:	bf00      	nop
 8003504:	e0f4      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a91      	ldr	r2, [pc, #580]	; (8003750 <UART_SetConfig+0x328>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d138      	bne.n	8003582 <UART_SetConfig+0x15a>
 8003510:	4b8e      	ldr	r3, [pc, #568]	; (800374c <UART_SetConfig+0x324>)
 8003512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003516:	f003 030c 	and.w	r3, r3, #12
 800351a:	2b0c      	cmp	r3, #12
 800351c:	d82c      	bhi.n	8003578 <UART_SetConfig+0x150>
 800351e:	a201      	add	r2, pc, #4	; (adr r2, 8003524 <UART_SetConfig+0xfc>)
 8003520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003524:	08003559 	.word	0x08003559
 8003528:	08003579 	.word	0x08003579
 800352c:	08003579 	.word	0x08003579
 8003530:	08003579 	.word	0x08003579
 8003534:	08003569 	.word	0x08003569
 8003538:	08003579 	.word	0x08003579
 800353c:	08003579 	.word	0x08003579
 8003540:	08003579 	.word	0x08003579
 8003544:	08003561 	.word	0x08003561
 8003548:	08003579 	.word	0x08003579
 800354c:	08003579 	.word	0x08003579
 8003550:	08003579 	.word	0x08003579
 8003554:	08003571 	.word	0x08003571
 8003558:	2300      	movs	r3, #0
 800355a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800355e:	e0c7      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003560:	2302      	movs	r3, #2
 8003562:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003566:	e0c3      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003568:	2304      	movs	r3, #4
 800356a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800356e:	e0bf      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003570:	2308      	movs	r3, #8
 8003572:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003576:	e0bb      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003578:	2310      	movs	r3, #16
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	bf00      	nop
 8003580:	e0b6      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	4a73      	ldr	r2, [pc, #460]	; (8003754 <UART_SetConfig+0x32c>)
 8003588:	4293      	cmp	r3, r2
 800358a:	d125      	bne.n	80035d8 <UART_SetConfig+0x1b0>
 800358c:	4b6f      	ldr	r3, [pc, #444]	; (800374c <UART_SetConfig+0x324>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003592:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003596:	2b10      	cmp	r3, #16
 8003598:	d011      	beq.n	80035be <UART_SetConfig+0x196>
 800359a:	2b10      	cmp	r3, #16
 800359c:	d802      	bhi.n	80035a4 <UART_SetConfig+0x17c>
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d005      	beq.n	80035ae <UART_SetConfig+0x186>
 80035a2:	e014      	b.n	80035ce <UART_SetConfig+0x1a6>
 80035a4:	2b20      	cmp	r3, #32
 80035a6:	d006      	beq.n	80035b6 <UART_SetConfig+0x18e>
 80035a8:	2b30      	cmp	r3, #48	; 0x30
 80035aa:	d00c      	beq.n	80035c6 <UART_SetConfig+0x19e>
 80035ac:	e00f      	b.n	80035ce <UART_SetConfig+0x1a6>
 80035ae:	2300      	movs	r3, #0
 80035b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035b4:	e09c      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80035b6:	2302      	movs	r3, #2
 80035b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035bc:	e098      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80035be:	2304      	movs	r3, #4
 80035c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035c4:	e094      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80035c6:	2308      	movs	r3, #8
 80035c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035cc:	e090      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80035ce:	2310      	movs	r3, #16
 80035d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d4:	bf00      	nop
 80035d6:	e08b      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	4a5e      	ldr	r2, [pc, #376]	; (8003758 <UART_SetConfig+0x330>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d125      	bne.n	800362e <UART_SetConfig+0x206>
 80035e2:	4b5a      	ldr	r3, [pc, #360]	; (800374c <UART_SetConfig+0x324>)
 80035e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80035ec:	2b40      	cmp	r3, #64	; 0x40
 80035ee:	d011      	beq.n	8003614 <UART_SetConfig+0x1ec>
 80035f0:	2b40      	cmp	r3, #64	; 0x40
 80035f2:	d802      	bhi.n	80035fa <UART_SetConfig+0x1d2>
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <UART_SetConfig+0x1dc>
 80035f8:	e014      	b.n	8003624 <UART_SetConfig+0x1fc>
 80035fa:	2b80      	cmp	r3, #128	; 0x80
 80035fc:	d006      	beq.n	800360c <UART_SetConfig+0x1e4>
 80035fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003600:	d00c      	beq.n	800361c <UART_SetConfig+0x1f4>
 8003602:	e00f      	b.n	8003624 <UART_SetConfig+0x1fc>
 8003604:	2300      	movs	r3, #0
 8003606:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800360a:	e071      	b.n	80036f0 <UART_SetConfig+0x2c8>
 800360c:	2302      	movs	r3, #2
 800360e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003612:	e06d      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003614:	2304      	movs	r3, #4
 8003616:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800361a:	e069      	b.n	80036f0 <UART_SetConfig+0x2c8>
 800361c:	2308      	movs	r3, #8
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e065      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003624:	2310      	movs	r3, #16
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	bf00      	nop
 800362c:	e060      	b.n	80036f0 <UART_SetConfig+0x2c8>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a4a      	ldr	r2, [pc, #296]	; (800375c <UART_SetConfig+0x334>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d129      	bne.n	800368c <UART_SetConfig+0x264>
 8003638:	4b44      	ldr	r3, [pc, #272]	; (800374c <UART_SetConfig+0x324>)
 800363a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800363e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	d014      	beq.n	8003672 <UART_SetConfig+0x24a>
 8003648:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800364c:	d802      	bhi.n	8003654 <UART_SetConfig+0x22c>
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <UART_SetConfig+0x23a>
 8003652:	e016      	b.n	8003682 <UART_SetConfig+0x25a>
 8003654:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003658:	d007      	beq.n	800366a <UART_SetConfig+0x242>
 800365a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800365e:	d00c      	beq.n	800367a <UART_SetConfig+0x252>
 8003660:	e00f      	b.n	8003682 <UART_SetConfig+0x25a>
 8003662:	2300      	movs	r3, #0
 8003664:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003668:	e042      	b.n	80036f0 <UART_SetConfig+0x2c8>
 800366a:	2302      	movs	r3, #2
 800366c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003670:	e03e      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003672:	2304      	movs	r3, #4
 8003674:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003678:	e03a      	b.n	80036f0 <UART_SetConfig+0x2c8>
 800367a:	2308      	movs	r3, #8
 800367c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003680:	e036      	b.n	80036f0 <UART_SetConfig+0x2c8>
 8003682:	2310      	movs	r3, #16
 8003684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003688:	bf00      	nop
 800368a:	e031      	b.n	80036f0 <UART_SetConfig+0x2c8>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4a2c      	ldr	r2, [pc, #176]	; (8003744 <UART_SetConfig+0x31c>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d129      	bne.n	80036ea <UART_SetConfig+0x2c2>
 8003696:	4b2d      	ldr	r3, [pc, #180]	; (800374c <UART_SetConfig+0x324>)
 8003698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800369c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a4:	d014      	beq.n	80036d0 <UART_SetConfig+0x2a8>
 80036a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036aa:	d802      	bhi.n	80036b2 <UART_SetConfig+0x28a>
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d007      	beq.n	80036c0 <UART_SetConfig+0x298>
 80036b0:	e016      	b.n	80036e0 <UART_SetConfig+0x2b8>
 80036b2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036b6:	d007      	beq.n	80036c8 <UART_SetConfig+0x2a0>
 80036b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036bc:	d00c      	beq.n	80036d8 <UART_SetConfig+0x2b0>
 80036be:	e00f      	b.n	80036e0 <UART_SetConfig+0x2b8>
 80036c0:	2300      	movs	r3, #0
 80036c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036c6:	e013      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80036c8:	2302      	movs	r3, #2
 80036ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ce:	e00f      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80036d0:	2304      	movs	r3, #4
 80036d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036d6:	e00b      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80036d8:	2308      	movs	r3, #8
 80036da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036de:	e007      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80036e0:	2310      	movs	r3, #16
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e6:	bf00      	nop
 80036e8:	e002      	b.n	80036f0 <UART_SetConfig+0x2c8>
 80036ea:	2310      	movs	r3, #16
 80036ec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a13      	ldr	r2, [pc, #76]	; (8003744 <UART_SetConfig+0x31c>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	f040 80fe 	bne.w	80038f8 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80036fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003700:	2b08      	cmp	r3, #8
 8003702:	d837      	bhi.n	8003774 <UART_SetConfig+0x34c>
 8003704:	a201      	add	r2, pc, #4	; (adr r2, 800370c <UART_SetConfig+0x2e4>)
 8003706:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800370a:	bf00      	nop
 800370c:	08003731 	.word	0x08003731
 8003710:	08003775 	.word	0x08003775
 8003714:	08003739 	.word	0x08003739
 8003718:	08003775 	.word	0x08003775
 800371c:	08003765 	.word	0x08003765
 8003720:	08003775 	.word	0x08003775
 8003724:	08003775 	.word	0x08003775
 8003728:	08003775 	.word	0x08003775
 800372c:	0800376d 	.word	0x0800376d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003730:	f7fe fc2c 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8003734:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003736:	e020      	b.n	800377a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003738:	4b09      	ldr	r3, [pc, #36]	; (8003760 <UART_SetConfig+0x338>)
 800373a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800373c:	e01d      	b.n	800377a <UART_SetConfig+0x352>
 800373e:	bf00      	nop
 8003740:	efff69f3 	.word	0xefff69f3
 8003744:	40008000 	.word	0x40008000
 8003748:	40013800 	.word	0x40013800
 800374c:	40021000 	.word	0x40021000
 8003750:	40004400 	.word	0x40004400
 8003754:	40004800 	.word	0x40004800
 8003758:	40004c00 	.word	0x40004c00
 800375c:	40005000 	.word	0x40005000
 8003760:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003764:	f7fe fb7c 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8003768:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800376a:	e006      	b.n	800377a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800376c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003770:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003772:	e002      	b.n	800377a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	76fb      	strb	r3, [r7, #27]
        break;
 8003778:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 81b9 	beq.w	8003af4 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685a      	ldr	r2, [r3, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	4413      	add	r3, r2
 800378c:	697a      	ldr	r2, [r7, #20]
 800378e:	429a      	cmp	r2, r3
 8003790:	d305      	bcc.n	800379e <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003798:	697a      	ldr	r2, [r7, #20]
 800379a:	429a      	cmp	r2, r3
 800379c:	d902      	bls.n	80037a4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	76fb      	strb	r3, [r7, #27]
 80037a2:	e1a7      	b.n	8003af4 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80037a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037a8:	2b08      	cmp	r3, #8
 80037aa:	f200 8092 	bhi.w	80038d2 <UART_SetConfig+0x4aa>
 80037ae:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0x38c>)
 80037b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b4:	080037d9 	.word	0x080037d9
 80037b8:	080038d3 	.word	0x080038d3
 80037bc:	08003827 	.word	0x08003827
 80037c0:	080038d3 	.word	0x080038d3
 80037c4:	0800385b 	.word	0x0800385b
 80037c8:	080038d3 	.word	0x080038d3
 80037cc:	080038d3 	.word	0x080038d3
 80037d0:	080038d3 	.word	0x080038d3
 80037d4:	080038a9 	.word	0x080038a9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80037d8:	f7fe fbd8 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 80037dc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	4619      	mov	r1, r3
 80037e2:	f04f 0200 	mov.w	r2, #0
 80037e6:	f04f 0300 	mov.w	r3, #0
 80037ea:	f04f 0400 	mov.w	r4, #0
 80037ee:	0214      	lsls	r4, r2, #8
 80037f0:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80037f4:	020b      	lsls	r3, r1, #8
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6852      	ldr	r2, [r2, #4]
 80037fa:	0852      	lsrs	r2, r2, #1
 80037fc:	4611      	mov	r1, r2
 80037fe:	f04f 0200 	mov.w	r2, #0
 8003802:	eb13 0b01 	adds.w	fp, r3, r1
 8003806:	eb44 0c02 	adc.w	ip, r4, r2
 800380a:	4658      	mov	r0, fp
 800380c:	4661      	mov	r1, ip
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f04f 0400 	mov.w	r4, #0
 8003816:	461a      	mov	r2, r3
 8003818:	4623      	mov	r3, r4
 800381a:	f7fc fcd5 	bl	80001c8 <__aeabi_uldivmod>
 800381e:	4603      	mov	r3, r0
 8003820:	460c      	mov	r4, r1
 8003822:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003824:	e058      	b.n	80038d8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	f04f 0400 	mov.w	r4, #0
 8003830:	49ae      	ldr	r1, [pc, #696]	; (8003aec <UART_SetConfig+0x6c4>)
 8003832:	f04f 0200 	mov.w	r2, #0
 8003836:	eb13 0b01 	adds.w	fp, r3, r1
 800383a:	eb44 0c02 	adc.w	ip, r4, r2
 800383e:	4658      	mov	r0, fp
 8003840:	4661      	mov	r1, ip
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	685b      	ldr	r3, [r3, #4]
 8003846:	f04f 0400 	mov.w	r4, #0
 800384a:	461a      	mov	r2, r3
 800384c:	4623      	mov	r3, r4
 800384e:	f7fc fcbb 	bl	80001c8 <__aeabi_uldivmod>
 8003852:	4603      	mov	r3, r0
 8003854:	460c      	mov	r4, r1
 8003856:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003858:	e03e      	b.n	80038d8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800385a:	f7fe fb01 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 800385e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003860:	693b      	ldr	r3, [r7, #16]
 8003862:	4619      	mov	r1, r3
 8003864:	f04f 0200 	mov.w	r2, #0
 8003868:	f04f 0300 	mov.w	r3, #0
 800386c:	f04f 0400 	mov.w	r4, #0
 8003870:	0214      	lsls	r4, r2, #8
 8003872:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003876:	020b      	lsls	r3, r1, #8
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	6852      	ldr	r2, [r2, #4]
 800387c:	0852      	lsrs	r2, r2, #1
 800387e:	4611      	mov	r1, r2
 8003880:	f04f 0200 	mov.w	r2, #0
 8003884:	eb13 0b01 	adds.w	fp, r3, r1
 8003888:	eb44 0c02 	adc.w	ip, r4, r2
 800388c:	4658      	mov	r0, fp
 800388e:	4661      	mov	r1, ip
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	f04f 0400 	mov.w	r4, #0
 8003898:	461a      	mov	r2, r3
 800389a:	4623      	mov	r3, r4
 800389c:	f7fc fc94 	bl	80001c8 <__aeabi_uldivmod>
 80038a0:	4603      	mov	r3, r0
 80038a2:	460c      	mov	r4, r1
 80038a4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80038a6:	e017      	b.n	80038d8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	085b      	lsrs	r3, r3, #1
 80038ae:	f04f 0400 	mov.w	r4, #0
 80038b2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80038b6:	f144 0100 	adc.w	r1, r4, #0
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f04f 0400 	mov.w	r4, #0
 80038c2:	461a      	mov	r2, r3
 80038c4:	4623      	mov	r3, r4
 80038c6:	f7fc fc7f 	bl	80001c8 <__aeabi_uldivmod>
 80038ca:	4603      	mov	r3, r0
 80038cc:	460c      	mov	r4, r1
 80038ce:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80038d0:	e002      	b.n	80038d8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	76fb      	strb	r3, [r7, #27]
            break;
 80038d6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038de:	d308      	bcc.n	80038f2 <UART_SetConfig+0x4ca>
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80038e6:	d204      	bcs.n	80038f2 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	69fa      	ldr	r2, [r7, #28]
 80038ee:	60da      	str	r2, [r3, #12]
 80038f0:	e100      	b.n	8003af4 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	76fb      	strb	r3, [r7, #27]
 80038f6:	e0fd      	b.n	8003af4 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	69db      	ldr	r3, [r3, #28]
 80038fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003900:	f040 8084 	bne.w	8003a0c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003904:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003908:	2b08      	cmp	r3, #8
 800390a:	d85f      	bhi.n	80039cc <UART_SetConfig+0x5a4>
 800390c:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <UART_SetConfig+0x4ec>)
 800390e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003912:	bf00      	nop
 8003914:	08003939 	.word	0x08003939
 8003918:	08003959 	.word	0x08003959
 800391c:	08003979 	.word	0x08003979
 8003920:	080039cd 	.word	0x080039cd
 8003924:	08003995 	.word	0x08003995
 8003928:	080039cd 	.word	0x080039cd
 800392c:	080039cd 	.word	0x080039cd
 8003930:	080039cd 	.word	0x080039cd
 8003934:	080039b5 	.word	0x080039b5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7fe fb28 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 800393c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	005a      	lsls	r2, r3, #1
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	085b      	lsrs	r3, r3, #1
 8003948:	441a      	add	r2, r3
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003952:	b29b      	uxth	r3, r3
 8003954:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003956:	e03c      	b.n	80039d2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003958:	f7fe fb2e 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 800395c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	005a      	lsls	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003976:	e02c      	b.n	80039d2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8003982:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8003986:	687a      	ldr	r2, [r7, #4]
 8003988:	6852      	ldr	r2, [r2, #4]
 800398a:	fbb3 f3f2 	udiv	r3, r3, r2
 800398e:	b29b      	uxth	r3, r3
 8003990:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003992:	e01e      	b.n	80039d2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003994:	f7fe fa64 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8003998:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	005a      	lsls	r2, r3, #1
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	085b      	lsrs	r3, r3, #1
 80039a4:	441a      	add	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039b2:	e00e      	b.n	80039d2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	085b      	lsrs	r3, r3, #1
 80039ba:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039ca:	e002      	b.n	80039d2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	76fb      	strb	r3, [r7, #27]
        break;
 80039d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	2b0f      	cmp	r3, #15
 80039d6:	d916      	bls.n	8003a06 <UART_SetConfig+0x5de>
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039de:	d212      	bcs.n	8003a06 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80039e0:	69fb      	ldr	r3, [r7, #28]
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	f023 030f 	bic.w	r3, r3, #15
 80039e8:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80039ea:	69fb      	ldr	r3, [r7, #28]
 80039ec:	085b      	lsrs	r3, r3, #1
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	f003 0307 	and.w	r3, r3, #7
 80039f4:	b29a      	uxth	r2, r3
 80039f6:	89fb      	ldrh	r3, [r7, #14]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	89fa      	ldrh	r2, [r7, #14]
 8003a02:	60da      	str	r2, [r3, #12]
 8003a04:	e076      	b.n	8003af4 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	76fb      	strb	r3, [r7, #27]
 8003a0a:	e073      	b.n	8003af4 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8003a0c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a10:	2b08      	cmp	r3, #8
 8003a12:	d85c      	bhi.n	8003ace <UART_SetConfig+0x6a6>
 8003a14:	a201      	add	r2, pc, #4	; (adr r2, 8003a1c <UART_SetConfig+0x5f4>)
 8003a16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1a:	bf00      	nop
 8003a1c:	08003a41 	.word	0x08003a41
 8003a20:	08003a5f 	.word	0x08003a5f
 8003a24:	08003a7d 	.word	0x08003a7d
 8003a28:	08003acf 	.word	0x08003acf
 8003a2c:	08003a99 	.word	0x08003a99
 8003a30:	08003acf 	.word	0x08003acf
 8003a34:	08003acf 	.word	0x08003acf
 8003a38:	08003acf 	.word	0x08003acf
 8003a3c:	08003ab7 	.word	0x08003ab7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a40:	f7fe faa4 	bl	8001f8c <HAL_RCC_GetPCLK1Freq>
 8003a44:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	685b      	ldr	r3, [r3, #4]
 8003a4a:	085a      	lsrs	r2, r3, #1
 8003a4c:	693b      	ldr	r3, [r7, #16]
 8003a4e:	441a      	add	r2, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a58:	b29b      	uxth	r3, r3
 8003a5a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a5c:	e03a      	b.n	8003ad4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a5e:	f7fe faab 	bl	8001fb8 <HAL_RCC_GetPCLK2Freq>
 8003a62:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	085a      	lsrs	r2, r3, #1
 8003a6a:	693b      	ldr	r3, [r7, #16]
 8003a6c:	441a      	add	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a7a:	e02b      	b.n	8003ad4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003a86:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6852      	ldr	r2, [r2, #4]
 8003a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a92:	b29b      	uxth	r3, r3
 8003a94:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a96:	e01d      	b.n	8003ad4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a98:	f7fe f9e2 	bl	8001e60 <HAL_RCC_GetSysClockFreq>
 8003a9c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085a      	lsrs	r2, r3, #1
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	441a      	add	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ab4:	e00e      	b.n	8003ad4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	085b      	lsrs	r3, r3, #1
 8003abc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	b29b      	uxth	r3, r3
 8003aca:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003acc:	e002      	b.n	8003ad4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	76fb      	strb	r3, [r7, #27]
        break;
 8003ad2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	d90a      	bls.n	8003af0 <UART_SetConfig+0x6c8>
 8003ada:	69fb      	ldr	r3, [r7, #28]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d206      	bcs.n	8003af0 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	60da      	str	r2, [r3, #12]
 8003aea:	e003      	b.n	8003af4 <UART_SetConfig+0x6cc>
 8003aec:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003af0:	2301      	movs	r3, #1
 8003af2:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	2200      	movs	r2, #0
 8003afe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b00:	7efb      	ldrb	r3, [r7, #27]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3728      	adds	r7, #40	; 0x28
 8003b06:	46bd      	mov	sp, r7
 8003b08:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003b0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00a      	beq.n	8003b36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685b      	ldr	r3, [r3, #4]
 8003b26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	430a      	orrs	r2, r1
 8003b34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	f003 0302 	and.w	r3, r3, #2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d00a      	beq.n	8003b58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	430a      	orrs	r2, r1
 8003b56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	f003 0304 	and.w	r3, r3, #4
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d00a      	beq.n	8003b7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	430a      	orrs	r2, r1
 8003b78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d00a      	beq.n	8003b9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba0:	f003 0310 	and.w	r3, r3, #16
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00a      	beq.n	8003bbe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	430a      	orrs	r2, r1
 8003bbc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	f003 0320 	and.w	r3, r3, #32
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d00a      	beq.n	8003be0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	689b      	ldr	r3, [r3, #8]
 8003bd0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	430a      	orrs	r2, r1
 8003bde:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d01a      	beq.n	8003c22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	430a      	orrs	r2, r1
 8003c00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c0a:	d10a      	bne.n	8003c22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00a      	beq.n	8003c44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	430a      	orrs	r2, r1
 8003c42:	605a      	str	r2, [r3, #4]
  }
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c50:	b580      	push	{r7, lr}
 8003c52:	b086      	sub	sp, #24
 8003c54:	af02      	add	r7, sp, #8
 8003c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c5e:	f7fd f8ab 	bl	8000db8 <HAL_GetTick>
 8003c62:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f003 0308 	and.w	r3, r3, #8
 8003c6e:	2b08      	cmp	r3, #8
 8003c70:	d10e      	bne.n	8003c90 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c72:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c76:	9300      	str	r3, [sp, #0]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c80:	6878      	ldr	r0, [r7, #4]
 8003c82:	f000 f82a 	bl	8003cda <UART_WaitOnFlagUntilTimeout>
 8003c86:	4603      	mov	r3, r0
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d001      	beq.n	8003c90 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c8c:	2303      	movs	r3, #3
 8003c8e:	e020      	b.n	8003cd2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f003 0304 	and.w	r3, r3, #4
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d10e      	bne.n	8003cbc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ca2:	9300      	str	r3, [sp, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f000 f814 	bl	8003cda <UART_WaitOnFlagUntilTimeout>
 8003cb2:	4603      	mov	r3, r0
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d001      	beq.n	8003cbc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cb8:	2303      	movs	r3, #3
 8003cba:	e00a      	b.n	8003cd2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2220      	movs	r2, #32
 8003cc0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2220      	movs	r2, #32
 8003cc6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	3710      	adds	r7, #16
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b084      	sub	sp, #16
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	60f8      	str	r0, [r7, #12]
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	603b      	str	r3, [r7, #0]
 8003ce6:	4613      	mov	r3, r2
 8003ce8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cea:	e05d      	b.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf2:	d059      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cf4:	f7fd f860 	bl	8000db8 <HAL_GetTick>
 8003cf8:	4602      	mov	r2, r0
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	1ad3      	subs	r3, r2, r3
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d302      	bcc.n	8003d0a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d04:	69bb      	ldr	r3, [r7, #24]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d11b      	bne.n	8003d42 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d18:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	689a      	ldr	r2, [r3, #8]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f022 0201 	bic.w	r2, r2, #1
 8003d28:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	2220      	movs	r2, #32
 8003d34:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2200      	movs	r2, #0
 8003d3a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e042      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d02b      	beq.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d5e:	d123      	bne.n	8003da8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d68:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d78:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0201 	bic.w	r2, r2, #1
 8003d88:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	2220      	movs	r2, #32
 8003d8e:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	2220      	movs	r2, #32
 8003d94:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2220      	movs	r2, #32
 8003d9a:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e00f      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69da      	ldr	r2, [r3, #28]
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	4013      	ands	r3, r2
 8003db2:	68ba      	ldr	r2, [r7, #8]
 8003db4:	429a      	cmp	r2, r3
 8003db6:	bf0c      	ite	eq
 8003db8:	2301      	moveq	r3, #1
 8003dba:	2300      	movne	r3, #0
 8003dbc:	b2db      	uxtb	r3, r3
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	79fb      	ldrb	r3, [r7, #7]
 8003dc2:	429a      	cmp	r2, r3
 8003dc4:	d092      	beq.n	8003cec <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003dc6:	2300      	movs	r3, #0
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <__libc_init_array>:
 8003dd0:	b570      	push	{r4, r5, r6, lr}
 8003dd2:	4e0d      	ldr	r6, [pc, #52]	; (8003e08 <__libc_init_array+0x38>)
 8003dd4:	4c0d      	ldr	r4, [pc, #52]	; (8003e0c <__libc_init_array+0x3c>)
 8003dd6:	1ba4      	subs	r4, r4, r6
 8003dd8:	10a4      	asrs	r4, r4, #2
 8003dda:	2500      	movs	r5, #0
 8003ddc:	42a5      	cmp	r5, r4
 8003dde:	d109      	bne.n	8003df4 <__libc_init_array+0x24>
 8003de0:	4e0b      	ldr	r6, [pc, #44]	; (8003e10 <__libc_init_array+0x40>)
 8003de2:	4c0c      	ldr	r4, [pc, #48]	; (8003e14 <__libc_init_array+0x44>)
 8003de4:	f000 f820 	bl	8003e28 <_init>
 8003de8:	1ba4      	subs	r4, r4, r6
 8003dea:	10a4      	asrs	r4, r4, #2
 8003dec:	2500      	movs	r5, #0
 8003dee:	42a5      	cmp	r5, r4
 8003df0:	d105      	bne.n	8003dfe <__libc_init_array+0x2e>
 8003df2:	bd70      	pop	{r4, r5, r6, pc}
 8003df4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003df8:	4798      	blx	r3
 8003dfa:	3501      	adds	r5, #1
 8003dfc:	e7ee      	b.n	8003ddc <__libc_init_array+0xc>
 8003dfe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e02:	4798      	blx	r3
 8003e04:	3501      	adds	r5, #1
 8003e06:	e7f2      	b.n	8003dee <__libc_init_array+0x1e>
 8003e08:	08003edc 	.word	0x08003edc
 8003e0c:	08003edc 	.word	0x08003edc
 8003e10:	08003edc 	.word	0x08003edc
 8003e14:	08003ee0 	.word	0x08003ee0

08003e18 <memset>:
 8003e18:	4402      	add	r2, r0
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d100      	bne.n	8003e22 <memset+0xa>
 8003e20:	4770      	bx	lr
 8003e22:	f803 1b01 	strb.w	r1, [r3], #1
 8003e26:	e7f9      	b.n	8003e1c <memset+0x4>

08003e28 <_init>:
 8003e28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e2a:	bf00      	nop
 8003e2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e2e:	bc08      	pop	{r3}
 8003e30:	469e      	mov	lr, r3
 8003e32:	4770      	bx	lr

08003e34 <_fini>:
 8003e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e36:	bf00      	nop
 8003e38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e3a:	bc08      	pop	{r3}
 8003e3c:	469e      	mov	lr, r3
 8003e3e:	4770      	bx	lr
