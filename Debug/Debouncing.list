
Debouncing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003cd8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08003e60  08003e60  00013e60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003f0c  08003f0c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003f0c  08003f0c  00013f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003f14  08003f14  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003f14  08003f14  00013f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003f18  08003f18  00013f18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003f1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  2000000c  08003f28  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003f28  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d509  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a70  00000000  00000000  0002d545  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  0002efb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000d08  00000000  00000000  0002fd98  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025f18  00000000  00000000  00030aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098ca  00000000  00000000  000569b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ee66d  00000000  00000000  00060282  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014e8ef  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a74  00000000  00000000  0014e96c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003e48 	.word	0x08003e48

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003e48 	.word	0x08003e48

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* each 1 mSeg */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	led2.counter++;
 80004d0:	4b1e      	ldr	r3, [pc, #120]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80004d2:	885b      	ldrh	r3, [r3, #2]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	3301      	adds	r3, #1
 80004d8:	b29a      	uxth	r2, r3
 80004da:	4b1c      	ldr	r3, [pc, #112]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80004dc:	805a      	strh	r2, [r3, #2]

	if (fsm_button.start_countdown == TRUE) {
 80004de:	4b1c      	ldr	r3, [pc, #112]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80004e0:	78db      	ldrb	r3, [r3, #3]
 80004e2:	f003 0302 	and.w	r3, r3, #2
 80004e6:	b2db      	uxtb	r3, r3
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d005      	beq.n	80004f8 <HAL_TIM_PeriodElapsedCallback+0x30>
		fsm_button.counter++;
 80004ec:	4b18      	ldr	r3, [pc, #96]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80004ee:	789b      	ldrb	r3, [r3, #2]
 80004f0:	3301      	adds	r3, #1
 80004f2:	b2da      	uxtb	r2, r3
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80004f6:	709a      	strb	r2, [r3, #2]
	}

	if (led2.counter >= led2.period && led2.start == 1) {
 80004f8:	4b14      	ldr	r3, [pc, #80]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x84>)
 80004fa:	885b      	ldrh	r3, [r3, #2]
 80004fc:	b29a      	uxth	r2, r3
 80004fe:	4b13      	ldr	r3, [pc, #76]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000500:	881b      	ldrh	r3, [r3, #0]
 8000502:	b29b      	uxth	r3, r3
 8000504:	429a      	cmp	r2, r3
 8000506:	d307      	bcc.n	8000518 <HAL_TIM_PeriodElapsedCallback+0x50>
 8000508:	4b10      	ldr	r3, [pc, #64]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x84>)
 800050a:	791b      	ldrb	r3, [r3, #4]
 800050c:	b2db      	uxtb	r3, r3
 800050e:	2b01      	cmp	r3, #1
 8000510:	d102      	bne.n	8000518 <HAL_TIM_PeriodElapsedCallback+0x50>
		//HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
		led2.counter = 0;
 8000512:	4b0e      	ldr	r3, [pc, #56]	; (800054c <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000514:	2200      	movs	r2, #0
 8000516:	805a      	strh	r2, [r3, #2]
	}
	/* 10 mSeg elapsed*/
	if (fsm_button.counter >= TICK_PERIOD) {
 8000518:	4b0d      	ldr	r3, [pc, #52]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800051a:	789b      	ldrb	r3, [r3, #2]
 800051c:	2b09      	cmp	r3, #9
 800051e:	d90f      	bls.n	8000540 <HAL_TIM_PeriodElapsedCallback+0x78>
		fsm_button.counter = 0;
 8000520:	4b0b      	ldr	r3, [pc, #44]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000522:	2200      	movs	r2, #0
 8000524:	709a      	strb	r2, [r3, #2]
		fsm_button.start_countdown = FALSE;
 8000526:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000528:	78d3      	ldrb	r3, [r2, #3]
 800052a:	f36f 0341 	bfc	r3, #1, #1
 800052e:	70d3      	strb	r3, [r2, #3]
		fsm_button.new_event = TRUE;
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000532:	78d3      	ldrb	r3, [r2, #3]
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	70d3      	strb	r3, [r2, #3]
		fsm_button.event = TICK_TIMEOUT;
 800053a:	4b05      	ldr	r3, [pc, #20]	; (8000550 <HAL_TIM_PeriodElapsedCallback+0x88>)
 800053c:	2202      	movs	r2, #2
 800053e:	705a      	strb	r2, [r3, #1]
	}
}
 8000540:	bf00      	nop
 8000542:	370c      	adds	r7, #12
 8000544:	46bd      	mov	sp, r7
 8000546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054a:	4770      	bx	lr
 800054c:	200000ec 	.word	0x200000ec
 8000550:	20000028 	.word	0x20000028

08000554 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000554:	b480      	push	{r7}
 8000556:	b083      	sub	sp, #12
 8000558:	af00      	add	r7, sp, #0
 800055a:	4603      	mov	r3, r0
 800055c:	80fb      	strh	r3, [r7, #6]
	if ( fsm_button.state == WAITING ) {
 800055e:	4b09      	ldr	r3, [pc, #36]	; (8000584 <HAL_GPIO_EXTI_Callback+0x30>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b00      	cmp	r3, #0
 8000564:	d107      	bne.n	8000576 <HAL_GPIO_EXTI_Callback+0x22>
		fsm_button.event = BUTTON_ON;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <HAL_GPIO_EXTI_Callback+0x30>)
 8000568:	2201      	movs	r2, #1
 800056a:	705a      	strb	r2, [r3, #1]
		fsm_button.new_event = TRUE;
 800056c:	4a05      	ldr	r2, [pc, #20]	; (8000584 <HAL_GPIO_EXTI_Callback+0x30>)
 800056e:	78d3      	ldrb	r3, [r2, #3]
 8000570:	f043 0301 	orr.w	r3, r3, #1
 8000574:	70d3      	strb	r3, [r2, #3]
	}
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000028 	.word	0x20000028

08000588 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */
	init_led_struct(&led2);
 800058c:	4859      	ldr	r0, [pc, #356]	; (80006f4 <main+0x16c>)
 800058e:	f000 f9fb 	bl	8000988 <init_led_struct>
	init_fsm(&fsm_button);
 8000592:	4859      	ldr	r0, [pc, #356]	; (80006f8 <main+0x170>)
 8000594:	f000 fa0c 	bl	80009b0 <init_fsm>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000598:	f000 fbb9 	bl	8000d0e <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800059c:	f000 f8b8 	bl	8000710 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005a0:	f000 f99a 	bl	80008d8 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80005a4:	f000 f968 	bl	8000878 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80005a8:	f000 f918 	bl	80007dc <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 80005ac:	4853      	ldr	r0, [pc, #332]	; (80006fc <main+0x174>)
 80005ae:	f002 fa65 	bl	8002a7c <HAL_TIM_Base_Start_IT>
	HAL_UART_Transmit(&huart2, (uint8_t *)"Initializing fsm...\n", sizeof("Initializing fsm...\n")-1, 100);
 80005b2:	2364      	movs	r3, #100	; 0x64
 80005b4:	2214      	movs	r2, #20
 80005b6:	4952      	ldr	r1, [pc, #328]	; (8000700 <main+0x178>)
 80005b8:	4852      	ldr	r0, [pc, #328]	; (8000704 <main+0x17c>)
 80005ba:	f002 feb1 	bl	8003320 <HAL_UART_Transmit>
	print_current_state(&fsm_button);
 80005be:	484e      	ldr	r0, [pc, #312]	; (80006f8 <main+0x170>)
 80005c0:	f000 fa2c 	bl	8000a1c <print_current_state>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (fsm_button.new_event == TRUE) {
 80005c4:	4b4c      	ldr	r3, [pc, #304]	; (80006f8 <main+0x170>)
 80005c6:	78db      	ldrb	r3, [r3, #3]
 80005c8:	f003 0301 	and.w	r3, r3, #1
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	f000 8086 	beq.w	80006e0 <main+0x158>
			fsm_button.new_event = FALSE;
 80005d4:	4a48      	ldr	r2, [pc, #288]	; (80006f8 <main+0x170>)
 80005d6:	78d3      	ldrb	r3, [r2, #3]
 80005d8:	f36f 0300 	bfc	r3, #0, #1
 80005dc:	70d3      	strb	r3, [r2, #3]
			switch (fsm_button.state) {
 80005de:	4b46      	ldr	r3, [pc, #280]	; (80006f8 <main+0x170>)
 80005e0:	781b      	ldrb	r3, [r3, #0]
 80005e2:	2b03      	cmp	r3, #3
 80005e4:	d872      	bhi.n	80006cc <main+0x144>
 80005e6:	a201      	add	r2, pc, #4	; (adr r2, 80005ec <main+0x64>)
 80005e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ec:	080005fd 	.word	0x080005fd
 80005f0:	0800061d 	.word	0x0800061d
 80005f4:	08000655 	.word	0x08000655
 80005f8:	08000697 	.word	0x08000697
			case WAITING:
				print_current_state(&fsm_button);
 80005fc:	483e      	ldr	r0, [pc, #248]	; (80006f8 <main+0x170>)
 80005fe:	f000 fa0d 	bl	8000a1c <print_current_state>
				if ( fsm_button.event == BUTTON_ON ) {
 8000602:	4b3d      	ldr	r3, [pc, #244]	; (80006f8 <main+0x170>)
 8000604:	785b      	ldrb	r3, [r3, #1]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d16c      	bne.n	80006e4 <main+0x15c>
					fsm_button.start_countdown = TRUE;
 800060a:	4a3b      	ldr	r2, [pc, #236]	; (80006f8 <main+0x170>)
 800060c:	78d3      	ldrb	r3, [r2, #3]
 800060e:	f043 0302 	orr.w	r3, r3, #2
 8000612:	70d3      	strb	r3, [r2, #3]
					fsm_button.state = DETECTED;
 8000614:	4b38      	ldr	r3, [pc, #224]	; (80006f8 <main+0x170>)
 8000616:	2201      	movs	r2, #1
 8000618:	701a      	strb	r2, [r3, #0]
				}
				break;
 800061a:	e063      	b.n	80006e4 <main+0x15c>
			case DETECTED:
				print_current_state(&fsm_button);
 800061c:	4836      	ldr	r0, [pc, #216]	; (80006f8 <main+0x170>)
 800061e:	f000 f9fd 	bl	8000a1c <print_current_state>
				if ( fsm_button.event == TICK_TIMEOUT ) {
 8000622:	4b35      	ldr	r3, [pc, #212]	; (80006f8 <main+0x170>)
 8000624:	785b      	ldrb	r3, [r3, #1]
 8000626:	2b02      	cmp	r3, #2
 8000628:	d15e      	bne.n	80006e8 <main+0x160>
					if (button_pressed(B1_GPIO_Port, B1_Pin)) {
 800062a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800062e:	4836      	ldr	r0, [pc, #216]	; (8000708 <main+0x180>)
 8000630:	f000 f9dc 	bl	80009ec <button_pressed>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d008      	beq.n	800064c <main+0xc4>
						fsm_button.state = WAIT_RELEASE;
 800063a:	4b2f      	ldr	r3, [pc, #188]	; (80006f8 <main+0x170>)
 800063c:	2202      	movs	r2, #2
 800063e:	701a      	strb	r2, [r3, #0]
						fsm_button.start_countdown = TRUE;
 8000640:	4a2d      	ldr	r2, [pc, #180]	; (80006f8 <main+0x170>)
 8000642:	78d3      	ldrb	r3, [r2, #3]
 8000644:	f043 0302 	orr.w	r3, r3, #2
 8000648:	70d3      	strb	r3, [r2, #3]
					} else {
						fsm_button.state = WAITING;
					}
				}
				break;
 800064a:	e04d      	b.n	80006e8 <main+0x160>
						fsm_button.state = WAITING;
 800064c:	4b2a      	ldr	r3, [pc, #168]	; (80006f8 <main+0x170>)
 800064e:	2200      	movs	r2, #0
 8000650:	701a      	strb	r2, [r3, #0]
				break;
 8000652:	e049      	b.n	80006e8 <main+0x160>
			case WAIT_RELEASE:
				print_current_state(&fsm_button);
 8000654:	4828      	ldr	r0, [pc, #160]	; (80006f8 <main+0x170>)
 8000656:	f000 f9e1 	bl	8000a1c <print_current_state>
				if ( fsm_button.event == TICK_TIMEOUT ) {
 800065a:	4b27      	ldr	r3, [pc, #156]	; (80006f8 <main+0x170>)
 800065c:	785b      	ldrb	r3, [r3, #1]
 800065e:	2b02      	cmp	r3, #2
 8000660:	d144      	bne.n	80006ec <main+0x164>
					if (!button_pressed(B1_GPIO_Port, B1_Pin)) {
 8000662:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000666:	4828      	ldr	r0, [pc, #160]	; (8000708 <main+0x180>)
 8000668:	f000 f9c0 	bl	80009ec <button_pressed>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d108      	bne.n	8000684 <main+0xfc>
						fsm_button.state = UPDATE;
 8000672:	4b21      	ldr	r3, [pc, #132]	; (80006f8 <main+0x170>)
 8000674:	2203      	movs	r2, #3
 8000676:	701a      	strb	r2, [r3, #0]
						fsm_button.start_countdown = TRUE;
 8000678:	4a1f      	ldr	r2, [pc, #124]	; (80006f8 <main+0x170>)
 800067a:	78d3      	ldrb	r3, [r2, #3]
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	70d3      	strb	r3, [r2, #3]
					} else {
						fsm_button.state = WAIT_RELEASE;
						fsm_button.start_countdown = TRUE;
					}
				}
				break;
 8000682:	e033      	b.n	80006ec <main+0x164>
						fsm_button.state = WAIT_RELEASE;
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <main+0x170>)
 8000686:	2202      	movs	r2, #2
 8000688:	701a      	strb	r2, [r3, #0]
						fsm_button.start_countdown = TRUE;
 800068a:	4a1b      	ldr	r2, [pc, #108]	; (80006f8 <main+0x170>)
 800068c:	78d3      	ldrb	r3, [r2, #3]
 800068e:	f043 0302 	orr.w	r3, r3, #2
 8000692:	70d3      	strb	r3, [r2, #3]
				break;
 8000694:	e02a      	b.n	80006ec <main+0x164>
			case UPDATE:
				print_current_state(&fsm_button);
 8000696:	4818      	ldr	r0, [pc, #96]	; (80006f8 <main+0x170>)
 8000698:	f000 f9c0 	bl	8000a1c <print_current_state>
				if ( fsm_button.event == TICK_TIMEOUT ) {
 800069c:	4b16      	ldr	r3, [pc, #88]	; (80006f8 <main+0x170>)
 800069e:	785b      	ldrb	r3, [r3, #1]
 80006a0:	2b02      	cmp	r3, #2
 80006a2:	d125      	bne.n	80006f0 <main+0x168>
					fsm_button.state = WAITING;
 80006a4:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <main+0x170>)
 80006a6:	2200      	movs	r2, #0
 80006a8:	701a      	strb	r2, [r3, #0]
					fsm_button.event = NON_EVENT;
 80006aa:	4b13      	ldr	r3, [pc, #76]	; (80006f8 <main+0x170>)
 80006ac:	2200      	movs	r2, #0
 80006ae:	705a      	strb	r2, [r3, #1]
					fsm_button.new_event = FALSE;
 80006b0:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <main+0x170>)
 80006b2:	78d3      	ldrb	r3, [r2, #3]
 80006b4:	f36f 0300 	bfc	r3, #0, #1
 80006b8:	70d3      	strb	r3, [r2, #3]
					print_current_state(&fsm_button);
 80006ba:	480f      	ldr	r0, [pc, #60]	; (80006f8 <main+0x170>)
 80006bc:	f000 f9ae 	bl	8000a1c <print_current_state>
					HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80006c0:	2120      	movs	r1, #32
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f000 fe7d 	bl	80013c4 <HAL_GPIO_TogglePin>
				}
				break;
 80006ca:	e011      	b.n	80006f0 <main+0x168>
			default:
				print_current_state(&fsm_button);
 80006cc:	480a      	ldr	r0, [pc, #40]	; (80006f8 <main+0x170>)
 80006ce:	f000 f9a5 	bl	8000a1c <print_current_state>
				HAL_UART_Transmit(&huart2, (uint8_t *)"Unknown State", sizeof("Unknown State"), 100);
 80006d2:	2364      	movs	r3, #100	; 0x64
 80006d4:	220e      	movs	r2, #14
 80006d6:	490d      	ldr	r1, [pc, #52]	; (800070c <main+0x184>)
 80006d8:	480a      	ldr	r0, [pc, #40]	; (8000704 <main+0x17c>)
 80006da:	f002 fe21 	bl	8003320 <HAL_UART_Transmit>
				break;
 80006de:	e008      	b.n	80006f2 <main+0x16a>
			}
		}
 80006e0:	bf00      	nop
 80006e2:	e76f      	b.n	80005c4 <main+0x3c>
				break;
 80006e4:	bf00      	nop
 80006e6:	e76d      	b.n	80005c4 <main+0x3c>
				break;
 80006e8:	bf00      	nop
 80006ea:	e76b      	b.n	80005c4 <main+0x3c>
				break;
 80006ec:	bf00      	nop
 80006ee:	e769      	b.n	80005c4 <main+0x3c>
				break;
 80006f0:	bf00      	nop
		if (fsm_button.new_event == TRUE) {
 80006f2:	e767      	b.n	80005c4 <main+0x3c>
 80006f4:	200000ec 	.word	0x200000ec
 80006f8:	20000028 	.word	0x20000028
 80006fc:	2000002c 	.word	0x2000002c
 8000700:	08003e60 	.word	0x08003e60
 8000704:	2000006c 	.word	0x2000006c
 8000708:	48000800 	.word	0x48000800
 800070c:	08003e78 	.word	0x08003e78

08000710 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000710:	b580      	push	{r7, lr}
 8000712:	b0b8      	sub	sp, #224	; 0xe0
 8000714:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000716:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800071a:	2244      	movs	r2, #68	; 0x44
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f003 fb8a 	bl	8003e38 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000724:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000728:	2200      	movs	r2, #0
 800072a:	601a      	str	r2, [r3, #0]
 800072c:	605a      	str	r2, [r3, #4]
 800072e:	609a      	str	r2, [r3, #8]
 8000730:	60da      	str	r2, [r3, #12]
 8000732:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000734:	463b      	mov	r3, r7
 8000736:	2288      	movs	r2, #136	; 0x88
 8000738:	2100      	movs	r1, #0
 800073a:	4618      	mov	r0, r3
 800073c:	f003 fb7c 	bl	8003e38 <memset>

	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000740:	2310      	movs	r3, #16
 8000742:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000746:	2301      	movs	r3, #1
 8000748:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_8;
 8000752:	2380      	movs	r3, #128	; 0x80
 8000754:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000758:	2300      	movs	r3, #0
 800075a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800075e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000762:	4618      	mov	r0, r3
 8000764:	f000 fec4 	bl	80014f0 <HAL_RCC_OscConfig>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d001      	beq.n	8000772 <SystemClock_Config+0x62>
	{
		Error_Handler();
 800076e:	f000 f99d 	bl	8000aac <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000772:	230f      	movs	r3, #15
 8000774:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000778:	2300      	movs	r3, #0
 800077a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800077e:	2300      	movs	r3, #0
 8000780:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000790:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000794:	2100      	movs	r1, #0
 8000796:	4618      	mov	r0, r3
 8000798:	f001 fa90 	bl	8001cbc <HAL_RCC_ClockConfig>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80007a2:	f000 f983 	bl	8000aac <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	603b      	str	r3, [r7, #0]
	PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007aa:	2300      	movs	r3, #0
 80007ac:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007ae:	463b      	mov	r3, r7
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fc87 	bl	80020c4 <HAL_RCCEx_PeriphCLKConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xb0>
	{
		Error_Handler();
 80007bc:	f000 f976 	bl	8000aac <Error_Handler>
	}
	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80007c0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80007c4:	f000 fe3e 	bl	8001444 <HAL_PWREx_ControlVoltageScaling>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <SystemClock_Config+0xc2>
	{
		Error_Handler();
 80007ce:	f000 f96d 	bl	8000aac <Error_Handler>
	}
}
 80007d2:	bf00      	nop
 80007d4:	37e0      	adds	r7, #224	; 0xe0
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b088      	sub	sp, #32
 80007e0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e2:	f107 0310 	add.w	r3, r7, #16
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	601a      	str	r2, [r3, #0]
 80007f6:	605a      	str	r2, [r3, #4]
 80007f8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80007fa:	4b1e      	ldr	r3, [pc, #120]	; (8000874 <MX_TIM2_Init+0x98>)
 80007fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000800:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 16;
 8000802:	4b1c      	ldr	r3, [pc, #112]	; (8000874 <MX_TIM2_Init+0x98>)
 8000804:	2210      	movs	r2, #16
 8000806:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b1a      	ldr	r3, [pc, #104]	; (8000874 <MX_TIM2_Init+0x98>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000;
 800080e:	4b19      	ldr	r3, [pc, #100]	; (8000874 <MX_TIM2_Init+0x98>)
 8000810:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000814:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000816:	4b17      	ldr	r3, [pc, #92]	; (8000874 <MX_TIM2_Init+0x98>)
 8000818:	2200      	movs	r2, #0
 800081a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081c:	4b15      	ldr	r3, [pc, #84]	; (8000874 <MX_TIM2_Init+0x98>)
 800081e:	2200      	movs	r2, #0
 8000820:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000822:	4814      	ldr	r0, [pc, #80]	; (8000874 <MX_TIM2_Init+0x98>)
 8000824:	f002 f8fe 	bl	8002a24 <HAL_TIM_Base_Init>
 8000828:	4603      	mov	r3, r0
 800082a:	2b00      	cmp	r3, #0
 800082c:	d001      	beq.n	8000832 <MX_TIM2_Init+0x56>
	{
		Error_Handler();
 800082e:	f000 f93d 	bl	8000aac <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000838:	f107 0310 	add.w	r3, r7, #16
 800083c:	4619      	mov	r1, r3
 800083e:	480d      	ldr	r0, [pc, #52]	; (8000874 <MX_TIM2_Init+0x98>)
 8000840:	f002 fa65 	bl	8002d0e <HAL_TIM_ConfigClockSource>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x72>
	{
		Error_Handler();
 800084a:	f000 f92f 	bl	8000aac <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	4619      	mov	r1, r3
 800085a:	4806      	ldr	r0, [pc, #24]	; (8000874 <MX_TIM2_Init+0x98>)
 800085c:	f002 fc6c 	bl	8003138 <HAL_TIMEx_MasterConfigSynchronization>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x8e>
	{
		Error_Handler();
 8000866:	f000 f921 	bl	8000aac <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800086a:	bf00      	nop
 800086c:	3720      	adds	r7, #32
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	2000002c 	.word	0x2000002c

08000878 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800087c:	4b14      	ldr	r3, [pc, #80]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800087e:	4a15      	ldr	r2, [pc, #84]	; (80008d4 <MX_USART2_UART_Init+0x5c>)
 8000880:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000882:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000884:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000888:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800088c:	2200      	movs	r2, #0
 800088e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000890:	4b0f      	ldr	r3, [pc, #60]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000892:	2200      	movs	r2, #0
 8000894:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 8000898:	2200      	movs	r2, #0
 800089a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 800089e:	220c      	movs	r2, #12
 80008a0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_USART2_UART_Init+0x58>)
 80008bc:	f002 fce2 	bl	8003284 <HAL_UART_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_USART2_UART_Init+0x52>
	{
		Error_Handler();
 80008c6:	f000 f8f1 	bl	8000aac <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000006c 	.word	0x2000006c
 80008d4:	40004400 	.word	0x40004400

080008d8 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2200      	movs	r2, #0
 80008e4:	601a      	str	r2, [r3, #0]
 80008e6:	605a      	str	r2, [r3, #4]
 80008e8:	609a      	str	r2, [r3, #8]
 80008ea:	60da      	str	r2, [r3, #12]
 80008ec:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80008ee:	4b23      	ldr	r3, [pc, #140]	; (800097c <MX_GPIO_Init+0xa4>)
 80008f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008f2:	4a22      	ldr	r2, [pc, #136]	; (800097c <MX_GPIO_Init+0xa4>)
 80008f4:	f043 0304 	orr.w	r3, r3, #4
 80008f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008fa:	4b20      	ldr	r3, [pc, #128]	; (800097c <MX_GPIO_Init+0xa4>)
 80008fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fe:	f003 0304 	and.w	r3, r3, #4
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b1d      	ldr	r3, [pc, #116]	; (800097c <MX_GPIO_Init+0xa4>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a1c      	ldr	r2, [pc, #112]	; (800097c <MX_GPIO_Init+0xa4>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_GPIO_Init+0xa4>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	2120      	movs	r1, #32
 8000922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000926:	f000 fd35 	bl	8001394 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800092a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800092e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000930:	4b13      	ldr	r3, [pc, #76]	; (8000980 <MX_GPIO_Init+0xa8>)
 8000932:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000934:	2300      	movs	r3, #0
 8000936:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000938:	f107 030c 	add.w	r3, r7, #12
 800093c:	4619      	mov	r1, r3
 800093e:	4811      	ldr	r0, [pc, #68]	; (8000984 <MX_GPIO_Init+0xac>)
 8000940:	f000 fb68 	bl	8001014 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8000944:	2320      	movs	r3, #32
 8000946:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000948:	2301      	movs	r3, #1
 800094a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000950:	2300      	movs	r3, #0
 8000952:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000954:	f107 030c 	add.w	r3, r7, #12
 8000958:	4619      	mov	r1, r3
 800095a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095e:	f000 fb59 	bl	8001014 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000962:	2200      	movs	r2, #0
 8000964:	2100      	movs	r1, #0
 8000966:	2028      	movs	r0, #40	; 0x28
 8000968:	f000 fb1d 	bl	8000fa6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800096c:	2028      	movs	r0, #40	; 0x28
 800096e:	f000 fb36 	bl	8000fde <HAL_NVIC_EnableIRQ>

}
 8000972:	bf00      	nop
 8000974:	3720      	adds	r7, #32
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	40021000 	.word	0x40021000
 8000980:	10210000 	.word	0x10210000
 8000984:	48000800 	.word	0x48000800

08000988 <init_led_struct>:

/* USER CODE BEGIN 4 */
void init_led_struct ( led_t *led ) {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
 800098e:	6078      	str	r0, [r7, #4]
	led->counter = 0;
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	2200      	movs	r2, #0
 8000994:	805a      	strh	r2, [r3, #2]
	led->period = PERIOD;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800099c:	801a      	strh	r2, [r3, #0]
	led->start = 1;
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	2201      	movs	r2, #1
 80009a2:	711a      	strb	r2, [r3, #4]
}
 80009a4:	bf00      	nop
 80009a6:	370c      	adds	r7, #12
 80009a8:	46bd      	mov	sp, r7
 80009aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ae:	4770      	bx	lr

080009b0 <init_fsm>:

void init_fsm ( fsm_t *sm ) {
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
	sm->state = WAITING;
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	2200      	movs	r2, #0
 80009bc:	701a      	strb	r2, [r3, #0]
	sm->event = NON_EVENT;
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	2200      	movs	r2, #0
 80009c2:	705a      	strb	r2, [r3, #1]
	sm->new_event = FALSE;
 80009c4:	687a      	ldr	r2, [r7, #4]
 80009c6:	78d3      	ldrb	r3, [r2, #3]
 80009c8:	f36f 0300 	bfc	r3, #0, #1
 80009cc:	70d3      	strb	r3, [r2, #3]
	sm->counter = 0;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	2200      	movs	r2, #0
 80009d2:	709a      	strb	r2, [r3, #2]
	sm->start_countdown = 0;
 80009d4:	687a      	ldr	r2, [r7, #4]
 80009d6:	78d3      	ldrb	r3, [r2, #3]
 80009d8:	f36f 0341 	bfc	r3, #1, #1
 80009dc:	70d3      	strb	r3, [r2, #3]
}
 80009de:	bf00      	nop
 80009e0:	370c      	adds	r7, #12
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <button_pressed>:

GPIO_PinState button_pressed ( GPIO_TypeDef *port, uint16_t pin ) {
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b082      	sub	sp, #8
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
 80009f4:	460b      	mov	r3, r1
 80009f6:	807b      	strh	r3, [r7, #2]
	return !HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin);
 80009f8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009fc:	4806      	ldr	r0, [pc, #24]	; (8000a18 <button_pressed+0x2c>)
 80009fe:	f000 fcb1 	bl	8001364 <HAL_GPIO_ReadPin>
 8000a02:	4603      	mov	r3, r0
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	bf0c      	ite	eq
 8000a08:	2301      	moveq	r3, #1
 8000a0a:	2300      	movne	r3, #0
 8000a0c:	b2db      	uxtb	r3, r3
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	3708      	adds	r7, #8
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	48000800 	.word	0x48000800

08000a1c <print_current_state>:

void print_current_state ( fsm_t *fsm ) {
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b082      	sub	sp, #8
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
	switch (fsm->state) {
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	2b03      	cmp	r3, #3
 8000a2a:	d827      	bhi.n	8000a7c <print_current_state+0x60>
 8000a2c:	a201      	add	r2, pc, #4	; (adr r2, 8000a34 <print_current_state+0x18>)
 8000a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a32:	bf00      	nop
 8000a34:	08000a45 	.word	0x08000a45
 8000a38:	08000a53 	.word	0x08000a53
 8000a3c:	08000a61 	.word	0x08000a61
 8000a40:	08000a6f 	.word	0x08000a6f
	case WAITING:
		HAL_UART_Transmit(&huart2, (uint8_t*)"WAITING\n", sizeof("WAITING\n")-1, 100);
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	2208      	movs	r2, #8
 8000a48:	4912      	ldr	r1, [pc, #72]	; (8000a94 <print_current_state+0x78>)
 8000a4a:	4813      	ldr	r0, [pc, #76]	; (8000a98 <print_current_state+0x7c>)
 8000a4c:	f002 fc68 	bl	8003320 <HAL_UART_Transmit>
		break;
 8000a50:	e01b      	b.n	8000a8a <print_current_state+0x6e>
	case DETECTED:
		HAL_UART_Transmit(&huart2, (uint8_t*)"DETECTED\n", sizeof("DETECTED\n")-1, 100);
 8000a52:	2364      	movs	r3, #100	; 0x64
 8000a54:	2209      	movs	r2, #9
 8000a56:	4911      	ldr	r1, [pc, #68]	; (8000a9c <print_current_state+0x80>)
 8000a58:	480f      	ldr	r0, [pc, #60]	; (8000a98 <print_current_state+0x7c>)
 8000a5a:	f002 fc61 	bl	8003320 <HAL_UART_Transmit>
		break;
 8000a5e:	e014      	b.n	8000a8a <print_current_state+0x6e>
	case WAIT_RELEASE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"WAIT FOR RELEASE\n", sizeof("WAIT FOR RELEASE\n")-1, 100);
 8000a60:	2364      	movs	r3, #100	; 0x64
 8000a62:	2211      	movs	r2, #17
 8000a64:	490e      	ldr	r1, [pc, #56]	; (8000aa0 <print_current_state+0x84>)
 8000a66:	480c      	ldr	r0, [pc, #48]	; (8000a98 <print_current_state+0x7c>)
 8000a68:	f002 fc5a 	bl	8003320 <HAL_UART_Transmit>
		break;
 8000a6c:	e00d      	b.n	8000a8a <print_current_state+0x6e>
	case UPDATE:
		HAL_UART_Transmit(&huart2, (uint8_t*)"UPDATE\n", sizeof("UPDATE\n")-1, 100);
 8000a6e:	2364      	movs	r3, #100	; 0x64
 8000a70:	2207      	movs	r2, #7
 8000a72:	490c      	ldr	r1, [pc, #48]	; (8000aa4 <print_current_state+0x88>)
 8000a74:	4808      	ldr	r0, [pc, #32]	; (8000a98 <print_current_state+0x7c>)
 8000a76:	f002 fc53 	bl	8003320 <HAL_UART_Transmit>
		break;
 8000a7a:	e006      	b.n	8000a8a <print_current_state+0x6e>
	default:
		HAL_UART_Transmit(&huart2, (uint8_t*)"ERROR\n", sizeof("ERROR\n")-1, 100);
 8000a7c:	2364      	movs	r3, #100	; 0x64
 8000a7e:	2206      	movs	r2, #6
 8000a80:	4909      	ldr	r1, [pc, #36]	; (8000aa8 <print_current_state+0x8c>)
 8000a82:	4805      	ldr	r0, [pc, #20]	; (8000a98 <print_current_state+0x7c>)
 8000a84:	f002 fc4c 	bl	8003320 <HAL_UART_Transmit>
		break;
 8000a88:	bf00      	nop
	}
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	08003e88 	.word	0x08003e88
 8000a98:	2000006c 	.word	0x2000006c
 8000a9c:	08003e94 	.word	0x08003e94
 8000aa0:	08003ea0 	.word	0x08003ea0
 8000aa4:	08003eb4 	.word	0x08003eb4
 8000aa8:	08003ebc 	.word	0x08003ebc

08000aac <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	4a0e      	ldr	r2, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	4a08      	ldr	r2, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae6:	4b06      	ldr	r3, [pc, #24]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b14:	d113      	bne.n	8000b3e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <HAL_TIM_Base_MspInit+0x44>)
 8000b18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1a:	4a0b      	ldr	r2, [pc, #44]	; (8000b48 <HAL_TIM_Base_MspInit+0x44>)
 8000b1c:	f043 0301 	orr.w	r3, r3, #1
 8000b20:	6593      	str	r3, [r2, #88]	; 0x58
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <HAL_TIM_Base_MspInit+0x44>)
 8000b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b26:	f003 0301 	and.w	r3, r3, #1
 8000b2a:	60fb      	str	r3, [r7, #12]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000b2e:	2200      	movs	r2, #0
 8000b30:	2100      	movs	r1, #0
 8000b32:	201c      	movs	r0, #28
 8000b34:	f000 fa37 	bl	8000fa6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b38:	201c      	movs	r0, #28
 8000b3a:	f000 fa50 	bl	8000fde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000b3e:	bf00      	nop
 8000b40:	3710      	adds	r7, #16
 8000b42:	46bd      	mov	sp, r7
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b08a      	sub	sp, #40	; 0x28
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0314 	add.w	r3, r7, #20
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a17      	ldr	r2, [pc, #92]	; (8000bc8 <HAL_UART_MspInit+0x7c>)
 8000b6a:	4293      	cmp	r3, r2
 8000b6c:	d128      	bne.n	8000bc0 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b6e:	4b17      	ldr	r3, [pc, #92]	; (8000bcc <HAL_UART_MspInit+0x80>)
 8000b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b72:	4a16      	ldr	r2, [pc, #88]	; (8000bcc <HAL_UART_MspInit+0x80>)
 8000b74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b78:	6593      	str	r3, [r2, #88]	; 0x58
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_UART_MspInit+0x80>)
 8000b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b82:	613b      	str	r3, [r7, #16]
 8000b84:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_UART_MspInit+0x80>)
 8000b88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8a:	4a10      	ldr	r2, [pc, #64]	; (8000bcc <HAL_UART_MspInit+0x80>)
 8000b8c:	f043 0301 	orr.w	r3, r3, #1
 8000b90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b92:	4b0e      	ldr	r3, [pc, #56]	; (8000bcc <HAL_UART_MspInit+0x80>)
 8000b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b9e:	230c      	movs	r3, #12
 8000ba0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000baa:	2303      	movs	r3, #3
 8000bac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bae:	2307      	movs	r3, #7
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb2:	f107 0314 	add.w	r3, r7, #20
 8000bb6:	4619      	mov	r1, r3
 8000bb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bbc:	f000 fa2a 	bl	8001014 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000bc0:	bf00      	nop
 8000bc2:	3728      	adds	r7, #40	; 0x28
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	40004400 	.word	0x40004400
 8000bcc:	40021000 	.word	0x40021000

08000bd0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000bd4:	bf00      	nop
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bdc:	4770      	bx	lr

08000bde <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be2:	e7fe      	b.n	8000be2 <HardFault_Handler+0x4>

08000be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000be8:	e7fe      	b.n	8000be8 <MemManage_Handler+0x4>

08000bea <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <BusFault_Handler+0x4>

08000bf0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <UsageFault_Handler+0x4>

08000bf6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bfa:	bf00      	nop
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr

08000c12 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c16:	bf00      	nop
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr

08000c20 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c24:	f000 f8c6 	bl	8000db4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c28:	bf00      	nop
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM2_IRQHandler+0x10>)
 8000c32:	f001 ff4d 	bl	8002ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	2000002c 	.word	0x2000002c

08000c40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000c48:	f000 fbd6 	bl	80013f8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c54:	4b17      	ldr	r3, [pc, #92]	; (8000cb4 <SystemInit+0x64>)
 8000c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <SystemInit+0x64>)
 8000c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000c64:	4b14      	ldr	r3, [pc, #80]	; (8000cb8 <SystemInit+0x68>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a13      	ldr	r2, [pc, #76]	; (8000cb8 <SystemInit+0x68>)
 8000c6a:	f043 0301 	orr.w	r3, r3, #1
 8000c6e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000c70:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <SystemInit+0x68>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000c76:	4b10      	ldr	r3, [pc, #64]	; (8000cb8 <SystemInit+0x68>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a0f      	ldr	r2, [pc, #60]	; (8000cb8 <SystemInit+0x68>)
 8000c7c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000c80:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000c84:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000c86:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <SystemInit+0x68>)
 8000c88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000c8e:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <SystemInit+0x68>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	4a09      	ldr	r2, [pc, #36]	; (8000cb8 <SystemInit+0x68>)
 8000c94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <SystemInit+0x68>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ca0:	4b04      	ldr	r3, [pc, #16]	; (8000cb4 <SystemInit+0x64>)
 8000ca2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ca6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ca8:	bf00      	nop
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	40021000 	.word	0x40021000

08000cbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000cbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cf4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000cc0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000cc2:	e003      	b.n	8000ccc <LoopCopyDataInit>

08000cc4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	; (8000cf8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000cc6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000cc8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000cca:	3104      	adds	r1, #4

08000ccc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000ccc:	480b      	ldr	r0, [pc, #44]	; (8000cfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000cce:	4b0c      	ldr	r3, [pc, #48]	; (8000d00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000cd0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000cd2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000cd4:	d3f6      	bcc.n	8000cc4 <CopyDataInit>
	ldr	r2, =_sbss
 8000cd6:	4a0b      	ldr	r2, [pc, #44]	; (8000d04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000cd8:	e002      	b.n	8000ce0 <LoopFillZerobss>

08000cda <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000cda:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000cdc:	f842 3b04 	str.w	r3, [r2], #4

08000ce0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <LoopForever+0x16>)
	cmp	r2, r3
 8000ce2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ce4:	d3f9      	bcc.n	8000cda <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ce6:	f7ff ffb3 	bl	8000c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000cea:	f003 f881 	bl	8003df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cee:	f7ff fc4b 	bl	8000588 <main>

08000cf2 <LoopForever>:

LoopForever:
    b LoopForever
 8000cf2:	e7fe      	b.n	8000cf2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cf4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000cf8:	08003f1c 	.word	0x08003f1c
	ldr	r0, =_sdata
 8000cfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d00:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000d04:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000d08:	200000f8 	.word	0x200000f8

08000d0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d0c:	e7fe      	b.n	8000d0c <ADC1_2_IRQHandler>

08000d0e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d0e:	b580      	push	{r7, lr}
 8000d10:	b082      	sub	sp, #8
 8000d12:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d14:	2300      	movs	r3, #0
 8000d16:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d18:	2003      	movs	r0, #3
 8000d1a:	f000 f939 	bl	8000f90 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 f80e 	bl	8000d40 <HAL_InitTick>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d002      	beq.n	8000d30 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d2a:	2301      	movs	r3, #1
 8000d2c:	71fb      	strb	r3, [r7, #7]
 8000d2e:	e001      	b.n	8000d34 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d30:	f7ff fec4 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d34:	79fb      	ldrb	r3, [r7, #7]
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	3708      	adds	r7, #8
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000d4c:	4b16      	ldr	r3, [pc, #88]	; (8000da8 <HAL_InitTick+0x68>)
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d022      	beq.n	8000d9a <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <HAL_InitTick+0x6c>)
 8000d56:	681a      	ldr	r2, [r3, #0]
 8000d58:	4b13      	ldr	r3, [pc, #76]	; (8000da8 <HAL_InitTick+0x68>)
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000d60:	fbb1 f3f3 	udiv	r3, r1, r3
 8000d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f000 f946 	bl	8000ffa <HAL_SYSTICK_Config>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d10f      	bne.n	8000d94 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b0f      	cmp	r3, #15
 8000d78:	d809      	bhi.n	8000d8e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	6879      	ldr	r1, [r7, #4]
 8000d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d82:	f000 f910 	bl	8000fa6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d86:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <HAL_InitTick+0x70>)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6013      	str	r3, [r2, #0]
 8000d8c:	e007      	b.n	8000d9e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000d8e:	2301      	movs	r3, #1
 8000d90:	73fb      	strb	r3, [r7, #15]
 8000d92:	e004      	b.n	8000d9e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	73fb      	strb	r3, [r7, #15]
 8000d98:	e001      	b.n	8000d9e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d9a:	2301      	movs	r3, #1
 8000d9c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000da0:	4618      	mov	r0, r3
 8000da2:	3710      	adds	r7, #16
 8000da4:	46bd      	mov	sp, r7
 8000da6:	bd80      	pop	{r7, pc}
 8000da8:	20000008 	.word	0x20000008
 8000dac:	20000000 	.word	0x20000000
 8000db0:	20000004 	.word	0x20000004

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b05      	ldr	r3, [pc, #20]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	4b05      	ldr	r3, [pc, #20]	; (8000dd4 <HAL_IncTick+0x20>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	4413      	add	r3, r2
 8000dc2:	4a03      	ldr	r2, [pc, #12]	; (8000dd0 <HAL_IncTick+0x1c>)
 8000dc4:	6013      	str	r3, [r2, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	200000f4 	.word	0x200000f4
 8000dd4:	20000008 	.word	0x20000008

08000dd8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  return uwTick;
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_GetTick+0x14>)
 8000dde:	681b      	ldr	r3, [r3, #0]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	200000f4 	.word	0x200000f4

08000df0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b085      	sub	sp, #20
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f003 0307 	and.w	r3, r3, #7
 8000dfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e00:	4b0c      	ldr	r3, [pc, #48]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e02:	68db      	ldr	r3, [r3, #12]
 8000e04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e06:	68ba      	ldr	r2, [r7, #8]
 8000e08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e22:	4a04      	ldr	r2, [pc, #16]	; (8000e34 <__NVIC_SetPriorityGrouping+0x44>)
 8000e24:	68bb      	ldr	r3, [r7, #8]
 8000e26:	60d3      	str	r3, [r2, #12]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e3c:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <__NVIC_GetPriorityGrouping+0x18>)
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	0a1b      	lsrs	r3, r3, #8
 8000e42:	f003 0307 	and.w	r3, r3, #7
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000ed00 	.word	0xe000ed00

08000e54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	db0b      	blt.n	8000e7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	f003 021f 	and.w	r2, r3, #31
 8000e6c:	4907      	ldr	r1, [pc, #28]	; (8000e8c <__NVIC_EnableIRQ+0x38>)
 8000e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e72:	095b      	lsrs	r3, r3, #5
 8000e74:	2001      	movs	r0, #1
 8000e76:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e7e:	bf00      	nop
 8000e80:	370c      	adds	r7, #12
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100

08000e90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	4603      	mov	r3, r0
 8000e98:	6039      	str	r1, [r7, #0]
 8000e9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	db0a      	blt.n	8000eba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	b2da      	uxtb	r2, r3
 8000ea8:	490c      	ldr	r1, [pc, #48]	; (8000edc <__NVIC_SetPriority+0x4c>)
 8000eaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eae:	0112      	lsls	r2, r2, #4
 8000eb0:	b2d2      	uxtb	r2, r2
 8000eb2:	440b      	add	r3, r1
 8000eb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000eb8:	e00a      	b.n	8000ed0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b2da      	uxtb	r2, r3
 8000ebe:	4908      	ldr	r1, [pc, #32]	; (8000ee0 <__NVIC_SetPriority+0x50>)
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	f003 030f 	and.w	r3, r3, #15
 8000ec6:	3b04      	subs	r3, #4
 8000ec8:	0112      	lsls	r2, r2, #4
 8000eca:	b2d2      	uxtb	r2, r2
 8000ecc:	440b      	add	r3, r1
 8000ece:	761a      	strb	r2, [r3, #24]
}
 8000ed0:	bf00      	nop
 8000ed2:	370c      	adds	r7, #12
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr
 8000edc:	e000e100 	.word	0xe000e100
 8000ee0:	e000ed00 	.word	0xe000ed00

08000ee4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	60f8      	str	r0, [r7, #12]
 8000eec:	60b9      	str	r1, [r7, #8]
 8000eee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	f003 0307 	and.w	r3, r3, #7
 8000ef6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	f1c3 0307 	rsb	r3, r3, #7
 8000efe:	2b04      	cmp	r3, #4
 8000f00:	bf28      	it	cs
 8000f02:	2304      	movcs	r3, #4
 8000f04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	3304      	adds	r3, #4
 8000f0a:	2b06      	cmp	r3, #6
 8000f0c:	d902      	bls.n	8000f14 <NVIC_EncodePriority+0x30>
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	3b03      	subs	r3, #3
 8000f12:	e000      	b.n	8000f16 <NVIC_EncodePriority+0x32>
 8000f14:	2300      	movs	r3, #0
 8000f16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f1c:	69bb      	ldr	r3, [r7, #24]
 8000f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f22:	43da      	mvns	r2, r3
 8000f24:	68bb      	ldr	r3, [r7, #8]
 8000f26:	401a      	ands	r2, r3
 8000f28:	697b      	ldr	r3, [r7, #20]
 8000f2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f2c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	fa01 f303 	lsl.w	r3, r1, r3
 8000f36:	43d9      	mvns	r1, r3
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f3c:	4313      	orrs	r3, r2
         );
}
 8000f3e:	4618      	mov	r0, r3
 8000f40:	3724      	adds	r7, #36	; 0x24
 8000f42:	46bd      	mov	sp, r7
 8000f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f48:	4770      	bx	lr
	...

08000f4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f5c:	d301      	bcc.n	8000f62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00f      	b.n	8000f82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f62:	4a0a      	ldr	r2, [pc, #40]	; (8000f8c <SysTick_Config+0x40>)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f6a:	210f      	movs	r1, #15
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f70:	f7ff ff8e 	bl	8000e90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f74:	4b05      	ldr	r3, [pc, #20]	; (8000f8c <SysTick_Config+0x40>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f7a:	4b04      	ldr	r3, [pc, #16]	; (8000f8c <SysTick_Config+0x40>)
 8000f7c:	2207      	movs	r2, #7
 8000f7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	e000e010 	.word	0xe000e010

08000f90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f98:	6878      	ldr	r0, [r7, #4]
 8000f9a:	f7ff ff29 	bl	8000df0 <__NVIC_SetPriorityGrouping>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	4603      	mov	r3, r0
 8000fae:	60b9      	str	r1, [r7, #8]
 8000fb0:	607a      	str	r2, [r7, #4]
 8000fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000fb8:	f7ff ff3e 	bl	8000e38 <__NVIC_GetPriorityGrouping>
 8000fbc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fbe:	687a      	ldr	r2, [r7, #4]
 8000fc0:	68b9      	ldr	r1, [r7, #8]
 8000fc2:	6978      	ldr	r0, [r7, #20]
 8000fc4:	f7ff ff8e 	bl	8000ee4 <NVIC_EncodePriority>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fce:	4611      	mov	r1, r2
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff ff5d 	bl	8000e90 <__NVIC_SetPriority>
}
 8000fd6:	bf00      	nop
 8000fd8:	3718      	adds	r7, #24
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fe8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff ff31 	bl	8000e54 <__NVIC_EnableIRQ>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}

08000ffa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b082      	sub	sp, #8
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff ffa2 	bl	8000f4c <SysTick_Config>
 8001008:	4603      	mov	r3, r0
}
 800100a:	4618      	mov	r0, r3
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
	...

08001014 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001014:	b480      	push	{r7}
 8001016:	b087      	sub	sp, #28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
 800101c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800101e:	2300      	movs	r3, #0
 8001020:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001022:	e17f      	b.n	8001324 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	681a      	ldr	r2, [r3, #0]
 8001028:	2101      	movs	r1, #1
 800102a:	697b      	ldr	r3, [r7, #20]
 800102c:	fa01 f303 	lsl.w	r3, r1, r3
 8001030:	4013      	ands	r3, r2
 8001032:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8171 	beq.w	800131e <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	2b01      	cmp	r3, #1
 8001042:	d00b      	beq.n	800105c <HAL_GPIO_Init+0x48>
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	2b02      	cmp	r3, #2
 800104a:	d007      	beq.n	800105c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001050:	2b11      	cmp	r3, #17
 8001052:	d003      	beq.n	800105c <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	2b12      	cmp	r3, #18
 800105a:	d130      	bne.n	80010be <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	689b      	ldr	r3, [r3, #8]
 8001060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001062:	697b      	ldr	r3, [r7, #20]
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	2203      	movs	r2, #3
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	693a      	ldr	r2, [r7, #16]
 8001070:	4013      	ands	r3, r2
 8001072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	68da      	ldr	r2, [r3, #12]
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	005b      	lsls	r3, r3, #1
 800107c:	fa02 f303 	lsl.w	r3, r2, r3
 8001080:	693a      	ldr	r2, [r7, #16]
 8001082:	4313      	orrs	r3, r2
 8001084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001092:	2201      	movs	r2, #1
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	fa02 f303 	lsl.w	r3, r2, r3
 800109a:	43db      	mvns	r3, r3
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	4013      	ands	r3, r2
 80010a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	091b      	lsrs	r3, r3, #4
 80010a8:	f003 0201 	and.w	r2, r3, #1
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	693a      	ldr	r2, [r7, #16]
 80010bc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80010be:	683b      	ldr	r3, [r7, #0]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	f003 0303 	and.w	r3, r3, #3
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d118      	bne.n	80010fc <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80010d0:	2201      	movs	r2, #1
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	fa02 f303 	lsl.w	r3, r2, r3
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	08db      	lsrs	r3, r3, #3
 80010e6:	f003 0201 	and.w	r2, r3, #1
 80010ea:	697b      	ldr	r3, [r7, #20]
 80010ec:	fa02 f303 	lsl.w	r3, r2, r3
 80010f0:	693a      	ldr	r2, [r7, #16]
 80010f2:	4313      	orrs	r3, r2
 80010f4:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	693a      	ldr	r2, [r7, #16]
 8001110:	4013      	ands	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	689a      	ldr	r2, [r3, #8]
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	005b      	lsls	r3, r3, #1
 800111c:	fa02 f303 	lsl.w	r3, r2, r3
 8001120:	693a      	ldr	r2, [r7, #16]
 8001122:	4313      	orrs	r3, r2
 8001124:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	693a      	ldr	r2, [r7, #16]
 800112a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	2b02      	cmp	r3, #2
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x128>
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	2b12      	cmp	r3, #18
 800113a:	d123      	bne.n	8001184 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800113c:	697b      	ldr	r3, [r7, #20]
 800113e:	08da      	lsrs	r2, r3, #3
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	3208      	adds	r2, #8
 8001144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001148:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800114a:	697b      	ldr	r3, [r7, #20]
 800114c:	f003 0307 	and.w	r3, r3, #7
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	220f      	movs	r2, #15
 8001154:	fa02 f303 	lsl.w	r3, r2, r3
 8001158:	43db      	mvns	r3, r3
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	4013      	ands	r3, r2
 800115e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	691a      	ldr	r2, [r3, #16]
 8001164:	697b      	ldr	r3, [r7, #20]
 8001166:	f003 0307 	and.w	r3, r3, #7
 800116a:	009b      	lsls	r3, r3, #2
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4313      	orrs	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	08da      	lsrs	r2, r3, #3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3208      	adds	r2, #8
 800117e:	6939      	ldr	r1, [r7, #16]
 8001180:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800118a:	697b      	ldr	r3, [r7, #20]
 800118c:	005b      	lsls	r3, r3, #1
 800118e:	2203      	movs	r2, #3
 8001190:	fa02 f303 	lsl.w	r3, r2, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	693a      	ldr	r2, [r7, #16]
 8001198:	4013      	ands	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	f003 0203 	and.w	r2, r3, #3
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 80ac 	beq.w	800131e <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011c6:	4b5e      	ldr	r3, [pc, #376]	; (8001340 <HAL_GPIO_Init+0x32c>)
 80011c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ca:	4a5d      	ldr	r2, [pc, #372]	; (8001340 <HAL_GPIO_Init+0x32c>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6613      	str	r3, [r2, #96]	; 0x60
 80011d2:	4b5b      	ldr	r3, [pc, #364]	; (8001340 <HAL_GPIO_Init+0x32c>)
 80011d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80011de:	4a59      	ldr	r2, [pc, #356]	; (8001344 <HAL_GPIO_Init+0x330>)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	3302      	adds	r3, #2
 80011e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80011ec:	697b      	ldr	r3, [r7, #20]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	220f      	movs	r2, #15
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43db      	mvns	r3, r3
 80011fc:	693a      	ldr	r2, [r7, #16]
 80011fe:	4013      	ands	r3, r2
 8001200:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x242>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4e      	ldr	r2, [pc, #312]	; (8001348 <HAL_GPIO_Init+0x334>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x23e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4d      	ldr	r2, [pc, #308]	; (800134c <HAL_GPIO_Init+0x338>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x23a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4c      	ldr	r2, [pc, #304]	; (8001350 <HAL_GPIO_Init+0x33c>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x236>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4b      	ldr	r2, [pc, #300]	; (8001354 <HAL_GPIO_Init+0x340>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x232>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4a      	ldr	r2, [pc, #296]	; (8001358 <HAL_GPIO_Init+0x344>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x22e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a49      	ldr	r2, [pc, #292]	; (800135c <HAL_GPIO_Init+0x348>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x22a>
 800123a:	2306      	movs	r3, #6
 800123c:	e00c      	b.n	8001258 <HAL_GPIO_Init+0x244>
 800123e:	2307      	movs	r3, #7
 8001240:	e00a      	b.n	8001258 <HAL_GPIO_Init+0x244>
 8001242:	2305      	movs	r3, #5
 8001244:	e008      	b.n	8001258 <HAL_GPIO_Init+0x244>
 8001246:	2304      	movs	r3, #4
 8001248:	e006      	b.n	8001258 <HAL_GPIO_Init+0x244>
 800124a:	2303      	movs	r3, #3
 800124c:	e004      	b.n	8001258 <HAL_GPIO_Init+0x244>
 800124e:	2302      	movs	r3, #2
 8001250:	e002      	b.n	8001258 <HAL_GPIO_Init+0x244>
 8001252:	2301      	movs	r3, #1
 8001254:	e000      	b.n	8001258 <HAL_GPIO_Init+0x244>
 8001256:	2300      	movs	r3, #0
 8001258:	697a      	ldr	r2, [r7, #20]
 800125a:	f002 0203 	and.w	r2, r2, #3
 800125e:	0092      	lsls	r2, r2, #2
 8001260:	4093      	lsls	r3, r2
 8001262:	693a      	ldr	r2, [r7, #16]
 8001264:	4313      	orrs	r3, r2
 8001266:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001268:	4936      	ldr	r1, [pc, #216]	; (8001344 <HAL_GPIO_Init+0x330>)
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	089b      	lsrs	r3, r3, #2
 800126e:	3302      	adds	r3, #2
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001276:	4b3a      	ldr	r3, [pc, #232]	; (8001360 <HAL_GPIO_Init+0x34c>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	43db      	mvns	r3, r3
 8001280:	693a      	ldr	r2, [r7, #16]
 8001282:	4013      	ands	r3, r2
 8001284:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128e:	2b00      	cmp	r3, #0
 8001290:	d003      	beq.n	800129a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	4313      	orrs	r3, r2
 8001298:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800129a:	4a31      	ldr	r2, [pc, #196]	; (8001360 <HAL_GPIO_Init+0x34c>)
 800129c:	693b      	ldr	r3, [r7, #16]
 800129e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80012a0:	4b2f      	ldr	r3, [pc, #188]	; (8001360 <HAL_GPIO_Init+0x34c>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	43db      	mvns	r3, r3
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	4013      	ands	r3, r2
 80012ae:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d003      	beq.n	80012c4 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <HAL_GPIO_Init+0x34c>)
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80012ca:	4b25      	ldr	r3, [pc, #148]	; (8001360 <HAL_GPIO_Init+0x34c>)
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	43db      	mvns	r3, r3
 80012d4:	693a      	ldr	r2, [r7, #16]
 80012d6:	4013      	ands	r3, r2
 80012d8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d003      	beq.n	80012ee <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80012ee:	4a1c      	ldr	r2, [pc, #112]	; (8001360 <HAL_GPIO_Init+0x34c>)
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80012f4:	4b1a      	ldr	r3, [pc, #104]	; (8001360 <HAL_GPIO_Init+0x34c>)
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	43db      	mvns	r3, r3
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	4013      	ands	r3, r2
 8001302:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130c:	2b00      	cmp	r3, #0
 800130e:	d003      	beq.n	8001318 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001310:	693a      	ldr	r2, [r7, #16]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	4313      	orrs	r3, r2
 8001316:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001318:	4a11      	ldr	r2, [pc, #68]	; (8001360 <HAL_GPIO_Init+0x34c>)
 800131a:	693b      	ldr	r3, [r7, #16]
 800131c:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	3301      	adds	r3, #1
 8001322:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	fa22 f303 	lsr.w	r3, r2, r3
 800132e:	2b00      	cmp	r3, #0
 8001330:	f47f ae78 	bne.w	8001024 <HAL_GPIO_Init+0x10>
  }
}
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	48000400 	.word	0x48000400
 800134c:	48000800 	.word	0x48000800
 8001350:	48000c00 	.word	0x48000c00
 8001354:	48001000 	.word	0x48001000
 8001358:	48001400 	.word	0x48001400
 800135c:	48001800 	.word	0x48001800
 8001360:	40010400 	.word	0x40010400

08001364 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
 800136c:	460b      	mov	r3, r1
 800136e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	691a      	ldr	r2, [r3, #16]
 8001374:	887b      	ldrh	r3, [r7, #2]
 8001376:	4013      	ands	r3, r2
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800137c:	2301      	movs	r3, #1
 800137e:	73fb      	strb	r3, [r7, #15]
 8001380:	e001      	b.n	8001386 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001386:	7bfb      	ldrb	r3, [r7, #15]
}
 8001388:	4618      	mov	r0, r3
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001394:	b480      	push	{r7}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
 800139c:	460b      	mov	r3, r1
 800139e:	807b      	strh	r3, [r7, #2]
 80013a0:	4613      	mov	r3, r2
 80013a2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80013a4:	787b      	ldrb	r3, [r7, #1]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d003      	beq.n	80013b2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013aa:	887a      	ldrh	r2, [r7, #2]
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80013b0:	e002      	b.n	80013b8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013b2:	887a      	ldrh	r2, [r7, #2]
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
 80013cc:	460b      	mov	r3, r1
 80013ce:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	695a      	ldr	r2, [r3, #20]
 80013d4:	887b      	ldrh	r3, [r7, #2]
 80013d6:	4013      	ands	r3, r2
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d003      	beq.n	80013e4 <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80013dc:	887a      	ldrh	r2, [r7, #2]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80013e2:	e002      	b.n	80013ea <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80013e4:	887a      	ldrh	r2, [r7, #2]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	619a      	str	r2, [r3, #24]
}
 80013ea:	bf00      	nop
 80013ec:	370c      	adds	r7, #12
 80013ee:	46bd      	mov	sp, r7
 80013f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f4:	4770      	bx	lr
	...

080013f8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b082      	sub	sp, #8
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	4603      	mov	r3, r0
 8001400:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001402:	4b08      	ldr	r3, [pc, #32]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001404:	695a      	ldr	r2, [r3, #20]
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4013      	ands	r3, r2
 800140a:	2b00      	cmp	r3, #0
 800140c:	d006      	beq.n	800141c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800140e:	4a05      	ldr	r2, [pc, #20]	; (8001424 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001410:	88fb      	ldrh	r3, [r7, #6]
 8001412:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff f89c 	bl	8000554 <HAL_GPIO_EXTI_Callback>
  }
}
 800141c:	bf00      	nop
 800141e:	3708      	adds	r7, #8
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40010400 	.word	0x40010400

08001428 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800142c:	4b04      	ldr	r3, [pc, #16]	; (8001440 <HAL_PWREx_GetVoltageRange+0x18>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001434:	4618      	mov	r0, r3
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr
 800143e:	bf00      	nop
 8001440:	40007000 	.word	0x40007000

08001444 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001452:	d130      	bne.n	80014b6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001454:	4b23      	ldr	r3, [pc, #140]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800145c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001460:	d038      	beq.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001462:	4b20      	ldr	r3, [pc, #128]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800146a:	4a1e      	ldr	r2, [pc, #120]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800146c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001470:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001472:	4b1d      	ldr	r3, [pc, #116]	; (80014e8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	2232      	movs	r2, #50	; 0x32
 8001478:	fb02 f303 	mul.w	r3, r2, r3
 800147c:	4a1b      	ldr	r2, [pc, #108]	; (80014ec <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800147e:	fba2 2303 	umull	r2, r3, r2, r3
 8001482:	0c9b      	lsrs	r3, r3, #18
 8001484:	3301      	adds	r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001488:	e002      	b.n	8001490 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3b01      	subs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001490:	4b14      	ldr	r3, [pc, #80]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001492:	695b      	ldr	r3, [r3, #20]
 8001494:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800149c:	d102      	bne.n	80014a4 <HAL_PWREx_ControlVoltageScaling+0x60>
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d1f2      	bne.n	800148a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014a6:	695b      	ldr	r3, [r3, #20]
 80014a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014b0:	d110      	bne.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e00f      	b.n	80014d6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80014b6:	4b0b      	ldr	r3, [pc, #44]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014c2:	d007      	beq.n	80014d4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80014c4:	4b07      	ldr	r3, [pc, #28]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014cc:	4a05      	ldr	r2, [pc, #20]	; (80014e4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80014d2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	40007000 	.word	0x40007000
 80014e8:	20000000 	.word	0x20000000
 80014ec:	431bde83 	.word	0x431bde83

080014f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b088      	sub	sp, #32
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d101      	bne.n	8001502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e3d4      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001502:	4ba1      	ldr	r3, [pc, #644]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f003 030c 	and.w	r3, r3, #12
 800150a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800150c:	4b9e      	ldr	r3, [pc, #632]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	f003 0303 	and.w	r3, r3, #3
 8001514:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0310 	and.w	r3, r3, #16
 800151e:	2b00      	cmp	r3, #0
 8001520:	f000 80e4 	beq.w	80016ec <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001524:	69bb      	ldr	r3, [r7, #24]
 8001526:	2b00      	cmp	r3, #0
 8001528:	d007      	beq.n	800153a <HAL_RCC_OscConfig+0x4a>
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	2b0c      	cmp	r3, #12
 800152e:	f040 808b 	bne.w	8001648 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001532:	697b      	ldr	r3, [r7, #20]
 8001534:	2b01      	cmp	r3, #1
 8001536:	f040 8087 	bne.w	8001648 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800153a:	4b93      	ldr	r3, [pc, #588]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d005      	beq.n	8001552 <HAL_RCC_OscConfig+0x62>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	699b      	ldr	r3, [r3, #24]
 800154a:	2b00      	cmp	r3, #0
 800154c:	d101      	bne.n	8001552 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800154e:	2301      	movs	r3, #1
 8001550:	e3ac      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1a      	ldr	r2, [r3, #32]
 8001556:	4b8c      	ldr	r3, [pc, #560]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	2b00      	cmp	r3, #0
 8001560:	d004      	beq.n	800156c <HAL_RCC_OscConfig+0x7c>
 8001562:	4b89      	ldr	r3, [pc, #548]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800156a:	e005      	b.n	8001578 <HAL_RCC_OscConfig+0x88>
 800156c:	4b86      	ldr	r3, [pc, #536]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800156e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001572:	091b      	lsrs	r3, r3, #4
 8001574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001578:	4293      	cmp	r3, r2
 800157a:	d223      	bcs.n	80015c4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a1b      	ldr	r3, [r3, #32]
 8001580:	4618      	mov	r0, r3
 8001582:	f000 fd3f 	bl	8002004 <RCC_SetFlashLatencyFromMSIRange>
 8001586:	4603      	mov	r3, r0
 8001588:	2b00      	cmp	r3, #0
 800158a:	d001      	beq.n	8001590 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e38d      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001590:	4b7d      	ldr	r3, [pc, #500]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a7c      	ldr	r2, [pc, #496]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001596:	f043 0308 	orr.w	r3, r3, #8
 800159a:	6013      	str	r3, [r2, #0]
 800159c:	4b7a      	ldr	r3, [pc, #488]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a1b      	ldr	r3, [r3, #32]
 80015a8:	4977      	ldr	r1, [pc, #476]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ae:	4b76      	ldr	r3, [pc, #472]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	021b      	lsls	r3, r3, #8
 80015bc:	4972      	ldr	r1, [pc, #456]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015be:	4313      	orrs	r3, r2
 80015c0:	604b      	str	r3, [r1, #4]
 80015c2:	e025      	b.n	8001610 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015c4:	4b70      	ldr	r3, [pc, #448]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a6f      	ldr	r2, [pc, #444]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015ca:	f043 0308 	orr.w	r3, r3, #8
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b6d      	ldr	r3, [pc, #436]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	496a      	ldr	r1, [pc, #424]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015de:	4313      	orrs	r3, r2
 80015e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e2:	4b69      	ldr	r3, [pc, #420]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	69db      	ldr	r3, [r3, #28]
 80015ee:	021b      	lsls	r3, r3, #8
 80015f0:	4965      	ldr	r1, [pc, #404]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80015f2:	4313      	orrs	r3, r2
 80015f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d109      	bne.n	8001610 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fcff 	bl	8002004 <RCC_SetFlashLatencyFromMSIRange>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e34d      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001610:	f000 fc36 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001614:	4601      	mov	r1, r0
 8001616:	4b5c      	ldr	r3, [pc, #368]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	091b      	lsrs	r3, r3, #4
 800161c:	f003 030f 	and.w	r3, r3, #15
 8001620:	4a5a      	ldr	r2, [pc, #360]	; (800178c <HAL_RCC_OscConfig+0x29c>)
 8001622:	5cd3      	ldrb	r3, [r2, r3]
 8001624:	f003 031f 	and.w	r3, r3, #31
 8001628:	fa21 f303 	lsr.w	r3, r1, r3
 800162c:	4a58      	ldr	r2, [pc, #352]	; (8001790 <HAL_RCC_OscConfig+0x2a0>)
 800162e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001630:	4b58      	ldr	r3, [pc, #352]	; (8001794 <HAL_RCC_OscConfig+0x2a4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fb83 	bl	8000d40 <HAL_InitTick>
 800163a:	4603      	mov	r3, r0
 800163c:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800163e:	7bfb      	ldrb	r3, [r7, #15]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d052      	beq.n	80016ea <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	e331      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	699b      	ldr	r3, [r3, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d032      	beq.n	80016b6 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001650:	4b4d      	ldr	r3, [pc, #308]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a4c      	ldr	r2, [pc, #304]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800165c:	f7ff fbbc 	bl	8000dd8 <HAL_GetTick>
 8001660:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001662:	e008      	b.n	8001676 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001664:	f7ff fbb8 	bl	8000dd8 <HAL_GetTick>
 8001668:	4602      	mov	r2, r0
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	1ad3      	subs	r3, r2, r3
 800166e:	2b02      	cmp	r3, #2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e31a      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001676:	4b44      	ldr	r3, [pc, #272]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f003 0302 	and.w	r3, r3, #2
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0f0      	beq.n	8001664 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001682:	4b41      	ldr	r3, [pc, #260]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a40      	ldr	r2, [pc, #256]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001688:	f043 0308 	orr.w	r3, r3, #8
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	4b3e      	ldr	r3, [pc, #248]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6a1b      	ldr	r3, [r3, #32]
 800169a:	493b      	ldr	r1, [pc, #236]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800169c:	4313      	orrs	r3, r2
 800169e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016a0:	4b39      	ldr	r3, [pc, #228]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69db      	ldr	r3, [r3, #28]
 80016ac:	021b      	lsls	r3, r3, #8
 80016ae:	4936      	ldr	r1, [pc, #216]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	604b      	str	r3, [r1, #4]
 80016b4:	e01a      	b.n	80016ec <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016b6:	4b34      	ldr	r3, [pc, #208]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a33      	ldr	r2, [pc, #204]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80016bc:	f023 0301 	bic.w	r3, r3, #1
 80016c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016c2:	f7ff fb89 	bl	8000dd8 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016ca:	f7ff fb85 	bl	8000dd8 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e2e7      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80016dc:	4b2a      	ldr	r3, [pc, #168]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0302 	and.w	r3, r3, #2
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x1da>
 80016e8:	e000      	b.n	80016ec <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80016ea:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0301 	and.w	r3, r3, #1
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d074      	beq.n	80017e2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	d005      	beq.n	800170a <HAL_RCC_OscConfig+0x21a>
 80016fe:	69bb      	ldr	r3, [r7, #24]
 8001700:	2b0c      	cmp	r3, #12
 8001702:	d10e      	bne.n	8001722 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b03      	cmp	r3, #3
 8001708:	d10b      	bne.n	8001722 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800170a:	4b1f      	ldr	r3, [pc, #124]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001712:	2b00      	cmp	r3, #0
 8001714:	d064      	beq.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	2b00      	cmp	r3, #0
 800171c:	d160      	bne.n	80017e0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e2c4      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800172a:	d106      	bne.n	800173a <HAL_RCC_OscConfig+0x24a>
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a15      	ldr	r2, [pc, #84]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001732:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	e01d      	b.n	8001776 <HAL_RCC_OscConfig+0x286>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001742:	d10c      	bne.n	800175e <HAL_RCC_OscConfig+0x26e>
 8001744:	4b10      	ldr	r3, [pc, #64]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a0f      	ldr	r2, [pc, #60]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800174a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b0d      	ldr	r3, [pc, #52]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	4a0c      	ldr	r2, [pc, #48]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800175a:	6013      	str	r3, [r2, #0]
 800175c:	e00b      	b.n	8001776 <HAL_RCC_OscConfig+0x286>
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a09      	ldr	r2, [pc, #36]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001764:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001768:	6013      	str	r3, [r2, #0]
 800176a:	4b07      	ldr	r3, [pc, #28]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a06      	ldr	r2, [pc, #24]	; (8001788 <HAL_RCC_OscConfig+0x298>)
 8001770:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001774:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01c      	beq.n	80017b8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177e:	f7ff fb2b 	bl	8000dd8 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001784:	e011      	b.n	80017aa <HAL_RCC_OscConfig+0x2ba>
 8001786:	bf00      	nop
 8001788:	40021000 	.word	0x40021000
 800178c:	08003ec4 	.word	0x08003ec4
 8001790:	20000000 	.word	0x20000000
 8001794:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001798:	f7ff fb1e 	bl	8000dd8 <HAL_GetTick>
 800179c:	4602      	mov	r2, r0
 800179e:	693b      	ldr	r3, [r7, #16]
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	2b64      	cmp	r3, #100	; 0x64
 80017a4:	d901      	bls.n	80017aa <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80017a6:	2303      	movs	r3, #3
 80017a8:	e280      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017aa:	4baf      	ldr	r3, [pc, #700]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d0f0      	beq.n	8001798 <HAL_RCC_OscConfig+0x2a8>
 80017b6:	e014      	b.n	80017e2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b8:	f7ff fb0e 	bl	8000dd8 <HAL_GetTick>
 80017bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017be:	e008      	b.n	80017d2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c0:	f7ff fb0a 	bl	8000dd8 <HAL_GetTick>
 80017c4:	4602      	mov	r2, r0
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	2b64      	cmp	r3, #100	; 0x64
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e26c      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80017d2:	4ba5      	ldr	r3, [pc, #660]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d1f0      	bne.n	80017c0 <HAL_RCC_OscConfig+0x2d0>
 80017de:	e000      	b.n	80017e2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f003 0302 	and.w	r3, r3, #2
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d060      	beq.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	2b04      	cmp	r3, #4
 80017f2:	d005      	beq.n	8001800 <HAL_RCC_OscConfig+0x310>
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d119      	bne.n	800182e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d116      	bne.n	800182e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001800:	4b99      	ldr	r3, [pc, #612]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001808:	2b00      	cmp	r3, #0
 800180a:	d005      	beq.n	8001818 <HAL_RCC_OscConfig+0x328>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e249      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001818:	4b93      	ldr	r3, [pc, #588]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	691b      	ldr	r3, [r3, #16]
 8001824:	061b      	lsls	r3, r3, #24
 8001826:	4990      	ldr	r1, [pc, #576]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001828:	4313      	orrs	r3, r2
 800182a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800182c:	e040      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d023      	beq.n	800187e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001836:	4b8c      	ldr	r3, [pc, #560]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a8b      	ldr	r2, [pc, #556]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 800183c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001842:	f7ff fac9 	bl	8000dd8 <HAL_GetTick>
 8001846:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001848:	e008      	b.n	800185c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800184a:	f7ff fac5 	bl	8000dd8 <HAL_GetTick>
 800184e:	4602      	mov	r2, r0
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	2b02      	cmp	r3, #2
 8001856:	d901      	bls.n	800185c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001858:	2303      	movs	r3, #3
 800185a:	e227      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800185c:	4b82      	ldr	r3, [pc, #520]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001864:	2b00      	cmp	r3, #0
 8001866:	d0f0      	beq.n	800184a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001868:	4b7f      	ldr	r3, [pc, #508]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	061b      	lsls	r3, r3, #24
 8001876:	497c      	ldr	r1, [pc, #496]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001878:	4313      	orrs	r3, r2
 800187a:	604b      	str	r3, [r1, #4]
 800187c:	e018      	b.n	80018b0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800187e:	4b7a      	ldr	r3, [pc, #488]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a79      	ldr	r2, [pc, #484]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001884:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001888:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff faa5 	bl	8000dd8 <HAL_GetTick>
 800188e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001890:	e008      	b.n	80018a4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001892:	f7ff faa1 	bl	8000dd8 <HAL_GetTick>
 8001896:	4602      	mov	r2, r0
 8001898:	693b      	ldr	r3, [r7, #16]
 800189a:	1ad3      	subs	r3, r2, r3
 800189c:	2b02      	cmp	r3, #2
 800189e:	d901      	bls.n	80018a4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e203      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80018a4:	4b70      	ldr	r3, [pc, #448]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d1f0      	bne.n	8001892 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f003 0308 	and.w	r3, r3, #8
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d03c      	beq.n	8001936 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	695b      	ldr	r3, [r3, #20]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d01c      	beq.n	80018fe <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80018c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ca:	4a67      	ldr	r2, [pc, #412]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d4:	f7ff fa80 	bl	8000dd8 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fa7c 	bl	8000dd8 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1de      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018ee:	4b5e      	ldr	r3, [pc, #376]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80018f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0ef      	beq.n	80018dc <HAL_RCC_OscConfig+0x3ec>
 80018fc:	e01b      	b.n	8001936 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018fe:	4b5a      	ldr	r3, [pc, #360]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001900:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001904:	4a58      	ldr	r2, [pc, #352]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001906:	f023 0301 	bic.w	r3, r3, #1
 800190a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190e:	f7ff fa63 	bl	8000dd8 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001916:	f7ff fa5f 	bl	8000dd8 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1c1      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001928:	4b4f      	ldr	r3, [pc, #316]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 800192a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1ef      	bne.n	8001916 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0304 	and.w	r3, r3, #4
 800193e:	2b00      	cmp	r3, #0
 8001940:	f000 80a6 	beq.w	8001a90 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001948:	4b47      	ldr	r3, [pc, #284]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 800194a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800194c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10d      	bne.n	8001970 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	4b44      	ldr	r3, [pc, #272]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001958:	4a43      	ldr	r2, [pc, #268]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 800195a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800195e:	6593      	str	r3, [r2, #88]	; 0x58
 8001960:	4b41      	ldr	r3, [pc, #260]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001968:	60bb      	str	r3, [r7, #8]
 800196a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800196c:	2301      	movs	r3, #1
 800196e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001970:	4b3e      	ldr	r3, [pc, #248]	; (8001a6c <HAL_RCC_OscConfig+0x57c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001978:	2b00      	cmp	r3, #0
 800197a:	d118      	bne.n	80019ae <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800197c:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x57c>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <HAL_RCC_OscConfig+0x57c>)
 8001982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001986:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001988:	f7ff fa26 	bl	8000dd8 <HAL_GetTick>
 800198c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800198e:	e008      	b.n	80019a2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001990:	f7ff fa22 	bl	8000dd8 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	2b02      	cmp	r3, #2
 800199c:	d901      	bls.n	80019a2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800199e:	2303      	movs	r3, #3
 80019a0:	e184      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019a2:	4b32      	ldr	r3, [pc, #200]	; (8001a6c <HAL_RCC_OscConfig+0x57c>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d0f0      	beq.n	8001990 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	689b      	ldr	r3, [r3, #8]
 80019b2:	2b01      	cmp	r3, #1
 80019b4:	d108      	bne.n	80019c8 <HAL_RCC_OscConfig+0x4d8>
 80019b6:	4b2c      	ldr	r3, [pc, #176]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80019b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019bc:	4a2a      	ldr	r2, [pc, #168]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80019be:	f043 0301 	orr.w	r3, r3, #1
 80019c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019c6:	e024      	b.n	8001a12 <HAL_RCC_OscConfig+0x522>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b05      	cmp	r3, #5
 80019ce:	d110      	bne.n	80019f2 <HAL_RCC_OscConfig+0x502>
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80019d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d6:	4a24      	ldr	r2, [pc, #144]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80019d8:	f043 0304 	orr.w	r3, r3, #4
 80019dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019e0:	4b21      	ldr	r3, [pc, #132]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80019e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e6:	4a20      	ldr	r2, [pc, #128]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019f0:	e00f      	b.n	8001a12 <HAL_RCC_OscConfig+0x522>
 80019f2:	4b1d      	ldr	r3, [pc, #116]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80019f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f8:	4a1b      	ldr	r2, [pc, #108]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 80019fa:	f023 0301 	bic.w	r3, r3, #1
 80019fe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a02:	4b19      	ldr	r3, [pc, #100]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a08:	4a17      	ldr	r2, [pc, #92]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001a0a:	f023 0304 	bic.w	r3, r3, #4
 8001a0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d016      	beq.n	8001a48 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f9dd 	bl	8000dd8 <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a20:	e00a      	b.n	8001a38 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a22:	f7ff f9d9 	bl	8000dd8 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a30:	4293      	cmp	r3, r2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e139      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_OscConfig+0x578>)
 8001a3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d0ed      	beq.n	8001a22 <HAL_RCC_OscConfig+0x532>
 8001a46:	e01a      	b.n	8001a7e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a48:	f7ff f9c6 	bl	8000dd8 <HAL_GetTick>
 8001a4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a4e:	e00f      	b.n	8001a70 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a50:	f7ff f9c2 	bl	8000dd8 <HAL_GetTick>
 8001a54:	4602      	mov	r2, r0
 8001a56:	693b      	ldr	r3, [r7, #16]
 8001a58:	1ad3      	subs	r3, r2, r3
 8001a5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d906      	bls.n	8001a70 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e122      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
 8001a66:	bf00      	nop
 8001a68:	40021000 	.word	0x40021000
 8001a6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001a70:	4b90      	ldr	r3, [pc, #576]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d1e8      	bne.n	8001a50 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a7e:	7ffb      	ldrb	r3, [r7, #31]
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d105      	bne.n	8001a90 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a84:	4b8b      	ldr	r3, [pc, #556]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a88:	4a8a      	ldr	r2, [pc, #552]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001a8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a8e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	f000 8108 	beq.w	8001caa <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	f040 80d0 	bne.w	8001c44 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001aa4:	4b83      	ldr	r3, [pc, #524]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001aa6:	68db      	ldr	r3, [r3, #12]
 8001aa8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	f003 0203 	and.w	r2, r3, #3
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d130      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	3b01      	subs	r3, #1
 8001ac4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac6:	429a      	cmp	r2, r3
 8001ac8:	d127      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad4:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ad6:	429a      	cmp	r2, r3
 8001ad8:	d11f      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001ada:	697b      	ldr	r3, [r7, #20]
 8001adc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ae4:	2a07      	cmp	r2, #7
 8001ae6:	bf14      	ite	ne
 8001ae8:	2201      	movne	r2, #1
 8001aea:	2200      	moveq	r2, #0
 8001aec:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d113      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001afc:	085b      	lsrs	r3, r3, #1
 8001afe:	3b01      	subs	r3, #1
 8001b00:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d109      	bne.n	8001b1a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b10:	085b      	lsrs	r3, r3, #1
 8001b12:	3b01      	subs	r3, #1
 8001b14:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d06e      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	2b0c      	cmp	r3, #12
 8001b1e:	d069      	beq.n	8001bf4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001b20:	4b64      	ldr	r3, [pc, #400]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001b2c:	4b61      	ldr	r3, [pc, #388]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	e0b7      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001b3c:	4b5d      	ldr	r3, [pc, #372]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a5c      	ldr	r2, [pc, #368]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001b42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b46:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001b48:	f7ff f946 	bl	8000dd8 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff f942 	bl	8000dd8 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e0a4      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b62:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b6e:	4b51      	ldr	r3, [pc, #324]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001b70:	68da      	ldr	r2, [r3, #12]
 8001b72:	4b51      	ldr	r3, [pc, #324]	; (8001cb8 <HAL_RCC_OscConfig+0x7c8>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	687a      	ldr	r2, [r7, #4]
 8001b78:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001b7a:	687a      	ldr	r2, [r7, #4]
 8001b7c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001b7e:	3a01      	subs	r2, #1
 8001b80:	0112      	lsls	r2, r2, #4
 8001b82:	4311      	orrs	r1, r2
 8001b84:	687a      	ldr	r2, [r7, #4]
 8001b86:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b88:	0212      	lsls	r2, r2, #8
 8001b8a:	4311      	orrs	r1, r2
 8001b8c:	687a      	ldr	r2, [r7, #4]
 8001b8e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b90:	0852      	lsrs	r2, r2, #1
 8001b92:	3a01      	subs	r2, #1
 8001b94:	0552      	lsls	r2, r2, #21
 8001b96:	4311      	orrs	r1, r2
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b9c:	0852      	lsrs	r2, r2, #1
 8001b9e:	3a01      	subs	r2, #1
 8001ba0:	0652      	lsls	r2, r2, #25
 8001ba2:	4311      	orrs	r1, r2
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ba8:	0912      	lsrs	r2, r2, #4
 8001baa:	0452      	lsls	r2, r2, #17
 8001bac:	430a      	orrs	r2, r1
 8001bae:	4941      	ldr	r1, [pc, #260]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b3f      	ldr	r3, [pc, #252]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a3e      	ldr	r2, [pc, #248]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001bba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bbe:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001bc0:	4b3c      	ldr	r3, [pc, #240]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001bc2:	68db      	ldr	r3, [r3, #12]
 8001bc4:	4a3b      	ldr	r2, [pc, #236]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001bc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bca:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bcc:	f7ff f904 	bl	8000dd8 <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7ff f900 	bl	8000dd8 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e062      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001be6:	4b33      	ldr	r3, [pc, #204]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d0f0      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001bf2:	e05a      	b.n	8001caa <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	e059      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d152      	bne.n	8001caa <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c04:	4b2b      	ldr	r3, [pc, #172]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	4a2a      	ldr	r2, [pc, #168]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c0e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c10:	4b28      	ldr	r3, [pc, #160]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	4a27      	ldr	r2, [pc, #156]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c1a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c1c:	f7ff f8dc 	bl	8000dd8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c24:	f7ff f8d8 	bl	8000dd8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e03a      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c36:	4b1f      	ldr	r3, [pc, #124]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d0f0      	beq.n	8001c24 <HAL_RCC_OscConfig+0x734>
 8001c42:	e032      	b.n	8001caa <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c44:	69bb      	ldr	r3, [r7, #24]
 8001c46:	2b0c      	cmp	r3, #12
 8001c48:	d02d      	beq.n	8001ca6 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c4a:	4b1a      	ldr	r3, [pc, #104]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a19      	ldr	r2, [pc, #100]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c50:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c54:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001c56:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d105      	bne.n	8001c6e <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001c62:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c68:	f023 0303 	bic.w	r3, r3, #3
 8001c6c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c74:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001c78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c7c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c7e:	f7ff f8ab 	bl	8000dd8 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c84:	e008      	b.n	8001c98 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c86:	f7ff f8a7 	bl	8000dd8 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d901      	bls.n	8001c98 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001c94:	2303      	movs	r3, #3
 8001c96:	e009      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <HAL_RCC_OscConfig+0x7c4>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d1f0      	bne.n	8001c86 <HAL_RCC_OscConfig+0x796>
 8001ca4:	e001      	b.n	8001caa <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001caa:	2300      	movs	r3, #0
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3720      	adds	r7, #32
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	f99d808c 	.word	0xf99d808c

08001cbc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b084      	sub	sp, #16
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d101      	bne.n	8001cd0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e0c8      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd0:	4b66      	ldr	r3, [pc, #408]	; (8001e6c <HAL_RCC_ClockConfig+0x1b0>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f003 0307 	and.w	r3, r3, #7
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d910      	bls.n	8001d00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cde:	4b63      	ldr	r3, [pc, #396]	; (8001e6c <HAL_RCC_ClockConfig+0x1b0>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	f023 0207 	bic.w	r2, r3, #7
 8001ce6:	4961      	ldr	r1, [pc, #388]	; (8001e6c <HAL_RCC_ClockConfig+0x1b0>)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cee:	4b5f      	ldr	r3, [pc, #380]	; (8001e6c <HAL_RCC_ClockConfig+0x1b0>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d001      	beq.n	8001d00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e0b0      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f003 0301 	and.w	r3, r3, #1
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d04c      	beq.n	8001da6 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d107      	bne.n	8001d24 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d14:	4b56      	ldr	r3, [pc, #344]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d121      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001d20:	2301      	movs	r3, #1
 8001d22:	e09e      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	2b02      	cmp	r3, #2
 8001d2a:	d107      	bne.n	8001d3c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d2c:	4b50      	ldr	r3, [pc, #320]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d115      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e092      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d107      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d44:	4b4a      	ldr	r3, [pc, #296]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d109      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e086      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001d54:	4b46      	ldr	r3, [pc, #280]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001d60:	2301      	movs	r3, #1
 8001d62:	e07e      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001d64:	4b42      	ldr	r3, [pc, #264]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	f023 0203 	bic.w	r2, r3, #3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	493f      	ldr	r1, [pc, #252]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d72:	4313      	orrs	r3, r2
 8001d74:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d76:	f7ff f82f 	bl	8000dd8 <HAL_GetTick>
 8001d7a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d7c:	e00a      	b.n	8001d94 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7e:	f7ff f82b 	bl	8000dd8 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d8c:	4293      	cmp	r3, r2
 8001d8e:	d901      	bls.n	8001d94 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001d90:	2303      	movs	r3, #3
 8001d92:	e066      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d94:	4b36      	ldr	r3, [pc, #216]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001d96:	689b      	ldr	r3, [r3, #8]
 8001d98:	f003 020c 	and.w	r2, r3, #12
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d1eb      	bne.n	8001d7e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0302 	and.w	r3, r3, #2
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d008      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001db2:	4b2f      	ldr	r3, [pc, #188]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	689b      	ldr	r3, [r3, #8]
 8001dbe:	492c      	ldr	r1, [pc, #176]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc0:	4313      	orrs	r3, r2
 8001dc2:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dc4:	4b29      	ldr	r3, [pc, #164]	; (8001e6c <HAL_RCC_ClockConfig+0x1b0>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0307 	and.w	r3, r3, #7
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d210      	bcs.n	8001df4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd2:	4b26      	ldr	r3, [pc, #152]	; (8001e6c <HAL_RCC_ClockConfig+0x1b0>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f023 0207 	bic.w	r2, r3, #7
 8001dda:	4924      	ldr	r1, [pc, #144]	; (8001e6c <HAL_RCC_ClockConfig+0x1b0>)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	4313      	orrs	r3, r2
 8001de0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001de2:	4b22      	ldr	r3, [pc, #136]	; (8001e6c <HAL_RCC_ClockConfig+0x1b0>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0307 	and.w	r3, r3, #7
 8001dea:	683a      	ldr	r2, [r7, #0]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d001      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e036      	b.n	8001e62 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0304 	and.w	r3, r3, #4
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d008      	beq.n	8001e12 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e00:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4918      	ldr	r1, [pc, #96]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001e0e:	4313      	orrs	r3, r2
 8001e10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d009      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e1e:	4b14      	ldr	r3, [pc, #80]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	00db      	lsls	r3, r3, #3
 8001e2c:	4910      	ldr	r1, [pc, #64]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001e32:	f000 f825 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001e36:	4601      	mov	r1, r0
 8001e38:	4b0d      	ldr	r3, [pc, #52]	; (8001e70 <HAL_RCC_ClockConfig+0x1b4>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	091b      	lsrs	r3, r3, #4
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	4a0c      	ldr	r2, [pc, #48]	; (8001e74 <HAL_RCC_ClockConfig+0x1b8>)
 8001e44:	5cd3      	ldrb	r3, [r2, r3]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001e4e:	4a0a      	ldr	r2, [pc, #40]	; (8001e78 <HAL_RCC_ClockConfig+0x1bc>)
 8001e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e52:	4b0a      	ldr	r3, [pc, #40]	; (8001e7c <HAL_RCC_ClockConfig+0x1c0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe ff72 	bl	8000d40 <HAL_InitTick>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	72fb      	strb	r3, [r7, #11]

  return status;
 8001e60:	7afb      	ldrb	r3, [r7, #11]
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40022000 	.word	0x40022000
 8001e70:	40021000 	.word	0x40021000
 8001e74:	08003ec4 	.word	0x08003ec4
 8001e78:	20000000 	.word	0x20000000
 8001e7c:	20000004 	.word	0x20000004

08001e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b089      	sub	sp, #36	; 0x24
 8001e84:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e8e:	4b3d      	ldr	r3, [pc, #244]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 030c 	and.w	r3, r3, #12
 8001e96:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e98:	4b3a      	ldr	r3, [pc, #232]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001e9a:	68db      	ldr	r3, [r3, #12]
 8001e9c:	f003 0303 	and.w	r3, r3, #3
 8001ea0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d005      	beq.n	8001eb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001ea8:	693b      	ldr	r3, [r7, #16]
 8001eaa:	2b0c      	cmp	r3, #12
 8001eac:	d121      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d11e      	bne.n	8001ef2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001eb4:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d107      	bne.n	8001ed0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ec0:	4b30      	ldr	r3, [pc, #192]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ec2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec6:	0a1b      	lsrs	r3, r3, #8
 8001ec8:	f003 030f 	and.w	r3, r3, #15
 8001ecc:	61fb      	str	r3, [r7, #28]
 8001ece:	e005      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ed0:	4b2c      	ldr	r3, [pc, #176]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	091b      	lsrs	r3, r3, #4
 8001ed6:	f003 030f 	and.w	r3, r3, #15
 8001eda:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001edc:	4a2a      	ldr	r2, [pc, #168]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ede:	69fb      	ldr	r3, [r7, #28]
 8001ee0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ee4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d10d      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001eec:	69fb      	ldr	r3, [r7, #28]
 8001eee:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ef0:	e00a      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	2b04      	cmp	r3, #4
 8001ef6:	d102      	bne.n	8001efe <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef8:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001efa:	61bb      	str	r3, [r7, #24]
 8001efc:	e004      	b.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	2b08      	cmp	r3, #8
 8001f02:	d101      	bne.n	8001f08 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f04:	4b22      	ldr	r3, [pc, #136]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f06:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f08:	693b      	ldr	r3, [r7, #16]
 8001f0a:	2b0c      	cmp	r3, #12
 8001f0c:	d133      	bne.n	8001f76 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f0e:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	f003 0303 	and.w	r3, r3, #3
 8001f16:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d002      	beq.n	8001f24 <HAL_RCC_GetSysClockFreq+0xa4>
 8001f1e:	2b03      	cmp	r3, #3
 8001f20:	d003      	beq.n	8001f2a <HAL_RCC_GetSysClockFreq+0xaa>
 8001f22:	e005      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001f24:	4b19      	ldr	r3, [pc, #100]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f26:	617b      	str	r3, [r7, #20]
      break;
 8001f28:	e005      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001f2a:	4b19      	ldr	r3, [pc, #100]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f2c:	617b      	str	r3, [r7, #20]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001f30:	69fb      	ldr	r3, [r7, #28]
 8001f32:	617b      	str	r3, [r7, #20]
      break;
 8001f34:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	091b      	lsrs	r3, r3, #4
 8001f3c:	f003 0307 	and.w	r3, r3, #7
 8001f40:	3301      	adds	r3, #1
 8001f42:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f44:	4b0f      	ldr	r3, [pc, #60]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f46:	68db      	ldr	r3, [r3, #12]
 8001f48:	0a1b      	lsrs	r3, r3, #8
 8001f4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f4e:	697a      	ldr	r2, [r7, #20]
 8001f50:	fb02 f203 	mul.w	r2, r2, r3
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f5a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f5c:	4b09      	ldr	r3, [pc, #36]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x104>)
 8001f5e:	68db      	ldr	r3, [r3, #12]
 8001f60:	0e5b      	lsrs	r3, r3, #25
 8001f62:	f003 0303 	and.w	r3, r3, #3
 8001f66:	3301      	adds	r3, #1
 8001f68:	005b      	lsls	r3, r3, #1
 8001f6a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f6c:	697a      	ldr	r2, [r7, #20]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f74:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f76:	69bb      	ldr	r3, [r7, #24]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3724      	adds	r7, #36	; 0x24
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f82:	4770      	bx	lr
 8001f84:	40021000 	.word	0x40021000
 8001f88:	08003edc 	.word	0x08003edc
 8001f8c:	00f42400 	.word	0x00f42400
 8001f90:	007a1200 	.word	0x007a1200

08001f94 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f94:	b480      	push	{r7}
 8001f96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f98:	4b03      	ldr	r3, [pc, #12]	; (8001fa8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
}
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	20000000 	.word	0x20000000

08001fac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001fb0:	f7ff fff0 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fb4:	4601      	mov	r1, r0
 8001fb6:	4b06      	ldr	r3, [pc, #24]	; (8001fd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001fb8:	689b      	ldr	r3, [r3, #8]
 8001fba:	0a1b      	lsrs	r3, r3, #8
 8001fbc:	f003 0307 	and.w	r3, r3, #7
 8001fc0:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001fc2:	5cd3      	ldrb	r3, [r2, r3]
 8001fc4:	f003 031f 	and.w	r3, r3, #31
 8001fc8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40021000 	.word	0x40021000
 8001fd4:	08003ed4 	.word	0x08003ed4

08001fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001fdc:	f7ff ffda 	bl	8001f94 <HAL_RCC_GetHCLKFreq>
 8001fe0:	4601      	mov	r1, r0
 8001fe2:	4b06      	ldr	r3, [pc, #24]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	0adb      	lsrs	r3, r3, #11
 8001fe8:	f003 0307 	and.w	r3, r3, #7
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001fee:	5cd3      	ldrb	r3, [r2, r3]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	08003ed4 	.word	0x08003ed4

08002004 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b086      	sub	sp, #24
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800200c:	2300      	movs	r3, #0
 800200e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002010:	4b2a      	ldr	r3, [pc, #168]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d003      	beq.n	8002024 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800201c:	f7ff fa04 	bl	8001428 <HAL_PWREx_GetVoltageRange>
 8002020:	6178      	str	r0, [r7, #20]
 8002022:	e014      	b.n	800204e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002024:	4b25      	ldr	r3, [pc, #148]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	4a24      	ldr	r2, [pc, #144]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800202a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800202e:	6593      	str	r3, [r2, #88]	; 0x58
 8002030:	4b22      	ldr	r3, [pc, #136]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002032:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002034:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002038:	60fb      	str	r3, [r7, #12]
 800203a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800203c:	f7ff f9f4 	bl	8001428 <HAL_PWREx_GetVoltageRange>
 8002040:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002042:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002044:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002048:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800204c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002054:	d10b      	bne.n	800206e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2b80      	cmp	r3, #128	; 0x80
 800205a:	d919      	bls.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2ba0      	cmp	r3, #160	; 0xa0
 8002060:	d902      	bls.n	8002068 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002062:	2302      	movs	r3, #2
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	e013      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002068:	2301      	movs	r3, #1
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	e010      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b80      	cmp	r3, #128	; 0x80
 8002072:	d902      	bls.n	800207a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002074:	2303      	movs	r3, #3
 8002076:	613b      	str	r3, [r7, #16]
 8002078:	e00a      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2b80      	cmp	r3, #128	; 0x80
 800207e:	d102      	bne.n	8002086 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002080:	2302      	movs	r3, #2
 8002082:	613b      	str	r3, [r7, #16]
 8002084:	e004      	b.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2b70      	cmp	r3, #112	; 0x70
 800208a:	d101      	bne.n	8002090 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800208c:	2301      	movs	r3, #1
 800208e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002090:	4b0b      	ldr	r3, [pc, #44]	; (80020c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f023 0207 	bic.w	r2, r3, #7
 8002098:	4909      	ldr	r1, [pc, #36]	; (80020c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	4313      	orrs	r3, r2
 800209e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80020a0:	4b07      	ldr	r3, [pc, #28]	; (80020c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0307 	and.w	r3, r3, #7
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d001      	beq.n	80020b2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e000      	b.n	80020b4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80020b2:	2300      	movs	r3, #0
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3718      	adds	r7, #24
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	40021000 	.word	0x40021000
 80020c0:	40022000 	.word	0x40022000

080020c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80020cc:	2300      	movs	r3, #0
 80020ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020d0:	2300      	movs	r3, #0
 80020d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d03f      	beq.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e8:	d01c      	beq.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80020ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020ee:	d802      	bhi.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d00e      	beq.n	8002112 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80020f4:	e01f      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80020f6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80020fa:	d003      	beq.n	8002104 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80020fc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002100:	d01c      	beq.n	800213c <HAL_RCCEx_PeriphCLKConfig+0x78>
 8002102:	e018      	b.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002104:	4b85      	ldr	r3, [pc, #532]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	4a84      	ldr	r2, [pc, #528]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800210a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210e:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002110:	e015      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	3304      	adds	r3, #4
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f000 fab9 	bl	8002690 <RCCEx_PLLSAI1_Config>
 800211e:	4603      	mov	r3, r0
 8002120:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002122:	e00c      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	3320      	adds	r3, #32
 8002128:	2100      	movs	r1, #0
 800212a:	4618      	mov	r0, r3
 800212c:	f000 fba0 	bl	8002870 <RCCEx_PLLSAI2_Config>
 8002130:	4603      	mov	r3, r0
 8002132:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002134:	e003      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	74fb      	strb	r3, [r7, #19]
      break;
 800213a:	e000      	b.n	800213e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800213c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	2b00      	cmp	r3, #0
 8002142:	d10b      	bne.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002144:	4b75      	ldr	r3, [pc, #468]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002146:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002152:	4972      	ldr	r1, [pc, #456]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002154:	4313      	orrs	r3, r2
 8002156:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800215a:	e001      	b.n	8002160 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800215c:	7cfb      	ldrb	r3, [r7, #19]
 800215e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002168:	2b00      	cmp	r3, #0
 800216a:	d03f      	beq.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002170:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002174:	d01c      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002176:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800217a:	d802      	bhi.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800217c:	2b00      	cmp	r3, #0
 800217e:	d00e      	beq.n	800219e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002180:	e01f      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002182:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002186:	d003      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002188:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800218c:	d01c      	beq.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800218e:	e018      	b.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002190:	4b62      	ldr	r3, [pc, #392]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	4a61      	ldr	r2, [pc, #388]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002196:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800219a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800219c:	e015      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 fa73 	bl	8002690 <RCCEx_PLLSAI1_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021ae:	e00c      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	3320      	adds	r3, #32
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 fb5a 	bl	8002870 <RCCEx_PLLSAI2_Config>
 80021bc:	4603      	mov	r3, r0
 80021be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80021c0:	e003      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021c2:	2301      	movs	r3, #1
 80021c4:	74fb      	strb	r3, [r7, #19]
      break;
 80021c6:	e000      	b.n	80021ca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80021c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021ca:	7cfb      	ldrb	r3, [r7, #19]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10b      	bne.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80021d0:	4b52      	ldr	r3, [pc, #328]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021de:	494f      	ldr	r1, [pc, #316]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021e6:	e001      	b.n	80021ec <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e8:	7cfb      	ldrb	r3, [r7, #19]
 80021ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	f000 80a0 	beq.w	800233a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021fa:	2300      	movs	r3, #0
 80021fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80021fe:	4b47      	ldr	r3, [pc, #284]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002200:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800220a:	2301      	movs	r3, #1
 800220c:	e000      	b.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800220e:	2300      	movs	r3, #0
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00d      	beq.n	8002230 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002214:	4b41      	ldr	r3, [pc, #260]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002218:	4a40      	ldr	r2, [pc, #256]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800221a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800221e:	6593      	str	r3, [r2, #88]	; 0x58
 8002220:	4b3e      	ldr	r3, [pc, #248]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	60bb      	str	r3, [r7, #8]
 800222a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800222c:	2301      	movs	r3, #1
 800222e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002230:	4b3b      	ldr	r3, [pc, #236]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	4a3a      	ldr	r2, [pc, #232]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002236:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800223a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800223c:	f7fe fdcc 	bl	8000dd8 <HAL_GetTick>
 8002240:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002242:	e009      	b.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002244:	f7fe fdc8 	bl	8000dd8 <HAL_GetTick>
 8002248:	4602      	mov	r2, r0
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	1ad3      	subs	r3, r2, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d902      	bls.n	8002258 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002252:	2303      	movs	r3, #3
 8002254:	74fb      	strb	r3, [r7, #19]
        break;
 8002256:	e005      	b.n	8002264 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002258:	4b31      	ldr	r3, [pc, #196]	; (8002320 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002260:	2b00      	cmp	r3, #0
 8002262:	d0ef      	beq.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002264:	7cfb      	ldrb	r3, [r7, #19]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d15c      	bne.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800226a:	4b2c      	ldr	r3, [pc, #176]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800226c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002270:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002274:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002276:	697b      	ldr	r3, [r7, #20]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d01f      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002282:	697a      	ldr	r2, [r7, #20]
 8002284:	429a      	cmp	r2, r3
 8002286:	d019      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002288:	4b24      	ldr	r3, [pc, #144]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002292:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002294:	4b21      	ldr	r3, [pc, #132]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229a:	4a20      	ldr	r2, [pc, #128]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800229c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022aa:	4a1c      	ldr	r2, [pc, #112]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022ac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80022b4:	4a19      	ldr	r2, [pc, #100]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022b6:	697b      	ldr	r3, [r7, #20]
 80022b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f003 0301 	and.w	r3, r3, #1
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d016      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c6:	f7fe fd87 	bl	8000dd8 <HAL_GetTick>
 80022ca:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022cc:	e00b      	b.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022ce:	f7fe fd83 	bl	8000dd8 <HAL_GetTick>
 80022d2:	4602      	mov	r2, r0
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80022dc:	4293      	cmp	r3, r2
 80022de:	d902      	bls.n	80022e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80022e0:	2303      	movs	r3, #3
 80022e2:	74fb      	strb	r3, [r7, #19]
            break;
 80022e4:	e006      	b.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80022e6:	4b0d      	ldr	r3, [pc, #52]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022ec:	f003 0302 	and.w	r3, r3, #2
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d0ec      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80022f4:	7cfb      	ldrb	r3, [r7, #19]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d10c      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80022fa:	4b08      	ldr	r3, [pc, #32]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230a:	4904      	ldr	r1, [pc, #16]	; (800231c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002312:	e009      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002314:	7cfb      	ldrb	r3, [r7, #19]
 8002316:	74bb      	strb	r3, [r7, #18]
 8002318:	e006      	b.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800231a:	bf00      	nop
 800231c:	40021000 	.word	0x40021000
 8002320:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002324:	7cfb      	ldrb	r3, [r7, #19]
 8002326:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002328:	7c7b      	ldrb	r3, [r7, #17]
 800232a:	2b01      	cmp	r3, #1
 800232c:	d105      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800232e:	4b9e      	ldr	r3, [pc, #632]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002332:	4a9d      	ldr	r2, [pc, #628]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002334:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002338:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	d00a      	beq.n	800235c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002346:	4b98      	ldr	r3, [pc, #608]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002348:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800234c:	f023 0203 	bic.w	r2, r3, #3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002354:	4994      	ldr	r1, [pc, #592]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002356:	4313      	orrs	r3, r2
 8002358:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d00a      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002368:	4b8f      	ldr	r3, [pc, #572]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800236a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236e:	f023 020c 	bic.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002376:	498c      	ldr	r1, [pc, #560]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002378:	4313      	orrs	r3, r2
 800237a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0304 	and.w	r3, r3, #4
 8002386:	2b00      	cmp	r3, #0
 8002388:	d00a      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800238a:	4b87      	ldr	r3, [pc, #540]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800238c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002390:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002398:	4983      	ldr	r1, [pc, #524]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0308 	and.w	r3, r3, #8
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d00a      	beq.n	80023c2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023ac:	4b7e      	ldr	r3, [pc, #504]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	497b      	ldr	r1, [pc, #492]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023bc:	4313      	orrs	r3, r2
 80023be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0310 	and.w	r3, r3, #16
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d00a      	beq.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023ce:	4b76      	ldr	r3, [pc, #472]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023dc:	4972      	ldr	r1, [pc, #456]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f003 0320 	and.w	r3, r3, #32
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d00a      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023f0:	4b6d      	ldr	r3, [pc, #436]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80023f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023f6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023fe:	496a      	ldr	r1, [pc, #424]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800240e:	2b00      	cmp	r3, #0
 8002410:	d00a      	beq.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002412:	4b65      	ldr	r3, [pc, #404]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002414:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002418:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002420:	4961      	ldr	r1, [pc, #388]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002422:	4313      	orrs	r3, r2
 8002424:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00a      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002434:	4b5c      	ldr	r3, [pc, #368]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002442:	4959      	ldr	r1, [pc, #356]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002444:	4313      	orrs	r3, r2
 8002446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002452:	2b00      	cmp	r3, #0
 8002454:	d00a      	beq.n	800246c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002456:	4b54      	ldr	r3, [pc, #336]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002458:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800245c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002464:	4950      	ldr	r1, [pc, #320]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002466:	4313      	orrs	r3, r2
 8002468:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002474:	2b00      	cmp	r3, #0
 8002476:	d00a      	beq.n	800248e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002478:	4b4b      	ldr	r3, [pc, #300]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800247a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800247e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002486:	4948      	ldr	r1, [pc, #288]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800249a:	4b43      	ldr	r3, [pc, #268]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800249c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a8:	493f      	ldr	r1, [pc, #252]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024aa:	4313      	orrs	r3, r2
 80024ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d028      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80024bc:	4b3a      	ldr	r3, [pc, #232]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ca:	4937      	ldr	r1, [pc, #220]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024cc:	4313      	orrs	r3, r2
 80024ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80024da:	d106      	bne.n	80024ea <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80024dc:	4b32      	ldr	r3, [pc, #200]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024de:	68db      	ldr	r3, [r3, #12]
 80024e0:	4a31      	ldr	r2, [pc, #196]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80024e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024e6:	60d3      	str	r3, [r2, #12]
 80024e8:	e011      	b.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80024ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80024f2:	d10c      	bne.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	3304      	adds	r3, #4
 80024f8:	2101      	movs	r1, #1
 80024fa:	4618      	mov	r0, r3
 80024fc:	f000 f8c8 	bl	8002690 <RCCEx_PLLSAI1_Config>
 8002500:	4603      	mov	r3, r0
 8002502:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002504:	7cfb      	ldrb	r3, [r7, #19]
 8002506:	2b00      	cmp	r3, #0
 8002508:	d001      	beq.n	800250e <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800250a:	7cfb      	ldrb	r3, [r7, #19]
 800250c:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002516:	2b00      	cmp	r3, #0
 8002518:	d028      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800251a:	4b23      	ldr	r3, [pc, #140]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800251c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002520:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002528:	491f      	ldr	r1, [pc, #124]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800252a:	4313      	orrs	r3, r2
 800252c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002534:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002538:	d106      	bne.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800253a:	4b1b      	ldr	r3, [pc, #108]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253c:	68db      	ldr	r3, [r3, #12]
 800253e:	4a1a      	ldr	r2, [pc, #104]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002544:	60d3      	str	r3, [r2, #12]
 8002546:	e011      	b.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800254c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002550:	d10c      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	3304      	adds	r3, #4
 8002556:	2101      	movs	r1, #1
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f899 	bl	8002690 <RCCEx_PLLSAI1_Config>
 800255e:	4603      	mov	r3, r0
 8002560:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002562:	7cfb      	ldrb	r3, [r7, #19]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d001      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002568:	7cfb      	ldrb	r3, [r7, #19]
 800256a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d02b      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002578:	4b0b      	ldr	r3, [pc, #44]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002586:	4908      	ldr	r1, [pc, #32]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002588:	4313      	orrs	r3, r2
 800258a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002592:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002596:	d109      	bne.n	80025ac <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002598:	4b03      	ldr	r3, [pc, #12]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4a02      	ldr	r2, [pc, #8]	; (80025a8 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800259e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025a2:	60d3      	str	r3, [r2, #12]
 80025a4:	e014      	b.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80025a6:	bf00      	nop
 80025a8:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025b4:	d10c      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	3304      	adds	r3, #4
 80025ba:	2101      	movs	r1, #1
 80025bc:	4618      	mov	r0, r3
 80025be:	f000 f867 	bl	8002690 <RCCEx_PLLSAI1_Config>
 80025c2:	4603      	mov	r3, r0
 80025c4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025c6:	7cfb      	ldrb	r3, [r7, #19]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d001      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80025cc:	7cfb      	ldrb	r3, [r7, #19]
 80025ce:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d02f      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025dc:	4b2b      	ldr	r3, [pc, #172]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025ea:	4928      	ldr	r1, [pc, #160]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80025ec:	4313      	orrs	r3, r2
 80025ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80025f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80025fa:	d10d      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	3304      	adds	r3, #4
 8002600:	2102      	movs	r1, #2
 8002602:	4618      	mov	r0, r3
 8002604:	f000 f844 	bl	8002690 <RCCEx_PLLSAI1_Config>
 8002608:	4603      	mov	r3, r0
 800260a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800260c:	7cfb      	ldrb	r3, [r7, #19]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d014      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002612:	7cfb      	ldrb	r3, [r7, #19]
 8002614:	74bb      	strb	r3, [r7, #18]
 8002616:	e011      	b.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800261c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002620:	d10c      	bne.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	3320      	adds	r3, #32
 8002626:	2102      	movs	r1, #2
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f921 	bl	8002870 <RCCEx_PLLSAI2_Config>
 800262e:	4603      	mov	r3, r0
 8002630:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002632:	7cfb      	ldrb	r3, [r7, #19]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d001      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002638:	7cfb      	ldrb	r3, [r7, #19]
 800263a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002648:	4b10      	ldr	r3, [pc, #64]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002656:	490d      	ldr	r1, [pc, #52]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00b      	beq.n	8002682 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800267a:	4904      	ldr	r1, [pc, #16]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800267c:	4313      	orrs	r3, r2
 800267e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002682:	7cbb      	ldrb	r3, [r7, #18]
}
 8002684:	4618      	mov	r0, r3
 8002686:	3718      	adds	r7, #24
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000

08002690 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
 8002698:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800269a:	2300      	movs	r3, #0
 800269c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800269e:	4b73      	ldr	r3, [pc, #460]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026a0:	68db      	ldr	r3, [r3, #12]
 80026a2:	f003 0303 	and.w	r3, r3, #3
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d018      	beq.n	80026dc <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026aa:	4b70      	ldr	r3, [pc, #448]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	f003 0203 	and.w	r2, r3, #3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d10d      	bne.n	80026d6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
       ||
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d009      	beq.n	80026d6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026c2:	4b6a      	ldr	r3, [pc, #424]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	091b      	lsrs	r3, r3, #4
 80026c8:	f003 0307 	and.w	r3, r3, #7
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
       ||
 80026d2:	429a      	cmp	r2, r3
 80026d4:	d044      	beq.n	8002760 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	e041      	b.n	8002760 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d00c      	beq.n	80026fe <RCCEx_PLLSAI1_Config+0x6e>
 80026e4:	2b03      	cmp	r3, #3
 80026e6:	d013      	beq.n	8002710 <RCCEx_PLLSAI1_Config+0x80>
 80026e8:	2b01      	cmp	r3, #1
 80026ea:	d120      	bne.n	800272e <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026ec:	4b5f      	ldr	r3, [pc, #380]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0302 	and.w	r3, r3, #2
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d11d      	bne.n	8002734 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fc:	e01a      	b.n	8002734 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026fe:	4b5b      	ldr	r3, [pc, #364]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002706:	2b00      	cmp	r3, #0
 8002708:	d116      	bne.n	8002738 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800270a:	2301      	movs	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800270e:	e013      	b.n	8002738 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002710:	4b56      	ldr	r3, [pc, #344]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d10f      	bne.n	800273c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800271c:	4b53      	ldr	r3, [pc, #332]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d109      	bne.n	800273c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8002728:	2301      	movs	r3, #1
 800272a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800272c:	e006      	b.n	800273c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
      break;
 8002732:	e004      	b.n	800273e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002734:	bf00      	nop
 8002736:	e002      	b.n	800273e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002738:	bf00      	nop
 800273a:	e000      	b.n	800273e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800273c:	bf00      	nop
    }

    if(status == HAL_OK)
 800273e:	7bfb      	ldrb	r3, [r7, #15]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d10d      	bne.n	8002760 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002744:	4b49      	ldr	r3, [pc, #292]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6819      	ldr	r1, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	3b01      	subs	r3, #1
 8002756:	011b      	lsls	r3, r3, #4
 8002758:	430b      	orrs	r3, r1
 800275a:	4944      	ldr	r1, [pc, #272]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 800275c:	4313      	orrs	r3, r2
 800275e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	d17d      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002766:	4b41      	ldr	r3, [pc, #260]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a40      	ldr	r2, [pc, #256]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 800276c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002770:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002772:	f7fe fb31 	bl	8000dd8 <HAL_GetTick>
 8002776:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002778:	e009      	b.n	800278e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800277a:	f7fe fb2d 	bl	8000dd8 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d902      	bls.n	800278e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	73fb      	strb	r3, [r7, #15]
        break;
 800278c:	e005      	b.n	800279a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800278e:	4b37      	ldr	r3, [pc, #220]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ef      	bne.n	800277a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800279a:	7bfb      	ldrb	r3, [r7, #15]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d160      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d111      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027a6:	4b31      	ldr	r3, [pc, #196]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80027ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	6892      	ldr	r2, [r2, #8]
 80027b6:	0211      	lsls	r1, r2, #8
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	68d2      	ldr	r2, [r2, #12]
 80027bc:	0912      	lsrs	r2, r2, #4
 80027be:	0452      	lsls	r2, r2, #17
 80027c0:	430a      	orrs	r2, r1
 80027c2:	492a      	ldr	r1, [pc, #168]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027c4:	4313      	orrs	r3, r2
 80027c6:	610b      	str	r3, [r1, #16]
 80027c8:	e027      	b.n	800281a <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	2b01      	cmp	r3, #1
 80027ce:	d112      	bne.n	80027f6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027d0:	4b26      	ldr	r3, [pc, #152]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027d2:	691b      	ldr	r3, [r3, #16]
 80027d4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027dc:	687a      	ldr	r2, [r7, #4]
 80027de:	6892      	ldr	r2, [r2, #8]
 80027e0:	0211      	lsls	r1, r2, #8
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	6912      	ldr	r2, [r2, #16]
 80027e6:	0852      	lsrs	r2, r2, #1
 80027e8:	3a01      	subs	r2, #1
 80027ea:	0552      	lsls	r2, r2, #21
 80027ec:	430a      	orrs	r2, r1
 80027ee:	491f      	ldr	r1, [pc, #124]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	610b      	str	r3, [r1, #16]
 80027f4:	e011      	b.n	800281a <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027f6:	4b1d      	ldr	r3, [pc, #116]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 80027f8:	691b      	ldr	r3, [r3, #16]
 80027fa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027fe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002802:	687a      	ldr	r2, [r7, #4]
 8002804:	6892      	ldr	r2, [r2, #8]
 8002806:	0211      	lsls	r1, r2, #8
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	6952      	ldr	r2, [r2, #20]
 800280c:	0852      	lsrs	r2, r2, #1
 800280e:	3a01      	subs	r2, #1
 8002810:	0652      	lsls	r2, r2, #25
 8002812:	430a      	orrs	r2, r1
 8002814:	4915      	ldr	r1, [pc, #84]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002816:	4313      	orrs	r3, r2
 8002818:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800281a:	4b14      	ldr	r3, [pc, #80]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a13      	ldr	r2, [pc, #76]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002820:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002824:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002826:	f7fe fad7 	bl	8000dd8 <HAL_GetTick>
 800282a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800282c:	e009      	b.n	8002842 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800282e:	f7fe fad3 	bl	8000dd8 <HAL_GetTick>
 8002832:	4602      	mov	r2, r0
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	1ad3      	subs	r3, r2, r3
 8002838:	2b02      	cmp	r3, #2
 800283a:	d902      	bls.n	8002842 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	73fb      	strb	r3, [r7, #15]
          break;
 8002840:	e005      	b.n	800284e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002842:	4b0a      	ldr	r3, [pc, #40]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0ef      	beq.n	800282e <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 800284e:	7bfb      	ldrb	r3, [r7, #15]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d106      	bne.n	8002862 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002854:	4b05      	ldr	r3, [pc, #20]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	699b      	ldr	r3, [r3, #24]
 800285c:	4903      	ldr	r1, [pc, #12]	; (800286c <RCCEx_PLLSAI1_Config+0x1dc>)
 800285e:	4313      	orrs	r3, r2
 8002860:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3710      	adds	r7, #16
 8002868:	46bd      	mov	sp, r7
 800286a:	bd80      	pop	{r7, pc}
 800286c:	40021000 	.word	0x40021000

08002870 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800287a:	2300      	movs	r3, #0
 800287c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800287e:	4b68      	ldr	r3, [pc, #416]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	f003 0303 	and.w	r3, r3, #3
 8002886:	2b00      	cmp	r3, #0
 8002888:	d018      	beq.n	80028bc <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800288a:	4b65      	ldr	r3, [pc, #404]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 800288c:	68db      	ldr	r3, [r3, #12]
 800288e:	f003 0203 	and.w	r2, r3, #3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	429a      	cmp	r2, r3
 8002898:	d10d      	bne.n	80028b6 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
       ||
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d009      	beq.n	80028b6 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80028a2:	4b5f      	ldr	r3, [pc, #380]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028a4:	68db      	ldr	r3, [r3, #12]
 80028a6:	091b      	lsrs	r3, r3, #4
 80028a8:	f003 0307 	and.w	r3, r3, #7
 80028ac:	1c5a      	adds	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
       ||
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d044      	beq.n	8002940 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
 80028ba:	e041      	b.n	8002940 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b02      	cmp	r3, #2
 80028c2:	d00c      	beq.n	80028de <RCCEx_PLLSAI2_Config+0x6e>
 80028c4:	2b03      	cmp	r3, #3
 80028c6:	d013      	beq.n	80028f0 <RCCEx_PLLSAI2_Config+0x80>
 80028c8:	2b01      	cmp	r3, #1
 80028ca:	d120      	bne.n	800290e <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028cc:	4b54      	ldr	r3, [pc, #336]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f003 0302 	and.w	r3, r3, #2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d11d      	bne.n	8002914 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028dc:	e01a      	b.n	8002914 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028de:	4b50      	ldr	r3, [pc, #320]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d116      	bne.n	8002918 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028ee:	e013      	b.n	8002918 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028f0:	4b4b      	ldr	r3, [pc, #300]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d10f      	bne.n	800291c <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028fc:	4b48      	ldr	r3, [pc, #288]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002904:	2b00      	cmp	r3, #0
 8002906:	d109      	bne.n	800291c <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002908:	2301      	movs	r3, #1
 800290a:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800290c:	e006      	b.n	800291c <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	73fb      	strb	r3, [r7, #15]
      break;
 8002912:	e004      	b.n	800291e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002914:	bf00      	nop
 8002916:	e002      	b.n	800291e <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002918:	bf00      	nop
 800291a:	e000      	b.n	800291e <RCCEx_PLLSAI2_Config+0xae>
      break;
 800291c:	bf00      	nop
    }

    if(status == HAL_OK)
 800291e:	7bfb      	ldrb	r3, [r7, #15]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d10d      	bne.n	8002940 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002924:	4b3e      	ldr	r3, [pc, #248]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6819      	ldr	r1, [r3, #0]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	3b01      	subs	r3, #1
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	430b      	orrs	r3, r1
 800293a:	4939      	ldr	r1, [pc, #228]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 800293c:	4313      	orrs	r3, r2
 800293e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002940:	7bfb      	ldrb	r3, [r7, #15]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d167      	bne.n	8002a16 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002946:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a35      	ldr	r2, [pc, #212]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 800294c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002952:	f7fe fa41 	bl	8000dd8 <HAL_GetTick>
 8002956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002958:	e009      	b.n	800296e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800295a:	f7fe fa3d 	bl	8000dd8 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d902      	bls.n	800296e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	73fb      	strb	r3, [r7, #15]
        break;
 800296c:	e005      	b.n	800297a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800296e:	4b2c      	ldr	r3, [pc, #176]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002976:	2b00      	cmp	r3, #0
 8002978:	d1ef      	bne.n	800295a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800297a:	7bfb      	ldrb	r3, [r7, #15]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d14a      	bne.n	8002a16 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	2b00      	cmp	r3, #0
 8002984:	d111      	bne.n	80029aa <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002986:	4b26      	ldr	r3, [pc, #152]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800298e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002992:	687a      	ldr	r2, [r7, #4]
 8002994:	6892      	ldr	r2, [r2, #8]
 8002996:	0211      	lsls	r1, r2, #8
 8002998:	687a      	ldr	r2, [r7, #4]
 800299a:	68d2      	ldr	r2, [r2, #12]
 800299c:	0912      	lsrs	r2, r2, #4
 800299e:	0452      	lsls	r2, r2, #17
 80029a0:	430a      	orrs	r2, r1
 80029a2:	491f      	ldr	r1, [pc, #124]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029a4:	4313      	orrs	r3, r2
 80029a6:	614b      	str	r3, [r1, #20]
 80029a8:	e011      	b.n	80029ce <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80029aa:	4b1d      	ldr	r3, [pc, #116]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029ac:	695b      	ldr	r3, [r3, #20]
 80029ae:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029b6:	687a      	ldr	r2, [r7, #4]
 80029b8:	6892      	ldr	r2, [r2, #8]
 80029ba:	0211      	lsls	r1, r2, #8
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	6912      	ldr	r2, [r2, #16]
 80029c0:	0852      	lsrs	r2, r2, #1
 80029c2:	3a01      	subs	r2, #1
 80029c4:	0652      	lsls	r2, r2, #25
 80029c6:	430a      	orrs	r2, r1
 80029c8:	4915      	ldr	r1, [pc, #84]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029ca:	4313      	orrs	r3, r2
 80029cc:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80029ce:	4b14      	ldr	r3, [pc, #80]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a13      	ldr	r2, [pc, #76]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029d8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029da:	f7fe f9fd 	bl	8000dd8 <HAL_GetTick>
 80029de:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029e0:	e009      	b.n	80029f6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029e2:	f7fe f9f9 	bl	8000dd8 <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	68bb      	ldr	r3, [r7, #8]
 80029ea:	1ad3      	subs	r3, r2, r3
 80029ec:	2b02      	cmp	r3, #2
 80029ee:	d902      	bls.n	80029f6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 80029f0:	2303      	movs	r3, #3
 80029f2:	73fb      	strb	r3, [r7, #15]
          break;
 80029f4:	e005      	b.n	8002a02 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80029f6:	4b0a      	ldr	r3, [pc, #40]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d0ef      	beq.n	80029e2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002a02:	7bfb      	ldrb	r3, [r7, #15]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d106      	bne.n	8002a16 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002a08:	4b05      	ldr	r3, [pc, #20]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a0a:	695a      	ldr	r2, [r3, #20]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	695b      	ldr	r3, [r3, #20]
 8002a10:	4903      	ldr	r1, [pc, #12]	; (8002a20 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a12:	4313      	orrs	r3, r2
 8002a14:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002a16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a18:	4618      	mov	r0, r3
 8002a1a:	3710      	adds	r7, #16
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bd80      	pop	{r7, pc}
 8002a20:	40021000 	.word	0x40021000

08002a24 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e01d      	b.n	8002a72 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f7fe f85a 	bl	8000b04 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fa34 	bl	8002ed0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
	...

08002a7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	68da      	ldr	r2, [r3, #12]
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f042 0201 	orr.w	r2, r2, #1
 8002a92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	689a      	ldr	r2, [r3, #8]
 8002a9a:	4b0c      	ldr	r3, [pc, #48]	; (8002acc <HAL_TIM_Base_Start_IT+0x50>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2b06      	cmp	r3, #6
 8002aa4:	d00b      	beq.n	8002abe <HAL_TIM_Base_Start_IT+0x42>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aac:	d007      	beq.n	8002abe <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f042 0201 	orr.w	r2, r2, #1
 8002abc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr
 8002acc:	00010007 	.word	0x00010007

08002ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	f003 0302 	and.w	r3, r3, #2
 8002ae2:	2b02      	cmp	r3, #2
 8002ae4:	d122      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	f003 0302 	and.w	r3, r3, #2
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d11b      	bne.n	8002b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f06f 0202 	mvn.w	r2, #2
 8002afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	f003 0303 	and.w	r3, r3, #3
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d003      	beq.n	8002b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f000 f9be 	bl	8002e94 <HAL_TIM_IC_CaptureCallback>
 8002b18:	e005      	b.n	8002b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f000 f9b0 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b20:	6878      	ldr	r0, [r7, #4]
 8002b22:	f000 f9c1 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	f003 0304 	and.w	r3, r3, #4
 8002b36:	2b04      	cmp	r3, #4
 8002b38:	d122      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	68db      	ldr	r3, [r3, #12]
 8002b40:	f003 0304 	and.w	r3, r3, #4
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d11b      	bne.n	8002b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f06f 0204 	mvn.w	r2, #4
 8002b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	2202      	movs	r2, #2
 8002b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	699b      	ldr	r3, [r3, #24]
 8002b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f000 f994 	bl	8002e94 <HAL_TIM_IC_CaptureCallback>
 8002b6c:	e005      	b.n	8002b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f000 f986 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b74:	6878      	ldr	r0, [r7, #4]
 8002b76:	f000 f997 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	f003 0308 	and.w	r3, r3, #8
 8002b8a:	2b08      	cmp	r3, #8
 8002b8c:	d122      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	68db      	ldr	r3, [r3, #12]
 8002b94:	f003 0308 	and.w	r3, r3, #8
 8002b98:	2b08      	cmp	r3, #8
 8002b9a:	d11b      	bne.n	8002bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0208 	mvn.w	r2, #8
 8002ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2204      	movs	r2, #4
 8002baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0303 	and.w	r3, r3, #3
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d003      	beq.n	8002bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f96a 	bl	8002e94 <HAL_TIM_IC_CaptureCallback>
 8002bc0:	e005      	b.n	8002bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 f95c 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f96d 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	691b      	ldr	r3, [r3, #16]
 8002bda:	f003 0310 	and.w	r3, r3, #16
 8002bde:	2b10      	cmp	r3, #16
 8002be0:	d122      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f003 0310 	and.w	r3, r3, #16
 8002bec:	2b10      	cmp	r3, #16
 8002bee:	d11b      	bne.n	8002c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f06f 0210 	mvn.w	r2, #16
 8002bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2208      	movs	r2, #8
 8002bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c0e:	6878      	ldr	r0, [r7, #4]
 8002c10:	f000 f940 	bl	8002e94 <HAL_TIM_IC_CaptureCallback>
 8002c14:	e005      	b.n	8002c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f932 	bl	8002e80 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f000 f943 	bl	8002ea8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2200      	movs	r2, #0
 8002c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f003 0301 	and.w	r3, r3, #1
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d10e      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0301 	and.w	r3, r3, #1
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f06f 0201 	mvn.w	r2, #1
 8002c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fd fc3a 	bl	80004c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	691b      	ldr	r3, [r3, #16]
 8002c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c5e:	2b80      	cmp	r3, #128	; 0x80
 8002c60:	d10e      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6c:	2b80      	cmp	r3, #128	; 0x80
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f000 faee 	bl	800325c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	691b      	ldr	r3, [r3, #16]
 8002c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c8e:	d10e      	bne.n	8002cae <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	68db      	ldr	r3, [r3, #12]
 8002c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9a:	2b80      	cmp	r3, #128	; 0x80
 8002c9c:	d107      	bne.n	8002cae <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ca6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fae1 	bl	8003270 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	691b      	ldr	r3, [r3, #16]
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d10e      	bne.n	8002cda <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc6:	2b40      	cmp	r3, #64	; 0x40
 8002cc8:	d107      	bne.n	8002cda <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002cd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cd4:	6878      	ldr	r0, [r7, #4]
 8002cd6:	f000 f8f1 	bl	8002ebc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	f003 0320 	and.w	r3, r3, #32
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	d10e      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	68db      	ldr	r3, [r3, #12]
 8002cee:	f003 0320 	and.w	r3, r3, #32
 8002cf2:	2b20      	cmp	r3, #32
 8002cf4:	d107      	bne.n	8002d06 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f06f 0220 	mvn.w	r2, #32
 8002cfe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d00:	6878      	ldr	r0, [r7, #4]
 8002d02:	f000 faa1 	bl	8003248 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d06:	bf00      	nop
 8002d08:	3708      	adds	r7, #8
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}

08002d0e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d0e:	b580      	push	{r7, lr}
 8002d10:	b084      	sub	sp, #16
 8002d12:	af00      	add	r7, sp, #0
 8002d14:	6078      	str	r0, [r7, #4]
 8002d16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d1e:	2b01      	cmp	r3, #1
 8002d20:	d101      	bne.n	8002d26 <HAL_TIM_ConfigClockSource+0x18>
 8002d22:	2302      	movs	r3, #2
 8002d24:	e0a8      	b.n	8002e78 <HAL_TIM_ConfigClockSource+0x16a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2201      	movs	r2, #1
 8002d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2202      	movs	r2, #2
 8002d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d44:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d48:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d50:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	2b40      	cmp	r3, #64	; 0x40
 8002d60:	d067      	beq.n	8002e32 <HAL_TIM_ConfigClockSource+0x124>
 8002d62:	2b40      	cmp	r3, #64	; 0x40
 8002d64:	d80b      	bhi.n	8002d7e <HAL_TIM_ConfigClockSource+0x70>
 8002d66:	2b10      	cmp	r3, #16
 8002d68:	d073      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x144>
 8002d6a:	2b10      	cmp	r3, #16
 8002d6c:	d802      	bhi.n	8002d74 <HAL_TIM_ConfigClockSource+0x66>
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d06f      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002d72:	e078      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d06c      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x144>
 8002d78:	2b30      	cmp	r3, #48	; 0x30
 8002d7a:	d06a      	beq.n	8002e52 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8002d7c:	e073      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d7e:	2b70      	cmp	r3, #112	; 0x70
 8002d80:	d00d      	beq.n	8002d9e <HAL_TIM_ConfigClockSource+0x90>
 8002d82:	2b70      	cmp	r3, #112	; 0x70
 8002d84:	d804      	bhi.n	8002d90 <HAL_TIM_ConfigClockSource+0x82>
 8002d86:	2b50      	cmp	r3, #80	; 0x50
 8002d88:	d033      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xe4>
 8002d8a:	2b60      	cmp	r3, #96	; 0x60
 8002d8c:	d041      	beq.n	8002e12 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8002d8e:	e06a      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8002d90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d94:	d066      	beq.n	8002e64 <HAL_TIM_ConfigClockSource+0x156>
 8002d96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d9a:	d017      	beq.n	8002dcc <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8002d9c:	e063      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6818      	ldr	r0, [r3, #0]
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	6899      	ldr	r1, [r3, #8]
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f000 f9a3 	bl	80030f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002dc0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	68fa      	ldr	r2, [r7, #12]
 8002dc8:	609a      	str	r2, [r3, #8]
      break;
 8002dca:	e04c      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6818      	ldr	r0, [r3, #0]
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	6899      	ldr	r1, [r3, #8]
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685a      	ldr	r2, [r3, #4]
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f000 f98c 	bl	80030f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002dee:	609a      	str	r2, [r3, #8]
      break;
 8002df0:	e039      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6859      	ldr	r1, [r3, #4]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	68db      	ldr	r3, [r3, #12]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	f000 f900 	bl	8003004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2150      	movs	r1, #80	; 0x50
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 f959 	bl	80030c2 <TIM_ITRx_SetConfig>
      break;
 8002e10:	e029      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6818      	ldr	r0, [r3, #0]
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	6859      	ldr	r1, [r3, #4]
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	f000 f91f 	bl	8003062 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	2160      	movs	r1, #96	; 0x60
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f000 f949 	bl	80030c2 <TIM_ITRx_SetConfig>
      break;
 8002e30:	e019      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	6859      	ldr	r1, [r3, #4]
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	68db      	ldr	r3, [r3, #12]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f000 f8e0 	bl	8003004 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	2140      	movs	r1, #64	; 0x40
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f000 f939 	bl	80030c2 <TIM_ITRx_SetConfig>
      break;
 8002e50:	e009      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4619      	mov	r1, r3
 8002e5c:	4610      	mov	r0, r2
 8002e5e:	f000 f930 	bl	80030c2 <TIM_ITRx_SetConfig>
      break;
 8002e62:	e000      	b.n	8002e66 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8002e64:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2201      	movs	r2, #1
 8002e6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e76:	2300      	movs	r3, #0
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	3710      	adds	r7, #16
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	bd80      	pop	{r7, pc}

08002e80 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b083      	sub	sp, #12
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr

08002e94 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002e94:	b480      	push	{r7}
 8002e96:	b083      	sub	sp, #12
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002e9c:	bf00      	nop
 8002e9e:	370c      	adds	r7, #12
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea6:	4770      	bx	lr

08002ea8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eb0:	bf00      	nop
 8002eb2:	370c      	adds	r7, #12
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr

08002ebc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b085      	sub	sp, #20
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	4a40      	ldr	r2, [pc, #256]	; (8002fe4 <TIM_Base_SetConfig+0x114>)
 8002ee4:	4293      	cmp	r3, r2
 8002ee6:	d013      	beq.n	8002f10 <TIM_Base_SetConfig+0x40>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002eee:	d00f      	beq.n	8002f10 <TIM_Base_SetConfig+0x40>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a3d      	ldr	r2, [pc, #244]	; (8002fe8 <TIM_Base_SetConfig+0x118>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00b      	beq.n	8002f10 <TIM_Base_SetConfig+0x40>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a3c      	ldr	r2, [pc, #240]	; (8002fec <TIM_Base_SetConfig+0x11c>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d007      	beq.n	8002f10 <TIM_Base_SetConfig+0x40>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a3b      	ldr	r2, [pc, #236]	; (8002ff0 <TIM_Base_SetConfig+0x120>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d003      	beq.n	8002f10 <TIM_Base_SetConfig+0x40>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a3a      	ldr	r2, [pc, #232]	; (8002ff4 <TIM_Base_SetConfig+0x124>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d108      	bne.n	8002f22 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	68fa      	ldr	r2, [r7, #12]
 8002f1e:	4313      	orrs	r3, r2
 8002f20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a2f      	ldr	r2, [pc, #188]	; (8002fe4 <TIM_Base_SetConfig+0x114>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d01f      	beq.n	8002f6a <TIM_Base_SetConfig+0x9a>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f30:	d01b      	beq.n	8002f6a <TIM_Base_SetConfig+0x9a>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a2c      	ldr	r2, [pc, #176]	; (8002fe8 <TIM_Base_SetConfig+0x118>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d017      	beq.n	8002f6a <TIM_Base_SetConfig+0x9a>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a2b      	ldr	r2, [pc, #172]	; (8002fec <TIM_Base_SetConfig+0x11c>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d013      	beq.n	8002f6a <TIM_Base_SetConfig+0x9a>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a2a      	ldr	r2, [pc, #168]	; (8002ff0 <TIM_Base_SetConfig+0x120>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d00f      	beq.n	8002f6a <TIM_Base_SetConfig+0x9a>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a29      	ldr	r2, [pc, #164]	; (8002ff4 <TIM_Base_SetConfig+0x124>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00b      	beq.n	8002f6a <TIM_Base_SetConfig+0x9a>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	4a28      	ldr	r2, [pc, #160]	; (8002ff8 <TIM_Base_SetConfig+0x128>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d007      	beq.n	8002f6a <TIM_Base_SetConfig+0x9a>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a27      	ldr	r2, [pc, #156]	; (8002ffc <TIM_Base_SetConfig+0x12c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_Base_SetConfig+0x9a>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a26      	ldr	r2, [pc, #152]	; (8003000 <TIM_Base_SetConfig+0x130>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d108      	bne.n	8002f7c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a10      	ldr	r2, [pc, #64]	; (8002fe4 <TIM_Base_SetConfig+0x114>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d00f      	beq.n	8002fc8 <TIM_Base_SetConfig+0xf8>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	4a12      	ldr	r2, [pc, #72]	; (8002ff4 <TIM_Base_SetConfig+0x124>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d00b      	beq.n	8002fc8 <TIM_Base_SetConfig+0xf8>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	4a11      	ldr	r2, [pc, #68]	; (8002ff8 <TIM_Base_SetConfig+0x128>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d007      	beq.n	8002fc8 <TIM_Base_SetConfig+0xf8>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a10      	ldr	r2, [pc, #64]	; (8002ffc <TIM_Base_SetConfig+0x12c>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d003      	beq.n	8002fc8 <TIM_Base_SetConfig+0xf8>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a0f      	ldr	r2, [pc, #60]	; (8003000 <TIM_Base_SetConfig+0x130>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d103      	bne.n	8002fd0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	691a      	ldr	r2, [r3, #16]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	615a      	str	r2, [r3, #20]
}
 8002fd6:	bf00      	nop
 8002fd8:	3714      	adds	r7, #20
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr
 8002fe2:	bf00      	nop
 8002fe4:	40012c00 	.word	0x40012c00
 8002fe8:	40000400 	.word	0x40000400
 8002fec:	40000800 	.word	0x40000800
 8002ff0:	40000c00 	.word	0x40000c00
 8002ff4:	40013400 	.word	0x40013400
 8002ff8:	40014000 	.word	0x40014000
 8002ffc:	40014400 	.word	0x40014400
 8003000:	40014800 	.word	0x40014800

08003004 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003004:	b480      	push	{r7}
 8003006:	b087      	sub	sp, #28
 8003008:	af00      	add	r7, sp, #0
 800300a:	60f8      	str	r0, [r7, #12]
 800300c:	60b9      	str	r1, [r7, #8]
 800300e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6a1b      	ldr	r3, [r3, #32]
 8003014:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f023 0201 	bic.w	r2, r3, #1
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800302e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	011b      	lsls	r3, r3, #4
 8003034:	693a      	ldr	r2, [r7, #16]
 8003036:	4313      	orrs	r3, r2
 8003038:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	f023 030a 	bic.w	r3, r3, #10
 8003040:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003042:	697a      	ldr	r2, [r7, #20]
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	4313      	orrs	r3, r2
 8003048:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	693a      	ldr	r2, [r7, #16]
 800304e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	697a      	ldr	r2, [r7, #20]
 8003054:	621a      	str	r2, [r3, #32]
}
 8003056:	bf00      	nop
 8003058:	371c      	adds	r7, #28
 800305a:	46bd      	mov	sp, r7
 800305c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003060:	4770      	bx	lr

08003062 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003062:	b480      	push	{r7}
 8003064:	b087      	sub	sp, #28
 8003066:	af00      	add	r7, sp, #0
 8003068:	60f8      	str	r0, [r7, #12]
 800306a:	60b9      	str	r1, [r7, #8]
 800306c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6a1b      	ldr	r3, [r3, #32]
 8003072:	f023 0210 	bic.w	r2, r3, #16
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	699b      	ldr	r3, [r3, #24]
 800307e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6a1b      	ldr	r3, [r3, #32]
 8003084:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003086:	697b      	ldr	r3, [r7, #20]
 8003088:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800308c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	031b      	lsls	r3, r3, #12
 8003092:	697a      	ldr	r2, [r7, #20]
 8003094:	4313      	orrs	r3, r2
 8003096:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800309e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	693a      	ldr	r2, [r7, #16]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	697a      	ldr	r2, [r7, #20]
 80030ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	693a      	ldr	r2, [r7, #16]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr

080030c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80030c2:	b480      	push	{r7}
 80030c4:	b085      	sub	sp, #20
 80030c6:	af00      	add	r7, sp, #0
 80030c8:	6078      	str	r0, [r7, #4]
 80030ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030da:	683a      	ldr	r2, [r7, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	4313      	orrs	r3, r2
 80030e0:	f043 0307 	orr.w	r3, r3, #7
 80030e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68fa      	ldr	r2, [r7, #12]
 80030ea:	609a      	str	r2, [r3, #8]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
 8003104:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003112:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	021a      	lsls	r2, r3, #8
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	431a      	orrs	r2, r3
 800311c:	68bb      	ldr	r3, [r7, #8]
 800311e:	4313      	orrs	r3, r2
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	4313      	orrs	r3, r2
 8003124:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	697a      	ldr	r2, [r7, #20]
 800312a:	609a      	str	r2, [r3, #8]
}
 800312c:	bf00      	nop
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003136:	4770      	bx	lr

08003138 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003148:	2b01      	cmp	r3, #1
 800314a:	d101      	bne.n	8003150 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800314c:	2302      	movs	r3, #2
 800314e:	e068      	b.n	8003222 <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	689b      	ldr	r3, [r3, #8]
 800316e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a2e      	ldr	r2, [pc, #184]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d004      	beq.n	8003184 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a2d      	ldr	r2, [pc, #180]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d108      	bne.n	8003196 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800318a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	68fa      	ldr	r2, [r7, #12]
 8003192:	4313      	orrs	r3, r2
 8003194:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800319c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800319e:	683b      	ldr	r3, [r7, #0]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	68fa      	ldr	r2, [r7, #12]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68fa      	ldr	r2, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a1e      	ldr	r2, [pc, #120]	; (8003230 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01d      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031c2:	d018      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4a1b      	ldr	r2, [pc, #108]	; (8003238 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d013      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4a1a      	ldr	r2, [pc, #104]	; (800323c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80031d4:	4293      	cmp	r3, r2
 80031d6:	d00e      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a18      	ldr	r2, [pc, #96]	; (8003240 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d009      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4a13      	ldr	r2, [pc, #76]	; (8003234 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80031e8:	4293      	cmp	r3, r2
 80031ea:	d004      	beq.n	80031f6 <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4a14      	ldr	r2, [pc, #80]	; (8003244 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d10c      	bne.n	8003210 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80031fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	689b      	ldr	r3, [r3, #8]
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	4313      	orrs	r3, r2
 8003206:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68ba      	ldr	r2, [r7, #8]
 800320e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	3714      	adds	r7, #20
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40012c00 	.word	0x40012c00
 8003234:	40013400 	.word	0x40013400
 8003238:	40000400 	.word	0x40000400
 800323c:	40000800 	.word	0x40000800
 8003240:	40000c00 	.word	0x40000c00
 8003244:	40014000 	.word	0x40014000

08003248 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003250:	bf00      	nop
 8003252:	370c      	adds	r7, #12
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr

0800325c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800325c:	b480      	push	{r7}
 800325e:	b083      	sub	sp, #12
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003264:	bf00      	nop
 8003266:	370c      	adds	r7, #12
 8003268:	46bd      	mov	sp, r7
 800326a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326e:	4770      	bx	lr

08003270 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003270:	b480      	push	{r7}
 8003272:	b083      	sub	sp, #12
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003278:	bf00      	nop
 800327a:	370c      	adds	r7, #12
 800327c:	46bd      	mov	sp, r7
 800327e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003282:	4770      	bx	lr

08003284 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003284:	b580      	push	{r7, lr}
 8003286:	b082      	sub	sp, #8
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d101      	bne.n	8003296 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e040      	b.n	8003318 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	2b00      	cmp	r3, #0
 800329c:	d106      	bne.n	80032ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f7fd fc50 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	2224      	movs	r2, #36	; 0x24
 80032b0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f022 0201 	bic.w	r2, r2, #1
 80032c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f8c0 	bl	8003448 <UART_SetConfig>
 80032c8:	4603      	mov	r3, r0
 80032ca:	2b01      	cmp	r3, #1
 80032cc:	d101      	bne.n	80032d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032ce:	2301      	movs	r3, #1
 80032d0:	e022      	b.n	8003318 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d002      	beq.n	80032e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fc26 	bl	8003b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685a      	ldr	r2, [r3, #4]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	689a      	ldr	r2, [r3, #8]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f042 0201 	orr.w	r2, r2, #1
 800330e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 fcad 	bl	8003c70 <UART_CheckIdleState>
 8003316:	4603      	mov	r3, r0
}
 8003318:	4618      	mov	r0, r3
 800331a:	3708      	adds	r7, #8
 800331c:	46bd      	mov	sp, r7
 800331e:	bd80      	pop	{r7, pc}

08003320 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b08a      	sub	sp, #40	; 0x28
 8003324:	af02      	add	r7, sp, #8
 8003326:	60f8      	str	r0, [r7, #12]
 8003328:	60b9      	str	r1, [r7, #8]
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	4613      	mov	r3, r2
 800332e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003334:	2b20      	cmp	r3, #32
 8003336:	f040 8081 	bne.w	800343c <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d002      	beq.n	8003346 <HAL_UART_Transmit+0x26>
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d101      	bne.n	800334a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	e079      	b.n	800343e <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003350:	2b01      	cmp	r3, #1
 8003352:	d101      	bne.n	8003358 <HAL_UART_Transmit+0x38>
 8003354:	2302      	movs	r3, #2
 8003356:	e072      	b.n	800343e <HAL_UART_Transmit+0x11e>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2200      	movs	r2, #0
 8003364:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2221      	movs	r2, #33	; 0x21
 800336a:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 800336c:	f7fd fd34 	bl	8000dd8 <HAL_GetTick>
 8003370:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	88fa      	ldrh	r2, [r7, #6]
 8003376:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	88fa      	ldrh	r2, [r7, #6]
 800337e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338a:	d108      	bne.n	800339e <HAL_UART_Transmit+0x7e>
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	691b      	ldr	r3, [r3, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d104      	bne.n	800339e <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8003394:	2300      	movs	r3, #0
 8003396:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	61bb      	str	r3, [r7, #24]
 800339c:	e003      	b.n	80033a6 <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 800339e:	68bb      	ldr	r3, [r7, #8]
 80033a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80033ae:	e02d      	b.n	800340c <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	9300      	str	r3, [sp, #0]
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2200      	movs	r2, #0
 80033b8:	2180      	movs	r1, #128	; 0x80
 80033ba:	68f8      	ldr	r0, [r7, #12]
 80033bc:	f000 fc9d 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e039      	b.n	800343e <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d10b      	bne.n	80033e8 <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033d0:	69bb      	ldr	r3, [r7, #24]
 80033d2:	881a      	ldrh	r2, [r3, #0]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033dc:	b292      	uxth	r2, r2
 80033de:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	3302      	adds	r3, #2
 80033e4:	61bb      	str	r3, [r7, #24]
 80033e6:	e008      	b.n	80033fa <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	781a      	ldrb	r2, [r3, #0]
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	b292      	uxth	r2, r2
 80033f2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	3301      	adds	r3, #1
 80033f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1cb      	bne.n	80033b0 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	9300      	str	r3, [sp, #0]
 800341c:	697b      	ldr	r3, [r7, #20]
 800341e:	2200      	movs	r2, #0
 8003420:	2140      	movs	r1, #64	; 0x40
 8003422:	68f8      	ldr	r0, [r7, #12]
 8003424:	f000 fc69 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003428:	4603      	mov	r3, r0
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800342e:	2303      	movs	r3, #3
 8003430:	e005      	b.n	800343e <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2220      	movs	r2, #32
 8003436:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8003438:	2300      	movs	r3, #0
 800343a:	e000      	b.n	800343e <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 800343c:	2302      	movs	r3, #2
  }
}
 800343e:	4618      	mov	r0, r3
 8003440:	3720      	adds	r7, #32
 8003442:	46bd      	mov	sp, r7
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003448:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800344c:	b08a      	sub	sp, #40	; 0x28
 800344e:	af00      	add	r7, sp, #0
 8003450:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003456:	2300      	movs	r3, #0
 8003458:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800345a:	2300      	movs	r3, #0
 800345c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	689a      	ldr	r2, [r3, #8]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	431a      	orrs	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	695b      	ldr	r3, [r3, #20]
 800346c:	431a      	orrs	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	69db      	ldr	r3, [r3, #28]
 8003472:	4313      	orrs	r3, r2
 8003474:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	4bb8      	ldr	r3, [pc, #736]	; (8003760 <UART_SetConfig+0x318>)
 800347e:	4013      	ands	r3, r2
 8003480:	687a      	ldr	r2, [r7, #4]
 8003482:	6812      	ldr	r2, [r2, #0]
 8003484:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003486:	430b      	orrs	r3, r1
 8003488:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	4aae      	ldr	r2, [pc, #696]	; (8003764 <UART_SetConfig+0x31c>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d004      	beq.n	80034ba <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034b6:	4313      	orrs	r3, r2
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	689b      	ldr	r3, [r3, #8]
 80034c0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034ca:	430a      	orrs	r2, r1
 80034cc:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4aa5      	ldr	r2, [pc, #660]	; (8003768 <UART_SetConfig+0x320>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	d126      	bne.n	8003526 <UART_SetConfig+0xde>
 80034d8:	4ba4      	ldr	r3, [pc, #656]	; (800376c <UART_SetConfig+0x324>)
 80034da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034de:	f003 0303 	and.w	r3, r3, #3
 80034e2:	2b03      	cmp	r3, #3
 80034e4:	d81a      	bhi.n	800351c <UART_SetConfig+0xd4>
 80034e6:	a201      	add	r2, pc, #4	; (adr r2, 80034ec <UART_SetConfig+0xa4>)
 80034e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ec:	080034fd 	.word	0x080034fd
 80034f0:	0800350d 	.word	0x0800350d
 80034f4:	08003505 	.word	0x08003505
 80034f8:	08003515 	.word	0x08003515
 80034fc:	2301      	movs	r3, #1
 80034fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003502:	e105      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003504:	2302      	movs	r3, #2
 8003506:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800350a:	e101      	b.n	8003710 <UART_SetConfig+0x2c8>
 800350c:	2304      	movs	r3, #4
 800350e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003512:	e0fd      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003514:	2308      	movs	r3, #8
 8003516:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800351a:	e0f9      	b.n	8003710 <UART_SetConfig+0x2c8>
 800351c:	2310      	movs	r3, #16
 800351e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003522:	bf00      	nop
 8003524:	e0f4      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a91      	ldr	r2, [pc, #580]	; (8003770 <UART_SetConfig+0x328>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d138      	bne.n	80035a2 <UART_SetConfig+0x15a>
 8003530:	4b8e      	ldr	r3, [pc, #568]	; (800376c <UART_SetConfig+0x324>)
 8003532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003536:	f003 030c 	and.w	r3, r3, #12
 800353a:	2b0c      	cmp	r3, #12
 800353c:	d82c      	bhi.n	8003598 <UART_SetConfig+0x150>
 800353e:	a201      	add	r2, pc, #4	; (adr r2, 8003544 <UART_SetConfig+0xfc>)
 8003540:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003544:	08003579 	.word	0x08003579
 8003548:	08003599 	.word	0x08003599
 800354c:	08003599 	.word	0x08003599
 8003550:	08003599 	.word	0x08003599
 8003554:	08003589 	.word	0x08003589
 8003558:	08003599 	.word	0x08003599
 800355c:	08003599 	.word	0x08003599
 8003560:	08003599 	.word	0x08003599
 8003564:	08003581 	.word	0x08003581
 8003568:	08003599 	.word	0x08003599
 800356c:	08003599 	.word	0x08003599
 8003570:	08003599 	.word	0x08003599
 8003574:	08003591 	.word	0x08003591
 8003578:	2300      	movs	r3, #0
 800357a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800357e:	e0c7      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003580:	2302      	movs	r3, #2
 8003582:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003586:	e0c3      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003588:	2304      	movs	r3, #4
 800358a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800358e:	e0bf      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003590:	2308      	movs	r3, #8
 8003592:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003596:	e0bb      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003598:	2310      	movs	r3, #16
 800359a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800359e:	bf00      	nop
 80035a0:	e0b6      	b.n	8003710 <UART_SetConfig+0x2c8>
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	4a73      	ldr	r2, [pc, #460]	; (8003774 <UART_SetConfig+0x32c>)
 80035a8:	4293      	cmp	r3, r2
 80035aa:	d125      	bne.n	80035f8 <UART_SetConfig+0x1b0>
 80035ac:	4b6f      	ldr	r3, [pc, #444]	; (800376c <UART_SetConfig+0x324>)
 80035ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035b2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80035b6:	2b10      	cmp	r3, #16
 80035b8:	d011      	beq.n	80035de <UART_SetConfig+0x196>
 80035ba:	2b10      	cmp	r3, #16
 80035bc:	d802      	bhi.n	80035c4 <UART_SetConfig+0x17c>
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d005      	beq.n	80035ce <UART_SetConfig+0x186>
 80035c2:	e014      	b.n	80035ee <UART_SetConfig+0x1a6>
 80035c4:	2b20      	cmp	r3, #32
 80035c6:	d006      	beq.n	80035d6 <UART_SetConfig+0x18e>
 80035c8:	2b30      	cmp	r3, #48	; 0x30
 80035ca:	d00c      	beq.n	80035e6 <UART_SetConfig+0x19e>
 80035cc:	e00f      	b.n	80035ee <UART_SetConfig+0x1a6>
 80035ce:	2300      	movs	r3, #0
 80035d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035d4:	e09c      	b.n	8003710 <UART_SetConfig+0x2c8>
 80035d6:	2302      	movs	r3, #2
 80035d8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035dc:	e098      	b.n	8003710 <UART_SetConfig+0x2c8>
 80035de:	2304      	movs	r3, #4
 80035e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035e4:	e094      	b.n	8003710 <UART_SetConfig+0x2c8>
 80035e6:	2308      	movs	r3, #8
 80035e8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035ec:	e090      	b.n	8003710 <UART_SetConfig+0x2c8>
 80035ee:	2310      	movs	r3, #16
 80035f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80035f4:	bf00      	nop
 80035f6:	e08b      	b.n	8003710 <UART_SetConfig+0x2c8>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <UART_SetConfig+0x330>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d125      	bne.n	800364e <UART_SetConfig+0x206>
 8003602:	4b5a      	ldr	r3, [pc, #360]	; (800376c <UART_SetConfig+0x324>)
 8003604:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003608:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800360c:	2b40      	cmp	r3, #64	; 0x40
 800360e:	d011      	beq.n	8003634 <UART_SetConfig+0x1ec>
 8003610:	2b40      	cmp	r3, #64	; 0x40
 8003612:	d802      	bhi.n	800361a <UART_SetConfig+0x1d2>
 8003614:	2b00      	cmp	r3, #0
 8003616:	d005      	beq.n	8003624 <UART_SetConfig+0x1dc>
 8003618:	e014      	b.n	8003644 <UART_SetConfig+0x1fc>
 800361a:	2b80      	cmp	r3, #128	; 0x80
 800361c:	d006      	beq.n	800362c <UART_SetConfig+0x1e4>
 800361e:	2bc0      	cmp	r3, #192	; 0xc0
 8003620:	d00c      	beq.n	800363c <UART_SetConfig+0x1f4>
 8003622:	e00f      	b.n	8003644 <UART_SetConfig+0x1fc>
 8003624:	2300      	movs	r3, #0
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e071      	b.n	8003710 <UART_SetConfig+0x2c8>
 800362c:	2302      	movs	r3, #2
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e06d      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003634:	2304      	movs	r3, #4
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e069      	b.n	8003710 <UART_SetConfig+0x2c8>
 800363c:	2308      	movs	r3, #8
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e065      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003644:	2310      	movs	r3, #16
 8003646:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800364a:	bf00      	nop
 800364c:	e060      	b.n	8003710 <UART_SetConfig+0x2c8>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a4a      	ldr	r2, [pc, #296]	; (800377c <UART_SetConfig+0x334>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d129      	bne.n	80036ac <UART_SetConfig+0x264>
 8003658:	4b44      	ldr	r3, [pc, #272]	; (800376c <UART_SetConfig+0x324>)
 800365a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800365e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003662:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003666:	d014      	beq.n	8003692 <UART_SetConfig+0x24a>
 8003668:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800366c:	d802      	bhi.n	8003674 <UART_SetConfig+0x22c>
 800366e:	2b00      	cmp	r3, #0
 8003670:	d007      	beq.n	8003682 <UART_SetConfig+0x23a>
 8003672:	e016      	b.n	80036a2 <UART_SetConfig+0x25a>
 8003674:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003678:	d007      	beq.n	800368a <UART_SetConfig+0x242>
 800367a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800367e:	d00c      	beq.n	800369a <UART_SetConfig+0x252>
 8003680:	e00f      	b.n	80036a2 <UART_SetConfig+0x25a>
 8003682:	2300      	movs	r3, #0
 8003684:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003688:	e042      	b.n	8003710 <UART_SetConfig+0x2c8>
 800368a:	2302      	movs	r3, #2
 800368c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003690:	e03e      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003692:	2304      	movs	r3, #4
 8003694:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003698:	e03a      	b.n	8003710 <UART_SetConfig+0x2c8>
 800369a:	2308      	movs	r3, #8
 800369c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a0:	e036      	b.n	8003710 <UART_SetConfig+0x2c8>
 80036a2:	2310      	movs	r3, #16
 80036a4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a8:	bf00      	nop
 80036aa:	e031      	b.n	8003710 <UART_SetConfig+0x2c8>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <UART_SetConfig+0x31c>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d129      	bne.n	800370a <UART_SetConfig+0x2c2>
 80036b6:	4b2d      	ldr	r3, [pc, #180]	; (800376c <UART_SetConfig+0x324>)
 80036b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036c4:	d014      	beq.n	80036f0 <UART_SetConfig+0x2a8>
 80036c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036ca:	d802      	bhi.n	80036d2 <UART_SetConfig+0x28a>
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d007      	beq.n	80036e0 <UART_SetConfig+0x298>
 80036d0:	e016      	b.n	8003700 <UART_SetConfig+0x2b8>
 80036d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036d6:	d007      	beq.n	80036e8 <UART_SetConfig+0x2a0>
 80036d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036dc:	d00c      	beq.n	80036f8 <UART_SetConfig+0x2b0>
 80036de:	e00f      	b.n	8003700 <UART_SetConfig+0x2b8>
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036e6:	e013      	b.n	8003710 <UART_SetConfig+0x2c8>
 80036e8:	2302      	movs	r3, #2
 80036ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ee:	e00f      	b.n	8003710 <UART_SetConfig+0x2c8>
 80036f0:	2304      	movs	r3, #4
 80036f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036f6:	e00b      	b.n	8003710 <UART_SetConfig+0x2c8>
 80036f8:	2308      	movs	r3, #8
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e007      	b.n	8003710 <UART_SetConfig+0x2c8>
 8003700:	2310      	movs	r3, #16
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	bf00      	nop
 8003708:	e002      	b.n	8003710 <UART_SetConfig+0x2c8>
 800370a:	2310      	movs	r3, #16
 800370c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a13      	ldr	r2, [pc, #76]	; (8003764 <UART_SetConfig+0x31c>)
 8003716:	4293      	cmp	r3, r2
 8003718:	f040 80fe 	bne.w	8003918 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800371c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003720:	2b08      	cmp	r3, #8
 8003722:	d837      	bhi.n	8003794 <UART_SetConfig+0x34c>
 8003724:	a201      	add	r2, pc, #4	; (adr r2, 800372c <UART_SetConfig+0x2e4>)
 8003726:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800372a:	bf00      	nop
 800372c:	08003751 	.word	0x08003751
 8003730:	08003795 	.word	0x08003795
 8003734:	08003759 	.word	0x08003759
 8003738:	08003795 	.word	0x08003795
 800373c:	08003785 	.word	0x08003785
 8003740:	08003795 	.word	0x08003795
 8003744:	08003795 	.word	0x08003795
 8003748:	08003795 	.word	0x08003795
 800374c:	0800378d 	.word	0x0800378d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8003750:	f7fe fc2c 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8003754:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003756:	e020      	b.n	800379a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8003758:	4b09      	ldr	r3, [pc, #36]	; (8003780 <UART_SetConfig+0x338>)
 800375a:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800375c:	e01d      	b.n	800379a <UART_SetConfig+0x352>
 800375e:	bf00      	nop
 8003760:	efff69f3 	.word	0xefff69f3
 8003764:	40008000 	.word	0x40008000
 8003768:	40013800 	.word	0x40013800
 800376c:	40021000 	.word	0x40021000
 8003770:	40004400 	.word	0x40004400
 8003774:	40004800 	.word	0x40004800
 8003778:	40004c00 	.word	0x40004c00
 800377c:	40005000 	.word	0x40005000
 8003780:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8003784:	f7fe fb7c 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8003788:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800378a:	e006      	b.n	800379a <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800378c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003790:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003792:	e002      	b.n	800379a <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 8003794:	2301      	movs	r3, #1
 8003796:	76fb      	strb	r3, [r7, #27]
        break;
 8003798:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f000 81b9 	beq.w	8003b14 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	005b      	lsls	r3, r3, #1
 80037aa:	4413      	add	r3, r2
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d305      	bcc.n	80037be <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	d902      	bls.n	80037c4 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	76fb      	strb	r3, [r7, #27]
 80037c2:	e1a7      	b.n	8003b14 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 80037c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037c8:	2b08      	cmp	r3, #8
 80037ca:	f200 8092 	bhi.w	80038f2 <UART_SetConfig+0x4aa>
 80037ce:	a201      	add	r2, pc, #4	; (adr r2, 80037d4 <UART_SetConfig+0x38c>)
 80037d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037d4:	080037f9 	.word	0x080037f9
 80037d8:	080038f3 	.word	0x080038f3
 80037dc:	08003847 	.word	0x08003847
 80037e0:	080038f3 	.word	0x080038f3
 80037e4:	0800387b 	.word	0x0800387b
 80037e8:	080038f3 	.word	0x080038f3
 80037ec:	080038f3 	.word	0x080038f3
 80037f0:	080038f3 	.word	0x080038f3
 80037f4:	080038c9 	.word	0x080038c9
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 80037f8:	f7fe fbd8 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 80037fc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037fe:	693b      	ldr	r3, [r7, #16]
 8003800:	4619      	mov	r1, r3
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	f04f 0400 	mov.w	r4, #0
 800380e:	0214      	lsls	r4, r2, #8
 8003810:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003814:	020b      	lsls	r3, r1, #8
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6852      	ldr	r2, [r2, #4]
 800381a:	0852      	lsrs	r2, r2, #1
 800381c:	4611      	mov	r1, r2
 800381e:	f04f 0200 	mov.w	r2, #0
 8003822:	eb13 0b01 	adds.w	fp, r3, r1
 8003826:	eb44 0c02 	adc.w	ip, r4, r2
 800382a:	4658      	mov	r0, fp
 800382c:	4661      	mov	r1, ip
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	f04f 0400 	mov.w	r4, #0
 8003836:	461a      	mov	r2, r3
 8003838:	4623      	mov	r3, r4
 800383a:	f7fc fcc5 	bl	80001c8 <__aeabi_uldivmod>
 800383e:	4603      	mov	r3, r0
 8003840:	460c      	mov	r4, r1
 8003842:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003844:	e058      	b.n	80038f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
 800384a:	085b      	lsrs	r3, r3, #1
 800384c:	f04f 0400 	mov.w	r4, #0
 8003850:	49ae      	ldr	r1, [pc, #696]	; (8003b0c <UART_SetConfig+0x6c4>)
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	eb13 0b01 	adds.w	fp, r3, r1
 800385a:	eb44 0c02 	adc.w	ip, r4, r2
 800385e:	4658      	mov	r0, fp
 8003860:	4661      	mov	r1, ip
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f04f 0400 	mov.w	r4, #0
 800386a:	461a      	mov	r2, r3
 800386c:	4623      	mov	r3, r4
 800386e:	f7fc fcab 	bl	80001c8 <__aeabi_uldivmod>
 8003872:	4603      	mov	r3, r0
 8003874:	460c      	mov	r4, r1
 8003876:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 8003878:	e03e      	b.n	80038f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800387a:	f7fe fb01 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 800387e:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	4619      	mov	r1, r3
 8003884:	f04f 0200 	mov.w	r2, #0
 8003888:	f04f 0300 	mov.w	r3, #0
 800388c:	f04f 0400 	mov.w	r4, #0
 8003890:	0214      	lsls	r4, r2, #8
 8003892:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8003896:	020b      	lsls	r3, r1, #8
 8003898:	687a      	ldr	r2, [r7, #4]
 800389a:	6852      	ldr	r2, [r2, #4]
 800389c:	0852      	lsrs	r2, r2, #1
 800389e:	4611      	mov	r1, r2
 80038a0:	f04f 0200 	mov.w	r2, #0
 80038a4:	eb13 0b01 	adds.w	fp, r3, r1
 80038a8:	eb44 0c02 	adc.w	ip, r4, r2
 80038ac:	4658      	mov	r0, fp
 80038ae:	4661      	mov	r1, ip
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f04f 0400 	mov.w	r4, #0
 80038b8:	461a      	mov	r2, r3
 80038ba:	4623      	mov	r3, r4
 80038bc:	f7fc fc84 	bl	80001c8 <__aeabi_uldivmod>
 80038c0:	4603      	mov	r3, r0
 80038c2:	460c      	mov	r4, r1
 80038c4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80038c6:	e017      	b.n	80038f8 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	685b      	ldr	r3, [r3, #4]
 80038cc:	085b      	lsrs	r3, r3, #1
 80038ce:	f04f 0400 	mov.w	r4, #0
 80038d2:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80038d6:	f144 0100 	adc.w	r1, r4, #0
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	685b      	ldr	r3, [r3, #4]
 80038de:	f04f 0400 	mov.w	r4, #0
 80038e2:	461a      	mov	r2, r3
 80038e4:	4623      	mov	r3, r4
 80038e6:	f7fc fc6f 	bl	80001c8 <__aeabi_uldivmod>
 80038ea:	4603      	mov	r3, r0
 80038ec:	460c      	mov	r4, r1
 80038ee:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 80038f0:	e002      	b.n	80038f8 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 80038f2:	2301      	movs	r3, #1
 80038f4:	76fb      	strb	r3, [r7, #27]
            break;
 80038f6:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80038fe:	d308      	bcc.n	8003912 <UART_SetConfig+0x4ca>
 8003900:	69fb      	ldr	r3, [r7, #28]
 8003902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003906:	d204      	bcs.n	8003912 <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69fa      	ldr	r2, [r7, #28]
 800390e:	60da      	str	r2, [r3, #12]
 8003910:	e100      	b.n	8003b14 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	76fb      	strb	r3, [r7, #27]
 8003916:	e0fd      	b.n	8003b14 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	69db      	ldr	r3, [r3, #28]
 800391c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003920:	f040 8084 	bne.w	8003a2c <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 8003924:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003928:	2b08      	cmp	r3, #8
 800392a:	d85f      	bhi.n	80039ec <UART_SetConfig+0x5a4>
 800392c:	a201      	add	r2, pc, #4	; (adr r2, 8003934 <UART_SetConfig+0x4ec>)
 800392e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003932:	bf00      	nop
 8003934:	08003959 	.word	0x08003959
 8003938:	08003979 	.word	0x08003979
 800393c:	08003999 	.word	0x08003999
 8003940:	080039ed 	.word	0x080039ed
 8003944:	080039b5 	.word	0x080039b5
 8003948:	080039ed 	.word	0x080039ed
 800394c:	080039ed 	.word	0x080039ed
 8003950:	080039ed 	.word	0x080039ed
 8003954:	080039d5 	.word	0x080039d5
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003958:	f7fe fb28 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 800395c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	005a      	lsls	r2, r3, #1
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	085b      	lsrs	r3, r3, #1
 8003968:	441a      	add	r2, r3
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003972:	b29b      	uxth	r3, r3
 8003974:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003976:	e03c      	b.n	80039f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003978:	f7fe fb2e 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 800397c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	005a      	lsls	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	085b      	lsrs	r3, r3, #1
 8003988:	441a      	add	r2, r3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003992:	b29b      	uxth	r3, r3
 8003994:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003996:	e02c      	b.n	80039f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	685b      	ldr	r3, [r3, #4]
 800399c:	085b      	lsrs	r3, r3, #1
 800399e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 80039a2:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6852      	ldr	r2, [r2, #4]
 80039aa:	fbb3 f3f2 	udiv	r3, r3, r2
 80039ae:	b29b      	uxth	r3, r3
 80039b0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039b2:	e01e      	b.n	80039f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039b4:	f7fe fa64 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 80039b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	005a      	lsls	r2, r3, #1
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	085b      	lsrs	r3, r3, #1
 80039c4:	441a      	add	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039d2:	e00e      	b.n	80039f2 <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	085b      	lsrs	r3, r3, #1
 80039da:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 80039ea:	e002      	b.n	80039f2 <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	76fb      	strb	r3, [r7, #27]
        break;
 80039f0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	2b0f      	cmp	r3, #15
 80039f6:	d916      	bls.n	8003a26 <UART_SetConfig+0x5de>
 80039f8:	69fb      	ldr	r3, [r7, #28]
 80039fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039fe:	d212      	bcs.n	8003a26 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	f023 030f 	bic.w	r3, r3, #15
 8003a08:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	f003 0307 	and.w	r3, r3, #7
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	89fb      	ldrh	r3, [r7, #14]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	89fa      	ldrh	r2, [r7, #14]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	e076      	b.n	8003b14 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	76fb      	strb	r3, [r7, #27]
 8003a2a:	e073      	b.n	8003b14 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 8003a2c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a30:	2b08      	cmp	r3, #8
 8003a32:	d85c      	bhi.n	8003aee <UART_SetConfig+0x6a6>
 8003a34:	a201      	add	r2, pc, #4	; (adr r2, 8003a3c <UART_SetConfig+0x5f4>)
 8003a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a3a:	bf00      	nop
 8003a3c:	08003a61 	.word	0x08003a61
 8003a40:	08003a7f 	.word	0x08003a7f
 8003a44:	08003a9d 	.word	0x08003a9d
 8003a48:	08003aef 	.word	0x08003aef
 8003a4c:	08003ab9 	.word	0x08003ab9
 8003a50:	08003aef 	.word	0x08003aef
 8003a54:	08003aef 	.word	0x08003aef
 8003a58:	08003aef 	.word	0x08003aef
 8003a5c:	08003ad7 	.word	0x08003ad7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a60:	f7fe faa4 	bl	8001fac <HAL_RCC_GetPCLK1Freq>
 8003a64:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	085a      	lsrs	r2, r3, #1
 8003a6c:	693b      	ldr	r3, [r7, #16]
 8003a6e:	441a      	add	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a7c:	e03a      	b.n	8003af4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a7e:	f7fe faab 	bl	8001fd8 <HAL_RCC_GetPCLK2Freq>
 8003a82:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	085a      	lsrs	r2, r3, #1
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	441a      	add	r2, r3
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a96:	b29b      	uxth	r3, r3
 8003a98:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003a9a:	e02b      	b.n	8003af4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003aa6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003aaa:	687a      	ldr	r2, [r7, #4]
 8003aac:	6852      	ldr	r2, [r2, #4]
 8003aae:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ab2:	b29b      	uxth	r3, r3
 8003ab4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ab6:	e01d      	b.n	8003af4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ab8:	f7fe f9e2 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8003abc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	085a      	lsrs	r2, r3, #1
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	441a      	add	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad0:	b29b      	uxth	r3, r3
 8003ad2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003ad4:	e00e      	b.n	8003af4 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ae8:	b29b      	uxth	r3, r3
 8003aea:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003aec:	e002      	b.n	8003af4 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	76fb      	strb	r3, [r7, #27]
        break;
 8003af2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003af4:	69fb      	ldr	r3, [r7, #28]
 8003af6:	2b0f      	cmp	r3, #15
 8003af8:	d90a      	bls.n	8003b10 <UART_SetConfig+0x6c8>
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b00:	d206      	bcs.n	8003b10 <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	60da      	str	r2, [r3, #12]
 8003b0a:	e003      	b.n	8003b14 <UART_SetConfig+0x6cc>
 8003b0c:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2200      	movs	r2, #0
 8003b18:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2200      	movs	r2, #0
 8003b1e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 8003b20:	7efb      	ldrb	r3, [r7, #27]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3728      	adds	r7, #40	; 0x28
 8003b26:	46bd      	mov	sp, r7
 8003b28:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08003b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00a      	beq.n	8003b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	430a      	orrs	r2, r1
 8003b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5a:	f003 0302 	and.w	r3, r3, #2
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d00a      	beq.n	8003b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	430a      	orrs	r2, r1
 8003b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b7c:	f003 0304 	and.w	r3, r3, #4
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d00a      	beq.n	8003b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	f003 0308 	and.w	r3, r3, #8
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d00a      	beq.n	8003bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d00a      	beq.n	8003bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	689b      	ldr	r3, [r3, #8]
 8003bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	430a      	orrs	r2, r1
 8003bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be2:	f003 0320 	and.w	r3, r3, #32
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d00a      	beq.n	8003c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d01a      	beq.n	8003c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c2a:	d10a      	bne.n	8003c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d00a      	beq.n	8003c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	430a      	orrs	r2, r1
 8003c62:	605a      	str	r2, [r3, #4]
  }
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b086      	sub	sp, #24
 8003c74:	af02      	add	r7, sp, #8
 8003c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003c7e:	f7fd f8ab 	bl	8000dd8 <HAL_GetTick>
 8003c82:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f003 0308 	and.w	r3, r3, #8
 8003c8e:	2b08      	cmp	r3, #8
 8003c90:	d10e      	bne.n	8003cb0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c92:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c96:	9300      	str	r3, [sp, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 f82a 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d001      	beq.n	8003cb0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e020      	b.n	8003cf2 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 0304 	and.w	r3, r3, #4
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d10e      	bne.n	8003cdc <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003cbe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f000 f814 	bl	8003cfa <UART_WaitOnFlagUntilTimeout>
 8003cd2:	4603      	mov	r3, r0
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d001      	beq.n	8003cdc <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cd8:	2303      	movs	r3, #3
 8003cda:	e00a      	b.n	8003cf2 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	2220      	movs	r2, #32
 8003ce6:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	60f8      	str	r0, [r7, #12]
 8003d02:	60b9      	str	r1, [r7, #8]
 8003d04:	603b      	str	r3, [r7, #0]
 8003d06:	4613      	mov	r3, r2
 8003d08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d0a:	e05d      	b.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d12:	d059      	beq.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d14:	f7fd f860 	bl	8000dd8 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d302      	bcc.n	8003d2a <UART_WaitOnFlagUntilTimeout+0x30>
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d11b      	bne.n	8003d62 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d38:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	689a      	ldr	r2, [r3, #8]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0201 	bic.w	r2, r2, #1
 8003d48:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2220      	movs	r2, #32
 8003d54:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e042      	b.n	8003de8 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f003 0304 	and.w	r3, r3, #4
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d02b      	beq.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d7e:	d123      	bne.n	8003dc8 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d88:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003d98:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f022 0201 	bic.w	r2, r2, #1
 8003da8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2220      	movs	r2, #32
 8003db4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8003dc4:	2303      	movs	r3, #3
 8003dc6:	e00f      	b.n	8003de8 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	69da      	ldr	r2, [r3, #28]
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	429a      	cmp	r2, r3
 8003dd6:	bf0c      	ite	eq
 8003dd8:	2301      	moveq	r3, #1
 8003dda:	2300      	movne	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	461a      	mov	r2, r3
 8003de0:	79fb      	ldrb	r3, [r7, #7]
 8003de2:	429a      	cmp	r2, r3
 8003de4:	d092      	beq.n	8003d0c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003de6:	2300      	movs	r3, #0
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3710      	adds	r7, #16
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}

08003df0 <__libc_init_array>:
 8003df0:	b570      	push	{r4, r5, r6, lr}
 8003df2:	4e0d      	ldr	r6, [pc, #52]	; (8003e28 <__libc_init_array+0x38>)
 8003df4:	4c0d      	ldr	r4, [pc, #52]	; (8003e2c <__libc_init_array+0x3c>)
 8003df6:	1ba4      	subs	r4, r4, r6
 8003df8:	10a4      	asrs	r4, r4, #2
 8003dfa:	2500      	movs	r5, #0
 8003dfc:	42a5      	cmp	r5, r4
 8003dfe:	d109      	bne.n	8003e14 <__libc_init_array+0x24>
 8003e00:	4e0b      	ldr	r6, [pc, #44]	; (8003e30 <__libc_init_array+0x40>)
 8003e02:	4c0c      	ldr	r4, [pc, #48]	; (8003e34 <__libc_init_array+0x44>)
 8003e04:	f000 f820 	bl	8003e48 <_init>
 8003e08:	1ba4      	subs	r4, r4, r6
 8003e0a:	10a4      	asrs	r4, r4, #2
 8003e0c:	2500      	movs	r5, #0
 8003e0e:	42a5      	cmp	r5, r4
 8003e10:	d105      	bne.n	8003e1e <__libc_init_array+0x2e>
 8003e12:	bd70      	pop	{r4, r5, r6, pc}
 8003e14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e18:	4798      	blx	r3
 8003e1a:	3501      	adds	r5, #1
 8003e1c:	e7ee      	b.n	8003dfc <__libc_init_array+0xc>
 8003e1e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e22:	4798      	blx	r3
 8003e24:	3501      	adds	r5, #1
 8003e26:	e7f2      	b.n	8003e0e <__libc_init_array+0x1e>
 8003e28:	08003f14 	.word	0x08003f14
 8003e2c:	08003f14 	.word	0x08003f14
 8003e30:	08003f14 	.word	0x08003f14
 8003e34:	08003f18 	.word	0x08003f18

08003e38 <memset>:
 8003e38:	4402      	add	r2, r0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d100      	bne.n	8003e42 <memset+0xa>
 8003e40:	4770      	bx	lr
 8003e42:	f803 1b01 	strb.w	r1, [r3], #1
 8003e46:	e7f9      	b.n	8003e3c <memset+0x4>

08003e48 <_init>:
 8003e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e4a:	bf00      	nop
 8003e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e4e:	bc08      	pop	{r3}
 8003e50:	469e      	mov	lr, r3
 8003e52:	4770      	bx	lr

08003e54 <_fini>:
 8003e54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e56:	bf00      	nop
 8003e58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003e5a:	bc08      	pop	{r3}
 8003e5c:	469e      	mov	lr, r3
 8003e5e:	4770      	bx	lr
